
super_traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08005074  08005074  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005074  08005074  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200000b0  0800512c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800512c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018626  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7f  00000000  00000000  000386ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c4  00000000  00000000  0003ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e6a  00000000  00000000  00056714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2b7  00000000  00000000  0006957e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  000f4888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fb8 	.word	0x08004fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08004fb8 	.word	0x08004fb8

0800014c <ButtonInitializer>:
//int BtnRegistor1 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
//int BtnRegistor2 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
//int BtnRegistor3 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
//int TimerForKeyPress [4] = {500, 500, 500, 500};

void ButtonInitializer(int i){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(i==0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	f040 808c 	bne.w	8000274 <ButtonInitializer+0x128>
		button[i].gpio= BUTTON_PORT[i];
 800015c:	4a8f      	ldr	r2, [pc, #572]	; (800039c <ButtonInitializer+0x250>)
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000164:	488e      	ldr	r0, [pc, #568]	; (80003a0 <ButtonInitializer+0x254>)
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	4613      	mov	r3, r2
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	4413      	add	r3, r2
 800016e:	00db      	lsls	r3, r3, #3
 8000170:	4403      	add	r3, r0
 8000172:	3320      	adds	r3, #32
 8000174:	6019      	str	r1, [r3, #0]
		button[i].is_long_pressed=0;
 8000176:	498a      	ldr	r1, [pc, #552]	; (80003a0 <ButtonInitializer+0x254>)
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	4613      	mov	r3, r2
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	4413      	add	r3, r2
 8000180:	00db      	lsls	r3, r3, #3
 8000182:	440b      	add	r3, r1
 8000184:	3318      	adds	r3, #24
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
		button[i].is_pressed=0;
 800018a:	4985      	ldr	r1, [pc, #532]	; (80003a0 <ButtonInitializer+0x254>)
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	440b      	add	r3, r1
 8000198:	3314      	adds	r3, #20
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
 800019e:	4a81      	ldr	r2, [pc, #516]	; (80003a4 <ButtonInitializer+0x258>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80001a6:	497e      	ldr	r1, [pc, #504]	; (80003a0 <ButtonInitializer+0x254>)
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4613      	mov	r3, r2
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	4413      	add	r3, r2
 80001b0:	00db      	lsls	r3, r3, #3
 80001b2:	440b      	add	r3, r1
 80001b4:	3324      	adds	r3, #36	; 0x24
 80001b6:	4602      	mov	r2, r0
 80001b8:	801a      	strh	r2, [r3, #0]
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = button[i].reg[4] = NORMAL_STATE;
 80001ba:	4979      	ldr	r1, [pc, #484]	; (80003a0 <ButtonInitializer+0x254>)
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4613      	mov	r3, r2
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	4413      	add	r3, r2
 80001c4:	00db      	lsls	r3, r3, #3
 80001c6:	440b      	add	r3, r1
 80001c8:	3310      	adds	r3, #16
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	4974      	ldr	r1, [pc, #464]	; (80003a0 <ButtonInitializer+0x254>)
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	4613      	mov	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	4413      	add	r3, r2
 80001d8:	00db      	lsls	r3, r3, #3
 80001da:	440b      	add	r3, r1
 80001dc:	3310      	adds	r3, #16
 80001de:	6819      	ldr	r1, [r3, #0]
 80001e0:	486f      	ldr	r0, [pc, #444]	; (80003a0 <ButtonInitializer+0x254>)
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	4613      	mov	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4413      	add	r3, r2
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	4403      	add	r3, r0
 80001ee:	330c      	adds	r3, #12
 80001f0:	6019      	str	r1, [r3, #0]
 80001f2:	496b      	ldr	r1, [pc, #428]	; (80003a0 <ButtonInitializer+0x254>)
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	4613      	mov	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	4413      	add	r3, r2
 80001fc:	00db      	lsls	r3, r3, #3
 80001fe:	440b      	add	r3, r1
 8000200:	330c      	adds	r3, #12
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	4866      	ldr	r0, [pc, #408]	; (80003a0 <ButtonInitializer+0x254>)
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	4613      	mov	r3, r2
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4413      	add	r3, r2
 800020e:	00db      	lsls	r3, r3, #3
 8000210:	4403      	add	r3, r0
 8000212:	3308      	adds	r3, #8
 8000214:	6019      	str	r1, [r3, #0]
 8000216:	4962      	ldr	r1, [pc, #392]	; (80003a0 <ButtonInitializer+0x254>)
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	4613      	mov	r3, r2
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	4413      	add	r3, r2
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	440b      	add	r3, r1
 8000224:	3308      	adds	r3, #8
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	485d      	ldr	r0, [pc, #372]	; (80003a0 <ButtonInitializer+0x254>)
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	4613      	mov	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4413      	add	r3, r2
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	4403      	add	r3, r0
 8000236:	3304      	adds	r3, #4
 8000238:	6019      	str	r1, [r3, #0]
 800023a:	4959      	ldr	r1, [pc, #356]	; (80003a0 <ButtonInitializer+0x254>)
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4613      	mov	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	4413      	add	r3, r2
 8000244:	00db      	lsls	r3, r3, #3
 8000246:	440b      	add	r3, r1
 8000248:	3304      	adds	r3, #4
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	4854      	ldr	r0, [pc, #336]	; (80003a0 <ButtonInitializer+0x254>)
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	00db      	lsls	r3, r3, #3
 8000258:	4403      	add	r3, r0
 800025a:	6019      	str	r1, [r3, #0]
		button[i].timer= 500;
 800025c:	4950      	ldr	r1, [pc, #320]	; (80003a0 <ButtonInitializer+0x254>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	440b      	add	r3, r1
 800026a:	331c      	adds	r3, #28
 800026c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000270:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = button[i].reg[4] = NORMAL_STATE;
		button[i].timer= 500;
		ButtonInitializer(i-1);
	}
}
 8000272:	e08f      	b.n	8000394 <ButtonInitializer+0x248>
		button[i].gpio= BUTTON_PORT[i];
 8000274:	4a49      	ldr	r2, [pc, #292]	; (800039c <ButtonInitializer+0x250>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800027c:	4848      	ldr	r0, [pc, #288]	; (80003a0 <ButtonInitializer+0x254>)
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	4403      	add	r3, r0
 800028a:	3320      	adds	r3, #32
 800028c:	6019      	str	r1, [r3, #0]
		button[i].is_long_pressed=0;
 800028e:	4944      	ldr	r1, [pc, #272]	; (80003a0 <ButtonInitializer+0x254>)
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4613      	mov	r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	4413      	add	r3, r2
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	440b      	add	r3, r1
 800029c:	3318      	adds	r3, #24
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
		button[i].is_pressed=0;
 80002a2:	493f      	ldr	r1, [pc, #252]	; (80003a0 <ButtonInitializer+0x254>)
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4613      	mov	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4413      	add	r3, r2
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	440b      	add	r3, r1
 80002b0:	3314      	adds	r3, #20
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
 80002b6:	4a3b      	ldr	r2, [pc, #236]	; (80003a4 <ButtonInitializer+0x258>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80002be:	4938      	ldr	r1, [pc, #224]	; (80003a0 <ButtonInitializer+0x254>)
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	440b      	add	r3, r1
 80002cc:	3324      	adds	r3, #36	; 0x24
 80002ce:	4602      	mov	r2, r0
 80002d0:	801a      	strh	r2, [r3, #0]
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = button[i].reg[4] = NORMAL_STATE;
 80002d2:	4933      	ldr	r1, [pc, #204]	; (80003a0 <ButtonInitializer+0x254>)
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	4613      	mov	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	440b      	add	r3, r1
 80002e0:	3310      	adds	r3, #16
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	492e      	ldr	r1, [pc, #184]	; (80003a0 <ButtonInitializer+0x254>)
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4613      	mov	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	440b      	add	r3, r1
 80002f4:	3310      	adds	r3, #16
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	4829      	ldr	r0, [pc, #164]	; (80003a0 <ButtonInitializer+0x254>)
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4613      	mov	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	4403      	add	r3, r0
 8000306:	330c      	adds	r3, #12
 8000308:	6019      	str	r1, [r3, #0]
 800030a:	4925      	ldr	r1, [pc, #148]	; (80003a0 <ButtonInitializer+0x254>)
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	4613      	mov	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	4413      	add	r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	440b      	add	r3, r1
 8000318:	330c      	adds	r3, #12
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	4820      	ldr	r0, [pc, #128]	; (80003a0 <ButtonInitializer+0x254>)
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	4403      	add	r3, r0
 800032a:	3308      	adds	r3, #8
 800032c:	6019      	str	r1, [r3, #0]
 800032e:	491c      	ldr	r1, [pc, #112]	; (80003a0 <ButtonInitializer+0x254>)
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4613      	mov	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	4413      	add	r3, r2
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	440b      	add	r3, r1
 800033c:	3308      	adds	r3, #8
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	4817      	ldr	r0, [pc, #92]	; (80003a0 <ButtonInitializer+0x254>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4403      	add	r3, r0
 800034e:	3304      	adds	r3, #4
 8000350:	6019      	str	r1, [r3, #0]
 8000352:	4913      	ldr	r1, [pc, #76]	; (80003a0 <ButtonInitializer+0x254>)
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	4413      	add	r3, r2
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	440b      	add	r3, r1
 8000360:	3304      	adds	r3, #4
 8000362:	6819      	ldr	r1, [r3, #0]
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <ButtonInitializer+0x254>)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4403      	add	r3, r0
 8000372:	6019      	str	r1, [r3, #0]
		button[i].timer= 500;
 8000374:	490a      	ldr	r1, [pc, #40]	; (80003a0 <ButtonInitializer+0x254>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	4613      	mov	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	440b      	add	r3, r1
 8000382:	331c      	adds	r3, #28
 8000384:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000388:	601a      	str	r2, [r3, #0]
		ButtonInitializer(i-1);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3b01      	subs	r3, #1
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff fedc 	bl	800014c <ButtonInitializer>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000150 	.word	0x20000150
 80003a4:	20000010 	.word	0x20000010

080003a8 <buttonInnit>:

void buttonInnit(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	ButtonInitializer(NUMBER_OF_BUTTON -1);
 80003ac:	2003      	movs	r0, #3
 80003ae:	f7ff fecd 	bl	800014c <ButtonInitializer>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <isButtonPressed>:

int isButtonPressed(int index){
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	return button[index].is_pressed;
 80003c0:	4906      	ldr	r1, [pc, #24]	; (80003dc <isButtonPressed+0x24>)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	4613      	mov	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	4413      	add	r3, r2
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	440b      	add	r3, r1
 80003ce:	3314      	adds	r3, #20
 80003d0:	681b      	ldr	r3, [r3, #0]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000150 	.word	0x20000150

080003e0 <isButtonLongPressed>:
int isButtonLongPressed(int index){
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	return button[index].is_long_pressed;
 80003e8:	4906      	ldr	r1, [pc, #24]	; (8000404 <isButtonLongPressed+0x24>)
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	4613      	mov	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	440b      	add	r3, r1
 80003f6:	3318      	adds	r3, #24
 80003f8:	681b      	ldr	r3, [r3, #0]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	20000150 	.word	0x20000150

08000408 <getInput>:
//void subKeyProcess(int button){
//	button_flag[button] = 1;
//}


void getInput(int i){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
//			{
//				BtnRegistor3[button] = NORMAL_STATE;
//			}
//		}
//	}
	if (i == 0) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	f040 8124 	bne.w	8000660 <getInput+0x258>
		button[i].reg[0] = button[i].reg[1];
 8000418:	498e      	ldr	r1, [pc, #568]	; (8000654 <getInput+0x24c>)
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4613      	mov	r3, r2
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	4413      	add	r3, r2
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	440b      	add	r3, r1
 8000426:	3304      	adds	r3, #4
 8000428:	6819      	ldr	r1, [r3, #0]
 800042a:	488a      	ldr	r0, [pc, #552]	; (8000654 <getInput+0x24c>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	4403      	add	r3, r0
 8000438:	6019      	str	r1, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 800043a:	4986      	ldr	r1, [pc, #536]	; (8000654 <getInput+0x24c>)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	440b      	add	r3, r1
 8000448:	3308      	adds	r3, #8
 800044a:	6819      	ldr	r1, [r3, #0]
 800044c:	4881      	ldr	r0, [pc, #516]	; (8000654 <getInput+0x24c>)
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	4403      	add	r3, r0
 800045a:	3304      	adds	r3, #4
 800045c:	6019      	str	r1, [r3, #0]
		button[i].reg[2] = button[i].reg[3];
 800045e:	497d      	ldr	r1, [pc, #500]	; (8000654 <getInput+0x24c>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4613      	mov	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4413      	add	r3, r2
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	440b      	add	r3, r1
 800046c:	330c      	adds	r3, #12
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	4878      	ldr	r0, [pc, #480]	; (8000654 <getInput+0x24c>)
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	4403      	add	r3, r0
 800047e:	3308      	adds	r3, #8
 8000480:	6019      	str	r1, [r3, #0]
		button[i].reg[3] = button[i].reg[4];
 8000482:	4974      	ldr	r1, [pc, #464]	; (8000654 <getInput+0x24c>)
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	440b      	add	r3, r1
 8000490:	3310      	adds	r3, #16
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	486f      	ldr	r0, [pc, #444]	; (8000654 <getInput+0x24c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	4613      	mov	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	4403      	add	r3, r0
 80004a2:	330c      	adds	r3, #12
 80004a4:	6019      	str	r1, [r3, #0]
		button[i].reg[4] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 80004a6:	4a6c      	ldr	r2, [pc, #432]	; (8000658 <getInput+0x250>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ae:	496b      	ldr	r1, [pc, #428]	; (800065c <getInput+0x254>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f001 ff31 	bl	8002320 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	4618      	mov	r0, r3
 80004c2:	4964      	ldr	r1, [pc, #400]	; (8000654 <getInput+0x24c>)
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4613      	mov	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	440b      	add	r3, r1
 80004d0:	3310      	adds	r3, #16
 80004d2:	6018      	str	r0, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 80004d4:	495f      	ldr	r1, [pc, #380]	; (8000654 <getInput+0x24c>)
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	440b      	add	r3, r1
 80004e2:	6819      	ldr	r1, [r3, #0]
 80004e4:	485b      	ldr	r0, [pc, #364]	; (8000654 <getInput+0x24c>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	4403      	add	r3, r0
 80004f2:	3304      	adds	r3, #4
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4299      	cmp	r1, r3
 80004f8:	f040 81c4 	bne.w	8000884 <getInput+0x47c>
				&& button[i].reg[1] == button[i].reg[2]
 80004fc:	4955      	ldr	r1, [pc, #340]	; (8000654 <getInput+0x24c>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	440b      	add	r3, r1
 800050a:	3304      	adds	r3, #4
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	4851      	ldr	r0, [pc, #324]	; (8000654 <getInput+0x24c>)
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4613      	mov	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4403      	add	r3, r0
 800051c:	3308      	adds	r3, #8
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4299      	cmp	r1, r3
 8000522:	f040 81af 	bne.w	8000884 <getInput+0x47c>
				&& button[i].reg[2] == button[i].reg[3]
 8000526:	494b      	ldr	r1, [pc, #300]	; (8000654 <getInput+0x24c>)
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4613      	mov	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	440b      	add	r3, r1
 8000534:	3308      	adds	r3, #8
 8000536:	6819      	ldr	r1, [r3, #0]
 8000538:	4846      	ldr	r0, [pc, #280]	; (8000654 <getInput+0x24c>)
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	4403      	add	r3, r0
 8000546:	330c      	adds	r3, #12
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4299      	cmp	r1, r3
 800054c:	f040 819a 	bne.w	8000884 <getInput+0x47c>
				&& button[i].reg[3] == button[i].reg[4]) {
 8000550:	4940      	ldr	r1, [pc, #256]	; (8000654 <getInput+0x24c>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	440b      	add	r3, r1
 800055e:	330c      	adds	r3, #12
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	483c      	ldr	r0, [pc, #240]	; (8000654 <getInput+0x24c>)
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	4403      	add	r3, r0
 8000570:	3310      	adds	r3, #16
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4299      	cmp	r1, r3
 8000576:	f040 8185 	bne.w	8000884 <getInput+0x47c>
			if (button[i].reg[4] == PRESSED_STATE) {
 800057a:	4936      	ldr	r1, [pc, #216]	; (8000654 <getInput+0x24c>)
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	3310      	adds	r3, #16
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d140      	bne.n	8000612 <getInput+0x20a>
				if (button[i].timer > 0) {
 8000590:	4930      	ldr	r1, [pc, #192]	; (8000654 <getInput+0x24c>)
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4613      	mov	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	440b      	add	r3, r1
 800059e:	331c      	adds	r3, #28
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	dd13      	ble.n	80005ce <getInput+0x1c6>
					button[i].timer--;
 80005a6:	492b      	ldr	r1, [pc, #172]	; (8000654 <getInput+0x24c>)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4613      	mov	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	440b      	add	r3, r1
 80005b4:	331c      	adds	r3, #28
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1e59      	subs	r1, r3, #1
 80005ba:	4826      	ldr	r0, [pc, #152]	; (8000654 <getInput+0x24c>)
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4403      	add	r3, r0
 80005c8:	331c      	adds	r3, #28
 80005ca:	6019      	str	r1, [r3, #0]
 80005cc:	e009      	b.n	80005e2 <getInput+0x1da>

				}
				else {
					button[i].is_long_pressed = 1;
 80005ce:	4921      	ldr	r1, [pc, #132]	; (8000654 <getInput+0x24c>)
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	440b      	add	r3, r1
 80005dc:	3318      	adds	r3, #24
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
				}
				if (button[i].timer <= 490) {
 80005e2:	491c      	ldr	r1, [pc, #112]	; (8000654 <getInput+0x24c>)
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	440b      	add	r3, r1
 80005f0:	331c      	adds	r3, #28
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80005f8:	f300 8144 	bgt.w	8000884 <getInput+0x47c>
					button[i].is_pressed = 1;
 80005fc:	4915      	ldr	r1, [pc, #84]	; (8000654 <getInput+0x24c>)
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4613      	mov	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	440b      	add	r3, r1
 800060a:	3314      	adds	r3, #20
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
				button[i].timer = 500;
			}
		}
		getInput(i-1);
	}
}
 8000610:	e138      	b.n	8000884 <getInput+0x47c>
				button[i].is_pressed = 0;
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <getInput+0x24c>)
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4613      	mov	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	440b      	add	r3, r1
 8000620:	3314      	adds	r3, #20
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
				button[i].is_long_pressed = 0;
 8000626:	490b      	ldr	r1, [pc, #44]	; (8000654 <getInput+0x24c>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	440b      	add	r3, r1
 8000634:	3318      	adds	r3, #24
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
				button[i].timer = 500;
 800063a:	4906      	ldr	r1, [pc, #24]	; (8000654 <getInput+0x24c>)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	440b      	add	r3, r1
 8000648:	331c      	adds	r3, #28
 800064a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	e118      	b.n	8000884 <getInput+0x47c>
 8000652:	bf00      	nop
 8000654:	20000150 	.word	0x20000150
 8000658:	20000000 	.word	0x20000000
 800065c:	20000010 	.word	0x20000010
		button[i].reg[0] = button[i].reg[1];
 8000660:	498a      	ldr	r1, [pc, #552]	; (800088c <getInput+0x484>)
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	440b      	add	r3, r1
 800066e:	3304      	adds	r3, #4
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	4886      	ldr	r0, [pc, #536]	; (800088c <getInput+0x484>)
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	4403      	add	r3, r0
 8000680:	6019      	str	r1, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 8000682:	4982      	ldr	r1, [pc, #520]	; (800088c <getInput+0x484>)
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	440b      	add	r3, r1
 8000690:	3308      	adds	r3, #8
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	487d      	ldr	r0, [pc, #500]	; (800088c <getInput+0x484>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4403      	add	r3, r0
 80006a2:	3304      	adds	r3, #4
 80006a4:	6019      	str	r1, [r3, #0]
		button[i].reg[2] = button[i].reg[3];
 80006a6:	4979      	ldr	r1, [pc, #484]	; (800088c <getInput+0x484>)
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	440b      	add	r3, r1
 80006b4:	330c      	adds	r3, #12
 80006b6:	6819      	ldr	r1, [r3, #0]
 80006b8:	4874      	ldr	r0, [pc, #464]	; (800088c <getInput+0x484>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4403      	add	r3, r0
 80006c6:	3308      	adds	r3, #8
 80006c8:	6019      	str	r1, [r3, #0]
		button[i].reg[3] = button[i].reg[4];
 80006ca:	4970      	ldr	r1, [pc, #448]	; (800088c <getInput+0x484>)
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4613      	mov	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	440b      	add	r3, r1
 80006d8:	3310      	adds	r3, #16
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	486b      	ldr	r0, [pc, #428]	; (800088c <getInput+0x484>)
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	4403      	add	r3, r0
 80006ea:	330c      	adds	r3, #12
 80006ec:	6019      	str	r1, [r3, #0]
		button[i].reg[4] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 80006ee:	4a68      	ldr	r2, [pc, #416]	; (8000890 <getInput+0x488>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f6:	4967      	ldr	r1, [pc, #412]	; (8000894 <getInput+0x48c>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006fe:	4619      	mov	r1, r3
 8000700:	4610      	mov	r0, r2
 8000702:	f001 fe0d 	bl	8002320 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	4618      	mov	r0, r3
 800070a:	4960      	ldr	r1, [pc, #384]	; (800088c <getInput+0x484>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	440b      	add	r3, r1
 8000718:	3310      	adds	r3, #16
 800071a:	6018      	str	r0, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 800071c:	495b      	ldr	r1, [pc, #364]	; (800088c <getInput+0x484>)
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	440b      	add	r3, r1
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	4857      	ldr	r0, [pc, #348]	; (800088c <getInput+0x484>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4613      	mov	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	4403      	add	r3, r0
 800073a:	3304      	adds	r3, #4
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4299      	cmp	r1, r3
 8000740:	f040 809b 	bne.w	800087a <getInput+0x472>
				&& button[i].reg[1] == button[i].reg[2]
 8000744:	4951      	ldr	r1, [pc, #324]	; (800088c <getInput+0x484>)
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	440b      	add	r3, r1
 8000752:	3304      	adds	r3, #4
 8000754:	6819      	ldr	r1, [r3, #0]
 8000756:	484d      	ldr	r0, [pc, #308]	; (800088c <getInput+0x484>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4403      	add	r3, r0
 8000764:	3308      	adds	r3, #8
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4299      	cmp	r1, r3
 800076a:	f040 8086 	bne.w	800087a <getInput+0x472>
				&& button[i].reg[2] == button[i].reg[3]
 800076e:	4947      	ldr	r1, [pc, #284]	; (800088c <getInput+0x484>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	440b      	add	r3, r1
 800077c:	3308      	adds	r3, #8
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	4842      	ldr	r0, [pc, #264]	; (800088c <getInput+0x484>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	4403      	add	r3, r0
 800078e:	330c      	adds	r3, #12
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4299      	cmp	r1, r3
 8000794:	d171      	bne.n	800087a <getInput+0x472>
				&& button[i].reg[3] == button[i].reg[4]) {
 8000796:	493d      	ldr	r1, [pc, #244]	; (800088c <getInput+0x484>)
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	440b      	add	r3, r1
 80007a4:	330c      	adds	r3, #12
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	4838      	ldr	r0, [pc, #224]	; (800088c <getInput+0x484>)
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4403      	add	r3, r0
 80007b6:	3310      	adds	r3, #16
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4299      	cmp	r1, r3
 80007bc:	d15d      	bne.n	800087a <getInput+0x472>
			if (button[i].reg[4] == PRESSED_STATE) {
 80007be:	4933      	ldr	r1, [pc, #204]	; (800088c <getInput+0x484>)
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	440b      	add	r3, r1
 80007cc:	3310      	adds	r3, #16
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d133      	bne.n	800083c <getInput+0x434>
				button[i].is_pressed = 1;
 80007d4:	492d      	ldr	r1, [pc, #180]	; (800088c <getInput+0x484>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	3314      	adds	r3, #20
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
				if (button[i].timer > 0) {
 80007e8:	4928      	ldr	r1, [pc, #160]	; (800088c <getInput+0x484>)
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	331c      	adds	r3, #28
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	dd13      	ble.n	8000826 <getInput+0x41e>
					button[i].timer--;
 80007fe:	4923      	ldr	r1, [pc, #140]	; (800088c <getInput+0x484>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	331c      	adds	r3, #28
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1e59      	subs	r1, r3, #1
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <getInput+0x484>)
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4403      	add	r3, r0
 8000820:	331c      	adds	r3, #28
 8000822:	6019      	str	r1, [r3, #0]
 8000824:	e029      	b.n	800087a <getInput+0x472>
					button[i].is_long_pressed = 1;
 8000826:	4919      	ldr	r1, [pc, #100]	; (800088c <getInput+0x484>)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3318      	adds	r3, #24
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e01e      	b.n	800087a <getInput+0x472>
				button[i].is_pressed = 0;
 800083c:	4913      	ldr	r1, [pc, #76]	; (800088c <getInput+0x484>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	3314      	adds	r3, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
				button[i].is_long_pressed = 0;
 8000850:	490e      	ldr	r1, [pc, #56]	; (800088c <getInput+0x484>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	440b      	add	r3, r1
 800085e:	3318      	adds	r3, #24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
				button[i].timer = 500;
 8000864:	4909      	ldr	r1, [pc, #36]	; (800088c <getInput+0x484>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	440b      	add	r3, r1
 8000872:	331c      	adds	r3, #28
 8000874:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000878:	601a      	str	r2, [r3, #0]
		getInput(i-1);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fdc2 	bl	8000408 <getInput>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000150 	.word	0x20000150
 8000890:	20000000 	.word	0x20000000
 8000894:	20000010 	.word	0x20000010

08000898 <getKeyInput>:
void getKeyInput(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	getInput(NUMBER_OF_BUTTON-1);
 800089c:	2003      	movs	r0, #3
 800089e:	f7ff fdb3 	bl	8000408 <getInput>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <fsm_automatic_run>:
 *      Author: MY PC
 */

#include "fsm_auto.h"

void fsm_automatic_run(int lane){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

	Display(timer[0].count / 100, timer[1].count / 100);
 80008b0:	4b78      	ldr	r3, [pc, #480]	; (8000a94 <fsm_automatic_run+0x1ec>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a78      	ldr	r2, [pc, #480]	; (8000a98 <fsm_automatic_run+0x1f0>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	4618      	mov	r0, r3
 80008be:	4b75      	ldr	r3, [pc, #468]	; (8000a94 <fsm_automatic_run+0x1ec>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	4a75      	ldr	r2, [pc, #468]	; (8000a98 <fsm_automatic_run+0x1f0>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	095b      	lsrs	r3, r3, #5
 80008ca:	4619      	mov	r1, r3
 80008cc:	f001 f8de 	bl	8001a8c <Display>
	if (PEDESTRIAN_MODE && LED_STATE[0] == RED_STATE) {
 80008d0:	4b72      	ldr	r3, [pc, #456]	; (8000a9c <fsm_automatic_run+0x1f4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01a      	beq.n	800090e <fsm_automatic_run+0x66>
 80008d8:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d116      	bne.n	800090e <fsm_automatic_run+0x66>
		int freq = ((RED_DURATION * 100 - timer[0].count) / RED_DURATION)*21 ;
 80008e0:	4b70      	ldr	r3, [pc, #448]	; (8000aa4 <fsm_automatic_run+0x1fc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2264      	movs	r2, #100	; 0x64
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <fsm_automatic_run+0x1ec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	4a6c      	ldr	r2, [pc, #432]	; (8000aa4 <fsm_automatic_run+0x1fc>)
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	00da      	lsls	r2, r3, #3
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	60fb      	str	r3, [r7, #12]
		buzzer(freq);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fd9b 	bl	8001444 <buzzer>

	}
	if(LED_STATE[0] != RED_STATE){
 800090e:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d002      	beq.n	800091c <fsm_automatic_run+0x74>
		buzzer(0);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fd94 	bl	8001444 <buzzer>
	}
	switch(LED_STATE[lane]){
 800091c:	4a60      	ldr	r2, [pc, #384]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	3b01      	subs	r3, #1
 8000926:	2b03      	cmp	r3, #3
 8000928:	f200 80a6 	bhi.w	8000a78 <fsm_automatic_run+0x1d0>
 800092c:	a201      	add	r2, pc, #4	; (adr r2, 8000934 <fsm_automatic_run+0x8c>)
 800092e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000932:	bf00      	nop
 8000934:	08000945 	.word	0x08000945
 8000938:	080009a1 	.word	0x080009a1
 800093c:	080009e9 	.word	0x080009e9
 8000940:	08000a31 	.word	0x08000a31
		case INIT_STATE:
			setTrafficLightDefault(lane);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 ffa1 	bl	800188c <setTrafficLightDefault>
			if (lane == 0){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d117      	bne.n	8000980 <fsm_automatic_run+0xd8>
				LED_STATE[lane] = RED_STATE;
 8000950:	4a53      	ldr	r2, [pc, #332]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2102      	movs	r1, #2
 8000956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <fsm_automatic_run+0x1fc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2164      	movs	r1, #100	; 0x64
 8000962:	fb01 f303 	mul.w	r3, r1, r3
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f000 ff15 	bl	8001798 <setTimer>
				if(PEDESTRIAN_MODE){
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <fsm_automatic_run+0x1f4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 8082 	beq.w	8000a7c <fsm_automatic_run+0x1d4>
					setGreen(2);
 8000978:	2002      	movs	r0, #2
 800097a:	f000 ffd5 	bl	8001928 <setGreen>
			}
			else{
				LED_STATE[lane] = GREEN_STATE;
				setTimer(lane, GREEN_DURATION*100);
			}
			break;
 800097e:	e07d      	b.n	8000a7c <fsm_automatic_run+0x1d4>
				LED_STATE[lane] = GREEN_STATE;
 8000980:	4a47      	ldr	r2, [pc, #284]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2103      	movs	r1, #3
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <fsm_automatic_run+0x200>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2164      	movs	r1, #100	; 0x64
 8000992:	fb01 f303 	mul.w	r3, r1, r3
 8000996:	4619      	mov	r1, r3
 8000998:	4610      	mov	r0, r2
 800099a:	f000 fefd 	bl	8001798 <setTimer>
			break;
 800099e:	e06d      	b.n	8000a7c <fsm_automatic_run+0x1d4>
		case RED_STATE:
			setRed(lane);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f001 f803 	bl	80019ac <setRed>
			if(isTimerOn(lane) == 1){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 ff59 	bl	8001860 <isTimerOn>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10e      	bne.n	80009d2 <fsm_automatic_run+0x12a>
				LED_STATE[lane] = GREEN_STATE;
 80009b4:	4a3a      	ldr	r2, [pc, #232]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2103      	movs	r1, #3
 80009ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <fsm_automatic_run+0x200>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2164      	movs	r1, #100	; 0x64
 80009c6:	fb01 f303 	mul.w	r3, r1, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f000 fee3 	bl	8001798 <setTimer>
			}

			if(lane ==0 && PEDESTRIAN_MODE){
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d153      	bne.n	8000a80 <fsm_automatic_run+0x1d8>
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <fsm_automatic_run+0x1f4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d04f      	beq.n	8000a80 <fsm_automatic_run+0x1d8>
				setGreen(2);
 80009e0:	2002      	movs	r0, #2
 80009e2:	f000 ffa1 	bl	8001928 <setGreen>
			}
			break;
 80009e6:	e04b      	b.n	8000a80 <fsm_automatic_run+0x1d8>
		case GREEN_STATE:
			setGreen(lane);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 ff9d 	bl	8001928 <setGreen>
			if(isTimerOn(lane) == 1){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 ff35 	bl	8001860 <isTimerOn>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10e      	bne.n	8000a1a <fsm_automatic_run+0x172>
				LED_STATE[lane] = YELLOW_STATE;
 80009fc:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2104      	movs	r1, #4
 8000a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <fsm_automatic_run+0x204>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2164      	movs	r1, #100	; 0x64
 8000a0e:	fb01 f303 	mul.w	r3, r1, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	4610      	mov	r0, r2
 8000a16:	f000 febf 	bl	8001798 <setTimer>
			}

			if(lane == 0 && PEDESTRIAN_MODE){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d131      	bne.n	8000a84 <fsm_automatic_run+0x1dc>
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <fsm_automatic_run+0x1f4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d02d      	beq.n	8000a84 <fsm_automatic_run+0x1dc>
				setRed(2);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f000 ffbf 	bl	80019ac <setRed>
			}
			break;
 8000a2e:	e029      	b.n	8000a84 <fsm_automatic_run+0x1dc>
		case YELLOW_STATE:
			setAmber(lane);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fffd 	bl	8001a30 <setAmber>
			if(isTimerOn(lane) == 1){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 ff11 	bl	8001860 <isTimerOn>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10e      	bne.n	8000a62 <fsm_automatic_run+0x1ba>
				LED_STATE[lane] = RED_STATE;
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <fsm_automatic_run+0x1f8>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2102      	movs	r1, #2
 8000a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <fsm_automatic_run+0x1fc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2164      	movs	r1, #100	; 0x64
 8000a56:	fb01 f303 	mul.w	r3, r1, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	f000 fe9b 	bl	8001798 <setTimer>
			}

			if(lane ==0 && PEDESTRIAN_MODE){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10f      	bne.n	8000a88 <fsm_automatic_run+0x1e0>
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <fsm_automatic_run+0x1f4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00b      	beq.n	8000a88 <fsm_automatic_run+0x1e0>
				setRed(2);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f000 ff9b 	bl	80019ac <setRed>
			}
			break;
 8000a76:	e007      	b.n	8000a88 <fsm_automatic_run+0x1e0>
		default:
			break;
 8000a78:	bf00      	nop
 8000a7a:	e006      	b.n	8000a8a <fsm_automatic_run+0x1e2>
			break;
 8000a7c:	bf00      	nop
 8000a7e:	e004      	b.n	8000a8a <fsm_automatic_run+0x1e2>
			break;
 8000a80:	bf00      	nop
 8000a82:	e002      	b.n	8000a8a <fsm_automatic_run+0x1e2>
			break;
 8000a84:	bf00      	nop
 8000a86:	e000      	b.n	8000a8a <fsm_automatic_run+0x1e2>
			break;
 8000a88:	bf00      	nop
	}


}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000e0 	.word	0x200000e0
 8000a98:	51eb851f 	.word	0x51eb851f
 8000a9c:	200000d0 	.word	0x200000d0
 8000aa0:	20000018 	.word	0x20000018
 8000aa4:	20000024 	.word	0x20000024
 8000aa8:	2000002c 	.word	0x2000002c
 8000aac:	20000028 	.word	0x20000028

08000ab0 <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	setTrafficLightDefault(0);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 fee7 	bl	800188c <setTrafficLightDefault>
	setTrafficLightDefault(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fee4 	bl	800188c <setTrafficLightDefault>
	MODE = mode;
 8000ac4:	4a05      	ldr	r2, [pc, #20]	; (8000adc <changeMode+0x2c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
	setTimer(2, 25);
 8000aca:	2119      	movs	r1, #25
 8000acc:	2002      	movs	r0, #2
 8000ace:	f000 fe63 	bl	8001798 <setTimer>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000020 	.word	0x20000020

08000ae0 <fsm_manual_run>:


//handle manual setting
void fsm_manual_run(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	switch(MODE){
 8000ae4:	4b92      	ldr	r3, [pc, #584]	; (8000d30 <fsm_manual_run+0x250>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3b0b      	subs	r3, #11
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	f200 8276 	bhi.w	8000fdc <fsm_manual_run+0x4fc>
 8000af0:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <fsm_manual_run+0x18>)
 8000af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af6:	bf00      	nop
 8000af8:	08000b09 	.word	0x08000b09
 8000afc:	08000c29 	.word	0x08000c29
 8000b00:	08000d61 	.word	0x08000d61
 8000b04:	08000e63 	.word	0x08000e63
		case MODE_1:
			fsm_automatic_run(0);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fecd 	bl	80008a8 <fsm_automatic_run>
			fsm_automatic_run(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff feca 	bl	80008a8 <fsm_automatic_run>

			if (isButtonPressed(0) == 1){
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff fc4f 	bl	80003b8 <isButtonPressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d110      	bne.n	8000b42 <fsm_manual_run+0x62>
				tempDuration = RED_DURATION;
 8000b20:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <fsm_manual_run+0x254>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a84      	ldr	r2, [pc, #528]	; (8000d38 <fsm_manual_run+0x258>)
 8000b26:	6013      	str	r3, [r2, #0]
				changeMode(MODE_2);
 8000b28:	200c      	movs	r0, #12
 8000b2a:	f7ff ffc1 	bl	8000ab0 <changeMode>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000b2e:	2120      	movs	r1, #32
 8000b30:	4882      	ldr	r0, [pc, #520]	; (8000d3c <fsm_manual_run+0x25c>)
 8000b32:	f001 fc24 	bl	800237e <HAL_GPIO_TogglePin>
//				Turn off pedestrian mode
				PEDESTRIAN_MODE = 0;
 8000b36:	4b82      	ldr	r3, [pc, #520]	; (8000d40 <fsm_manual_run+0x260>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
//				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, RESET);
				ButtonInitializer(0);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fb05 	bl	800014c <ButtonInitializer>
			}
//			Change light on
			if(isButtonPressed(1) == 1){
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fc38 	bl	80003b8 <isButtonPressed>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d14c      	bne.n	8000be8 <fsm_manual_run+0x108>
				if(LED_STATE[0] == GREEN_STATE || LED_STATE[0] == YELLOW_STATE){
 8000b4e:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <fsm_manual_run+0x264>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d003      	beq.n	8000b5e <fsm_manual_run+0x7e>
 8000b56:	4b7b      	ldr	r3, [pc, #492]	; (8000d44 <fsm_manual_run+0x264>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d11e      	bne.n	8000b9c <fsm_manual_run+0xbc>
					LED_STATE[0]= RED_STATE;
 8000b5e:	4b79      	ldr	r3, [pc, #484]	; (8000d44 <fsm_manual_run+0x264>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	601a      	str	r2, [r3, #0]
					setTimer(0, RED_DURATION*100);
 8000b64:	4b73      	ldr	r3, [pc, #460]	; (8000d34 <fsm_manual_run+0x254>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2264      	movs	r2, #100	; 0x64
 8000b6a:	fb02 f303 	mul.w	r3, r2, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 fe11 	bl	8001798 <setTimer>
					LED_STATE[1]= GREEN_STATE;
 8000b76:	4b73      	ldr	r3, [pc, #460]	; (8000d44 <fsm_manual_run+0x264>)
 8000b78:	2203      	movs	r2, #3
 8000b7a:	605a      	str	r2, [r3, #4]
					setTimer(1, GREEN_DURATION*100);
 8000b7c:	4b72      	ldr	r3, [pc, #456]	; (8000d48 <fsm_manual_run+0x268>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2264      	movs	r2, #100	; 0x64
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 fe05 	bl	8001798 <setTimer>
					if(PEDESTRIAN_MODE){
 8000b8e:	4b6c      	ldr	r3, [pc, #432]	; (8000d40 <fsm_manual_run+0x260>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <fsm_manual_run+0xbc>
						setGreen(2);
 8000b96:	2002      	movs	r0, #2
 8000b98:	f000 fec6 	bl	8001928 <setGreen>
					}

				}

				if (LED_STATE[0] == RED_STATE){
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <fsm_manual_run+0x264>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d11e      	bne.n	8000be2 <fsm_manual_run+0x102>
					LED_STATE[0]= GREEN_STATE;
 8000ba4:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <fsm_manual_run+0x264>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	601a      	str	r2, [r3, #0]
					setTimer(0, GREEN_DURATION*100);
 8000baa:	4b67      	ldr	r3, [pc, #412]	; (8000d48 <fsm_manual_run+0x268>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2264      	movs	r2, #100	; 0x64
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fdee 	bl	8001798 <setTimer>
					LED_STATE[1]= RED_STATE;
 8000bbc:	4b61      	ldr	r3, [pc, #388]	; (8000d44 <fsm_manual_run+0x264>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
					setTimer(1, RED_DURATION*100);
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <fsm_manual_run+0x254>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2264      	movs	r2, #100	; 0x64
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fde2 	bl	8001798 <setTimer>
					if(PEDESTRIAN_MODE){
 8000bd4:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <fsm_manual_run+0x260>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <fsm_manual_run+0x102>
						setRed(2);
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f000 fee5 	bl	80019ac <setRed>
					}
				}
				ButtonInitializer(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fab2 	bl	800014c <ButtonInitializer>
			}
//			Active pedestrian
			if(isButtonPressed(3) == 1){
 8000be8:	2003      	movs	r0, #3
 8000bea:	f7ff fbe5 	bl	80003b8 <isButtonPressed>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10b      	bne.n	8000c0c <fsm_manual_run+0x12c>
				PEDESTRIAN_MODE = 1;
 8000bf4:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <fsm_manual_run+0x260>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
				setTimer(3, PEDESTRIAN_DURATION*100);
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <fsm_manual_run+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 fdc6 	bl	8001798 <setTimer>
			//	Active Buzzer
//				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, SET);
			}
			if(isTimerOn(3)){
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fe27 	bl	8001860 <isTimerOn>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 81e5 	beq.w	8000fe4 <fsm_manual_run+0x504>
				PEDESTRIAN_MODE=0;
 8000c1a:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <fsm_manual_run+0x260>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
				setTrafficLightDefault(2);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f000 fe33 	bl	800188c <setTrafficLightDefault>
//				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, RESET);
			}
			break;
 8000c26:	e1dd      	b.n	8000fe4 <fsm_manual_run+0x504>
		case MODE_2:
			Display(2, tempDuration);
 8000c28:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <fsm_manual_run+0x258>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f000 ff2c 	bl	8001a8c <Display>
			if (isButtonPressed(0) == 1){
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fbbf 	bl	80003b8 <isButtonPressed>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d109      	bne.n	8000c54 <fsm_manual_run+0x174>
				tempDuration = YELLOW_DURATION;
 8000c40:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <fsm_manual_run+0x270>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <fsm_manual_run+0x258>)
 8000c46:	6013      	str	r3, [r2, #0]
				changeMode(MODE_3);
 8000c48:	200d      	movs	r0, #13
 8000c4a:	f7ff ff31 	bl	8000ab0 <changeMode>
				ButtonInitializer(0);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fa7c 	bl	800014c <ButtonInitializer>
			}
			if (isButtonPressed(1) == 1){
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fbaf 	bl	80003b8 <isButtonPressed>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d115      	bne.n	8000c8c <fsm_manual_run+0x1ac>
				tempDuration++;
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <fsm_manual_run+0x258>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <fsm_manual_run+0x258>)
 8000c68:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <fsm_manual_run+0x258>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <fsm_manual_run+0x274>)
 8000c70:	fb83 1302 	smull	r1, r3, r3, r2
 8000c74:	1159      	asrs	r1, r3, #5
 8000c76:	17d3      	asrs	r3, r2, #31
 8000c78:	1acb      	subs	r3, r1, r3
 8000c7a:	2164      	movs	r1, #100	; 0x64
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <fsm_manual_run+0x258>)
 8000c84:	6013      	str	r3, [r2, #0]
				ButtonInitializer(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fa60 	bl	800014c <ButtonInitializer>
			}
			if(isButtonLongPressed(1)==1){
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fba7 	bl	80003e0 <isButtonLongPressed>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d11c      	bne.n	8000cd2 <fsm_manual_run+0x1f2>
				if(isTimerOn(3) ==1){
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fde1 	bl	8001860 <isTimerOn>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d116      	bne.n	8000cd2 <fsm_manual_run+0x1f2>
					tempDuration++;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <fsm_manual_run+0x258>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <fsm_manual_run+0x258>)
 8000cac:	6013      	str	r3, [r2, #0]
					tempDuration %= 100;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <fsm_manual_run+0x258>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <fsm_manual_run+0x274>)
 8000cb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cb8:	1159      	asrs	r1, r3, #5
 8000cba:	17d3      	asrs	r3, r2, #31
 8000cbc:	1acb      	subs	r3, r1, r3
 8000cbe:	2164      	movs	r1, #100	; 0x64
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <fsm_manual_run+0x258>)
 8000cc8:	6013      	str	r3, [r2, #0]
					setTimer(3,50);
 8000cca:	2132      	movs	r1, #50	; 0x32
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 fd63 	bl	8001798 <setTimer>
				}
			}
			if (isButtonPressed(2) == 1){
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fb70 	bl	80003b8 <isButtonPressed>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d107      	bne.n	8000cee <fsm_manual_run+0x20e>
				RED_DURATION = tempDuration;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <fsm_manual_run+0x258>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <fsm_manual_run+0x254>)
 8000ce4:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	4814      	ldr	r0, [pc, #80]	; (8000d3c <fsm_manual_run+0x25c>)
 8000cea:	f001 fb48 	bl	800237e <HAL_GPIO_TogglePin>
			}

			if (isTimerOn(2) == 1){
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 fdb6 	bl	8001860 <isTimerOn>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	f040 8176 	bne.w	8000fe8 <fsm_manual_run+0x508>
//				HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
//				HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <fsm_manual_run+0x278>)
 8000d02:	f001 fb3c 	bl	800237e <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <fsm_manual_run+0x278>)
 8000d0e:	f001 fb1e 	bl	800234e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 8000d12:	2101      	movs	r1, #1
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <fsm_manual_run+0x27c>)
 8000d16:	f001 fb32 	bl	800237e <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <fsm_manual_run+0x25c>)
 8000d20:	f001 fb15 	bl	800234e <HAL_GPIO_WritePin>
				setTimer(2, 10);
 8000d24:	210a      	movs	r1, #10
 8000d26:	2002      	movs	r0, #2
 8000d28:	f000 fd36 	bl	8001798 <setTimer>
			}
			break;
 8000d2c:	e15c      	b.n	8000fe8 <fsm_manual_run+0x508>
 8000d2e:	bf00      	nop
 8000d30:	20000020 	.word	0x20000020
 8000d34:	20000024 	.word	0x20000024
 8000d38:	200000cc 	.word	0x200000cc
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	200000d0 	.word	0x200000d0
 8000d44:	20000018 	.word	0x20000018
 8000d48:	2000002c 	.word	0x2000002c
 8000d4c:	2000003c 	.word	0x2000003c
 8000d50:	20000028 	.word	0x20000028
 8000d54:	51eb851f 	.word	0x51eb851f
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40010c00 	.word	0x40010c00
		case MODE_3:
			Display(3, tempDuration);
 8000d60:	4ba6      	ldr	r3, [pc, #664]	; (8000ffc <fsm_manual_run+0x51c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 fe90 	bl	8001a8c <Display>
			if (isButtonPressed(0) == 1){
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fb23 	bl	80003b8 <isButtonPressed>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d109      	bne.n	8000d8c <fsm_manual_run+0x2ac>
				tempDuration = GREEN_DURATION;
 8000d78:	4ba1      	ldr	r3, [pc, #644]	; (8001000 <fsm_manual_run+0x520>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a9f      	ldr	r2, [pc, #636]	; (8000ffc <fsm_manual_run+0x51c>)
 8000d7e:	6013      	str	r3, [r2, #0]
				changeMode(MODE_4);
 8000d80:	200e      	movs	r0, #14
 8000d82:	f7ff fe95 	bl	8000ab0 <changeMode>
				ButtonInitializer(0);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff f9e0 	bl	800014c <ButtonInitializer>
			}
			if (isButtonPressed(1) == 1){
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fb13 	bl	80003b8 <isButtonPressed>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d115      	bne.n	8000dc4 <fsm_manual_run+0x2e4>
				tempDuration++;
 8000d98:	4b98      	ldr	r3, [pc, #608]	; (8000ffc <fsm_manual_run+0x51c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a97      	ldr	r2, [pc, #604]	; (8000ffc <fsm_manual_run+0x51c>)
 8000da0:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000da2:	4b96      	ldr	r3, [pc, #600]	; (8000ffc <fsm_manual_run+0x51c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b97      	ldr	r3, [pc, #604]	; (8001004 <fsm_manual_run+0x524>)
 8000da8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dac:	1159      	asrs	r1, r3, #5
 8000dae:	17d3      	asrs	r3, r2, #31
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	2164      	movs	r1, #100	; 0x64
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a90      	ldr	r2, [pc, #576]	; (8000ffc <fsm_manual_run+0x51c>)
 8000dbc:	6013      	str	r3, [r2, #0]
				ButtonInitializer(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff f9c4 	bl	800014c <ButtonInitializer>
			}
			if(isButtonLongPressed(1)==1){
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fb0b 	bl	80003e0 <isButtonLongPressed>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d11c      	bne.n	8000e0a <fsm_manual_run+0x32a>
				if(isTimerOn(3) ==1){
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 fd45 	bl	8001860 <isTimerOn>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d116      	bne.n	8000e0a <fsm_manual_run+0x32a>
					tempDuration++;
 8000ddc:	4b87      	ldr	r3, [pc, #540]	; (8000ffc <fsm_manual_run+0x51c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	4a86      	ldr	r2, [pc, #536]	; (8000ffc <fsm_manual_run+0x51c>)
 8000de4:	6013      	str	r3, [r2, #0]
					tempDuration %= 100;
 8000de6:	4b85      	ldr	r3, [pc, #532]	; (8000ffc <fsm_manual_run+0x51c>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b86      	ldr	r3, [pc, #536]	; (8001004 <fsm_manual_run+0x524>)
 8000dec:	fb83 1302 	smull	r1, r3, r3, r2
 8000df0:	1159      	asrs	r1, r3, #5
 8000df2:	17d3      	asrs	r3, r2, #31
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	4a7f      	ldr	r2, [pc, #508]	; (8000ffc <fsm_manual_run+0x51c>)
 8000e00:	6013      	str	r3, [r2, #0]
					setTimer(3,50);
 8000e02:	2132      	movs	r1, #50	; 0x32
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fcc7 	bl	8001798 <setTimer>
				}
			}
			if (isButtonPressed(2) == 1){
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f7ff fad4 	bl	80003b8 <isButtonPressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d107      	bne.n	8000e26 <fsm_manual_run+0x346>
				YELLOW_DURATION = tempDuration;
 8000e16:	4b79      	ldr	r3, [pc, #484]	; (8000ffc <fsm_manual_run+0x51c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a7b      	ldr	r2, [pc, #492]	; (8001008 <fsm_manual_run+0x528>)
 8000e1c:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000e1e:	2120      	movs	r1, #32
 8000e20:	487a      	ldr	r0, [pc, #488]	; (800100c <fsm_manual_run+0x52c>)
 8000e22:	f001 faac 	bl	800237e <HAL_GPIO_TogglePin>
			}
			if (isTimerOn(2) == 1){
 8000e26:	2002      	movs	r0, #2
 8000e28:	f000 fd1a 	bl	8001860 <isTimerOn>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	f040 80dc 	bne.w	8000fec <fsm_manual_run+0x50c>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	4875      	ldr	r0, [pc, #468]	; (8001010 <fsm_manual_run+0x530>)
 8000e3a:	f001 faa0 	bl	800237e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4873      	ldr	r0, [pc, #460]	; (8001010 <fsm_manual_run+0x530>)
 8000e44:	f001 fa9b 	bl	800237e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4872      	ldr	r0, [pc, #456]	; (8001014 <fsm_manual_run+0x534>)
 8000e4c:	f001 fa97 	bl	800237e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 8000e50:	2110      	movs	r1, #16
 8000e52:	486e      	ldr	r0, [pc, #440]	; (800100c <fsm_manual_run+0x52c>)
 8000e54:	f001 fa93 	bl	800237e <HAL_GPIO_TogglePin>
				setTimer(2, 10);
 8000e58:	210a      	movs	r1, #10
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f000 fc9c 	bl	8001798 <setTimer>
			}
			break;
 8000e60:	e0c4      	b.n	8000fec <fsm_manual_run+0x50c>
		case MODE_4:
			Display(4, tempDuration);
 8000e62:	4b66      	ldr	r3, [pc, #408]	; (8000ffc <fsm_manual_run+0x51c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4619      	mov	r1, r3
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f000 fe0f 	bl	8001a8c <Display>
			if (isButtonPressed(0) == 1){
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff faa2 	bl	80003b8 <isButtonPressed>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d144      	bne.n	8000f04 <fsm_manual_run+0x424>
				LED_STATE [0] = INIT_STATE;
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <fsm_manual_run+0x538>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
				LED_STATE [1] = INIT_STATE;
 8000e80:	4b65      	ldr	r3, [pc, #404]	; (8001018 <fsm_manual_run+0x538>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	605a      	str	r2, [r3, #4]
				if(RED_DURATION != YELLOW_DURATION + GREEN_DURATION || !RED_DURATION || !YELLOW_DURATION || !GREEN_DURATION){
 8000e86:	4b60      	ldr	r3, [pc, #384]	; (8001008 <fsm_manual_run+0x528>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <fsm_manual_run+0x520>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	441a      	add	r2, r3
 8000e90:	4b62      	ldr	r3, [pc, #392]	; (800101c <fsm_manual_run+0x53c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d10b      	bne.n	8000eb0 <fsm_manual_run+0x3d0>
 8000e98:	4b60      	ldr	r3, [pc, #384]	; (800101c <fsm_manual_run+0x53c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <fsm_manual_run+0x3d0>
 8000ea0:	4b59      	ldr	r3, [pc, #356]	; (8001008 <fsm_manual_run+0x528>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <fsm_manual_run+0x3d0>
 8000ea8:	4b55      	ldr	r3, [pc, #340]	; (8001000 <fsm_manual_run+0x520>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10c      	bne.n	8000eca <fsm_manual_run+0x3ea>
					RED_DURATION =RED_INNIT;
 8000eb0:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <fsm_manual_run+0x540>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a59      	ldr	r2, [pc, #356]	; (800101c <fsm_manual_run+0x53c>)
 8000eb6:	6013      	str	r3, [r2, #0]
					YELLOW_DURATION= YELLOW_INNIT;
 8000eb8:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <fsm_manual_run+0x544>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a52      	ldr	r2, [pc, #328]	; (8001008 <fsm_manual_run+0x528>)
 8000ebe:	6013      	str	r3, [r2, #0]
					GREEN_DURATION = GREEN_INNIT;
 8000ec0:	4b59      	ldr	r3, [pc, #356]	; (8001028 <fsm_manual_run+0x548>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <fsm_manual_run+0x520>)
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e00b      	b.n	8000ee2 <fsm_manual_run+0x402>
				}
				else{
					RED_INNIT = RED_DURATION;
 8000eca:	4b54      	ldr	r3, [pc, #336]	; (800101c <fsm_manual_run+0x53c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a54      	ldr	r2, [pc, #336]	; (8001020 <fsm_manual_run+0x540>)
 8000ed0:	6013      	str	r3, [r2, #0]
					YELLOW_INNIT = YELLOW_DURATION;
 8000ed2:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <fsm_manual_run+0x528>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a53      	ldr	r2, [pc, #332]	; (8001024 <fsm_manual_run+0x544>)
 8000ed8:	6013      	str	r3, [r2, #0]
					GREEN_INNIT = GREEN_DURATION;
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <fsm_manual_run+0x520>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a52      	ldr	r2, [pc, #328]	; (8001028 <fsm_manual_run+0x548>)
 8000ee0:	6013      	str	r3, [r2, #0]
				}
				PEDESTRIAN_DURATION = 2 * (RED_DURATION + YELLOW_DURATION + GREEN_DURATION);
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	; (800101c <fsm_manual_run+0x53c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b48      	ldr	r3, [pc, #288]	; (8001008 <fsm_manual_run+0x528>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	441a      	add	r2, r3
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <fsm_manual_run+0x520>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <fsm_manual_run+0x54c>)
 8000ef6:	6013      	str	r3, [r2, #0]
				changeMode(MODE_1);
 8000ef8:	200b      	movs	r0, #11
 8000efa:	f7ff fdd9 	bl	8000ab0 <changeMode>
				ButtonInitializer(0);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff f924 	bl	800014c <ButtonInitializer>
			}
			if (isButtonPressed(1) == 1){
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fa57 	bl	80003b8 <isButtonPressed>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d115      	bne.n	8000f3c <fsm_manual_run+0x45c>
				tempDuration++;
 8000f10:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a39      	ldr	r2, [pc, #228]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f18:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <fsm_manual_run+0x524>)
 8000f20:	fb83 1302 	smull	r1, r3, r3, r2
 8000f24:	1159      	asrs	r1, r3, #5
 8000f26:	17d3      	asrs	r3, r2, #31
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	2164      	movs	r1, #100	; 0x64
 8000f2c:	fb01 f303 	mul.w	r3, r1, r3
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f34:	6013      	str	r3, [r2, #0]
				ButtonInitializer(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff f908 	bl	800014c <ButtonInitializer>
			}
			if(isButtonLongPressed(1)==1){
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff fa4f 	bl	80003e0 <isButtonLongPressed>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d11c      	bne.n	8000f82 <fsm_manual_run+0x4a2>
				if(isTimerOn(3) ==1){
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 fc89 	bl	8001860 <isTimerOn>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d116      	bne.n	8000f82 <fsm_manual_run+0x4a2>
					tempDuration++;
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f5c:	6013      	str	r3, [r2, #0]
					tempDuration %= 100;
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <fsm_manual_run+0x524>)
 8000f64:	fb83 1302 	smull	r1, r3, r3, r2
 8000f68:	1159      	asrs	r1, r3, #5
 8000f6a:	17d3      	asrs	r3, r2, #31
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	2164      	movs	r1, #100	; 0x64
 8000f70:	fb01 f303 	mul.w	r3, r1, r3
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f78:	6013      	str	r3, [r2, #0]
					setTimer(3,50);
 8000f7a:	2132      	movs	r1, #50	; 0x32
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 fc0b 	bl	8001798 <setTimer>
				}
			}
			if (isButtonPressed(2) == 1){
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff fa18 	bl	80003b8 <isButtonPressed>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d107      	bne.n	8000f9e <fsm_manual_run+0x4be>
				GREEN_DURATION = tempDuration;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <fsm_manual_run+0x51c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <fsm_manual_run+0x520>)
 8000f94:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000f96:	2120      	movs	r1, #32
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <fsm_manual_run+0x52c>)
 8000f9a:	f001 f9f0 	bl	800237e <HAL_GPIO_TogglePin>
			}
			if (isTimerOn(2) == 1){
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 fc5e 	bl	8001860 <isTimerOn>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d122      	bne.n	8000ff0 <fsm_manual_run+0x510>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <fsm_manual_run+0x530>)
 8000fb2:	f001 f9cc 	bl	800234e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 8000fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <fsm_manual_run+0x530>)
 8000fbc:	f001 f9df 	bl	800237e <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <fsm_manual_run+0x534>)
 8000fc6:	f001 f9c2 	bl	800234e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 8000fca:	2110      	movs	r1, #16
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <fsm_manual_run+0x52c>)
 8000fce:	f001 f9d6 	bl	800237e <HAL_GPIO_TogglePin>
				setTimer(2, 10);
 8000fd2:	210a      	movs	r1, #10
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f000 fbdf 	bl	8001798 <setTimer>
			}
			break;
 8000fda:	e009      	b.n	8000ff0 <fsm_manual_run+0x510>
		default:
			MODE=MODE_1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <fsm_manual_run+0x550>)
 8000fde:	220b      	movs	r2, #11
 8000fe0:	601a      	str	r2, [r3, #0]
			break;
 8000fe2:	e006      	b.n	8000ff2 <fsm_manual_run+0x512>
			break;
 8000fe4:	bf00      	nop
 8000fe6:	e004      	b.n	8000ff2 <fsm_manual_run+0x512>
			break;
 8000fe8:	bf00      	nop
 8000fea:	e002      	b.n	8000ff2 <fsm_manual_run+0x512>
			break;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <fsm_manual_run+0x512>
			break;
 8000ff0:	bf00      	nop
	}
	ped_run();
 8000ff2:	f000 fa20 	bl	8001436 <ped_run>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000cc 	.word	0x200000cc
 8001000:	2000002c 	.word	0x2000002c
 8001004:	51eb851f 	.word	0x51eb851f
 8001008:	20000028 	.word	0x20000028
 800100c:	40010800 	.word	0x40010800
 8001010:	40011000 	.word	0x40011000
 8001014:	40010c00 	.word	0x40010c00
 8001018:	20000018 	.word	0x20000018
 800101c:	20000024 	.word	0x20000024
 8001020:	20000030 	.word	0x20000030
 8001024:	20000034 	.word	0x20000034
 8001028:	20000038 	.word	0x20000038
 800102c:	2000003c 	.word	0x2000003c
 8001030:	20000020 	.word	0x20000020

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fdcc 	bl	8001bd4 <HAL_Init>

  /* USER CODE BEGIN Init */
timerInnit();
 800103c:	f000 fba4 	bl	8001788 <timerInnit>
buttonInnit();
 8001040:	f7ff f9b2 	bl	80003a8 <buttonInnit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f816 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f000 f946 	bl	80012d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800104c:	f000 f854 	bl	80010f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001050:	f000 f8a0 	bl	8001194 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001054:	f000 f916 	bl	8001284 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <main+0x38>)
 800105a:	f001 fe07 	bl	8002c6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <main+0x3c>)
 8001062:	f001 fead 	bl	8002dc0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  printf("Counter: %d", index++);
	  fsm_manual_run();
 8001066:	f7ff fd3b 	bl	8000ae0 <fsm_manual_run>
 800106a:	e7fc      	b.n	8001066 <main+0x32>
 800106c:	20000238 	.word	0x20000238
 8001070:	200001f0 	.word	0x200001f0

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b090      	sub	sp, #64	; 0x40
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2228      	movs	r2, #40	; 0x28
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f003 fb56 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109a:	2301      	movs	r3, #1
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109e:	2310      	movs	r3, #16
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f97b 	bl	80023b0 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010c0:	f000 f9b4 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fbe6 	bl	80028b0 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010ea:	f000 f99f 	bl	800142c <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3740      	adds	r7, #64	; 0x40
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM2_Init+0x98>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_TIM2_Init+0x98>)
 800111e:	f240 227f 	movw	r2, #639	; 0x27f
 8001122:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0x98>)
 800112c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001130:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_TIM2_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <MX_TIM2_Init+0x98>)
 8001140:	f001 fd44 	bl	8002bcc <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800114a:	f000 f96f 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM2_Init+0x98>)
 800115c:	f002 f89c 	bl	8003298 <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001166:	f000 f961 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_TIM2_Init+0x98>)
 8001178:	f002 fc1e 	bl	80039b8 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001182:	f000 f953 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000238 	.word	0x20000238

08001194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_TIM3_Init+0xe8>)
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <MX_TIM3_Init+0xec>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_TIM3_Init+0xe8>)
 80011cc:	f240 227f 	movw	r2, #639	; 0x27f
 80011d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_TIM3_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_TIM3_Init+0xe8>)
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_TIM3_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_TIM3_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <MX_TIM3_Init+0xe8>)
 80011ee:	f001 fced 	bl	8002bcc <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011f8:	f000 f918 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	4619      	mov	r1, r3
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <MX_TIM3_Init+0xe8>)
 800120a:	f002 f845 	bl	8003298 <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001214:	f000 f90a 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001218:	4818      	ldr	r0, [pc, #96]	; (800127c <MX_TIM3_Init+0xe8>)
 800121a:	f001 fd79 	bl	8002d10 <HAL_TIM_PWM_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001224:	f000 f902 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_TIM3_Init+0xe8>)
 8001238:	f002 fbbe 	bl	80039b8 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001242:	f000 f8f3 	bl	800142c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	; 0x60
 8001248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM3_Init+0xe8>)
 800125e:	f001 ff59 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001268:	f000 f8e0 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM3_Init+0xe8>)
 800126e:	f000 f963 	bl	8001538 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	; 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001f0 	.word	0x200001f0
 8001280:	40000400 	.word	0x40000400

08001284 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART3_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART3_UART_Init+0x4c>)
 80012bc:	f002 fbec 	bl	8003a98 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f8b1 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000108 	.word	0x20000108
 80012d4:	40004800 	.word	0x40004800

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <MX_GPIO_Init+0x12c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a44      	ldr	r2, [pc, #272]	; (8001404 <MX_GPIO_Init+0x12c>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <MX_GPIO_Init+0x12c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x12c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x12c>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <MX_GPIO_Init+0x12c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <MX_GPIO_Init+0x12c>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a38      	ldr	r2, [pc, #224]	; (8001404 <MX_GPIO_Init+0x12c>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <MX_GPIO_Init+0x12c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <MX_GPIO_Init+0x12c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a32      	ldr	r2, [pc, #200]	; (8001404 <MX_GPIO_Init+0x12c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x12c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRAFFIC_LIGHT_2_1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2130      	movs	r1, #48	; 0x30
 8001350:	482d      	ldr	r0, [pc, #180]	; (8001408 <MX_GPIO_Init+0x130>)
 8001352:	f000 fffc 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRAFFIC_LIGHT_2_0_Pin|WALKER_LIGHT_1_Pin|WALKER_LIGHT_0_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f240 3101 	movw	r1, #769	; 0x301
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <MX_GPIO_Init+0x134>)
 800135e:	f000 fff6 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRAFFIC_LIGHT_1_0_Pin|TRAFFIC_LIGHT_1_1_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001368:	4829      	ldr	r0, [pc, #164]	; (8001410 <MX_GPIO_Init+0x138>)
 800136a:	f000 fff0 	bl	800234e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WALKER_BUTTON_Pin */
  GPIO_InitStruct.Pin = WALKER_BUTTON_Pin;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WALKER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_GPIO_Init+0x138>)
 8001384:	f000 fe48 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_1_Pin;
 8001388:	f240 2306 	movw	r3, #518	; 0x206
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <MX_GPIO_Init+0x130>)
 800139e:	f000 fe3b 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_2_1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_2_1_Pin|LED2_Pin;
 80013a2:	2330      	movs	r3, #48	; 0x30
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <MX_GPIO_Init+0x130>)
 80013ba:	f000 fe2d 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_2_0_Pin WALKER_LIGHT_1_Pin WALKER_LIGHT_0_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_2_0_Pin|WALKER_LIGHT_1_Pin|WALKER_LIGHT_0_Pin;
 80013be:	f240 3301 	movw	r3, #769	; 0x301
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_GPIO_Init+0x134>)
 80013d8:	f000 fe1e 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_1_0_Pin TRAFFIC_LIGHT_1_1_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_1_0_Pin|TRAFFIC_LIGHT_1_1_Pin;
 80013dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <MX_GPIO_Init+0x138>)
 80013f6:	f000 fe0f 	bl	8002018 <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40011000 	.word	0x40011000

08001414 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	  timerRun();
 800141c:	f000 fa18 	bl	8001850 <timerRun>
	  getKeyInput();
 8001420:	f7ff fa3a 	bl	8000898 <getKeyInput>

}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>

08001436 <ped_run>:
 *  Created on: Dec 5, 2023
 *      Author: MY PC
 */
#include "pedestrian.h"

void ped_run(){
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
//			HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin,
//					SET);
//		}
//	}

}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
	...

08001444 <buzzer>:

void buzzer(unsigned int freq){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, freq);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <buzzer+0x1c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200001f0 	.word	0x200001f0

08001464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_MspInit+0x5c>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_MspInit+0x5c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_MspInit+0x5c>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_MspInit+0x5c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_MspInit+0x5c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_MspInit+0x5c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x60>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_MspInit+0x60>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d114      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201c      	movs	r0, #28
 80014f8:	f000 fca5 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014fc:	201c      	movs	r0, #28
 80014fe:	f000 fcbe 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001502:	e010      	b.n	8001526 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10b      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40000400 	.word	0x40000400

08001538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_TIM_MspPostInit+0x58>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d117      	bne.n	8001588 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_TIM_MspPostInit+0x5c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_TIM_MspPostInit+0x5c>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_TIM_MspPostInit+0x5c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2302      	movs	r3, #2
 800157a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_TIM_MspPostInit+0x60>)
 8001584:	f000 fd48 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40000400 	.word	0x40000400
 8001594:	40021000 	.word	0x40021000
 8001598:	40010800 	.word	0x40010800

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_UART_MspInit+0x9c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d139      	bne.n	8001630 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c6:	61d3      	str	r3, [r2, #28]
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_UART_MspInit+0xa0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <HAL_UART_MspInit+0xa4>)
 8001602:	f000 fd09 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800160a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0xa4>)
 800161c:	f000 fcfc 	bl	8002018 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2027      	movs	r0, #39	; 0x27
 8001626:	f000 fc0e 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800162a:	2027      	movs	r0, #39	; 0x27
 800162c:	f000 fc27 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004800 	.word	0x40004800
 800163c:	40021000 	.word	0x40021000
 8001640:	40010c00 	.word	0x40010c00

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f000 fae9 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM2_IRQHandler+0x10>)
 800169a:	f001 fc33 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000238 	.word	0x20000238

080016a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <USART3_IRQHandler+0x10>)
 80016ae:	f002 fac7 	bl	8003c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000108 	.word	0x20000108

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f002 fff8 	bl	80046e0 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20005000 	.word	0x20005000
 800171c:	00000400 	.word	0x00000400
 8001720:	200000d4 	.word	0x200000d4
 8001724:	200002f0 	.word	0x200002f0

08001728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <Innitial_Timer>:

//Timer 0: 1 sec for LED
//Timer 2: 500 ms
//Timer 3: button lock

void Innitial_Timer(int i){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if(i == 0){
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10b      	bne.n	800175a <Innitial_Timer+0x26>
		timer[i].count =0;
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <Innitial_Timer+0x50>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2100      	movs	r1, #0
 8001748:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[i].flag =1;
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <Innitial_Timer+0x50>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	2201      	movs	r2, #1
 8001756:	605a      	str	r2, [r3, #4]
	else{
		timer[i].count =0;
		timer[i].flag =1;
		Innitial_Timer(i-1);
	}
}
 8001758:	e00f      	b.n	800177a <Innitial_Timer+0x46>
		timer[i].count =0;
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <Innitial_Timer+0x50>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2100      	movs	r1, #0
 8001760:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[i].flag =1;
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <Innitial_Timer+0x50>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4413      	add	r3, r2
 800176c:	2201      	movs	r2, #1
 800176e:	605a      	str	r2, [r3, #4]
		Innitial_Timer(i-1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffdd 	bl	8001734 <Innitial_Timer>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000e0 	.word	0x200000e0

08001788 <timerInnit>:

void timerInnit(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	Innitial_Timer(NUMBER_OF_TIMER-1);
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffd1 	bl	8001734 <Innitial_Timer>
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <setTimer>:

void setTimer( unsigned int index, unsigned int count){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	if(index >= NUMBER_OF_TIMER){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d80b      	bhi.n	80017c0 <setTimer+0x28>
		return;
	}
	timer[index].count=count;
 80017a8:	4908      	ldr	r1, [pc, #32]	; (80017cc <setTimer+0x34>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[index].flag=0;
 80017b2:	4a06      	ldr	r2, [pc, #24]	; (80017cc <setTimer+0x34>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e000      	b.n	80017c2 <setTimer+0x2a>
		return;
 80017c0:	bf00      	nop
}
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200000e0 	.word	0x200000e0

080017d0 <RunTimer>:
void RunTimer(int index){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if(index ==0){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <RunTimer+0x3c>
		if(timer[index].count ==0){
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <RunTimer+0x7c>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <RunTimer+0x28>
			timer[index].flag=1;
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <RunTimer+0x7c>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
		} else {
			timer[index].count--;
		}
		RunTimer(index-1);
	}
}
 80017f6:	e024      	b.n	8001842 <RunTimer+0x72>
			timer[index].count--;
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <RunTimer+0x7c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	4912      	ldr	r1, [pc, #72]	; (800184c <RunTimer+0x7c>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 800180a:	e01a      	b.n	8001842 <RunTimer+0x72>
		if (timer[index].count == 0) {
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <RunTimer+0x7c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <RunTimer+0x56>
			timer[index].flag = 1;
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <RunTimer+0x7c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	2201      	movs	r2, #1
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	e008      	b.n	8001838 <RunTimer+0x68>
			timer[index].count--;
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <RunTimer+0x7c>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <RunTimer+0x7c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		RunTimer(index-1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ffc7 	bl	80017d0 <RunTimer>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000e0 	.word	0x200000e0

08001850 <timerRun>:

void timerRun(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	RunTimer(NUMBER_OF_TIMER-1);
 8001854:	2004      	movs	r0, #4
 8001856:	f7ff ffbb 	bl	80017d0 <RunTimer>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <isTimerOn>:

int isTimerOn(unsigned index){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	return timer[index].flag == 1;
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <isTimerOn+0x28>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	bf0c      	ite	eq
 8001876:	2301      	moveq	r3, #1
 8001878:	2300      	movne	r3, #0
 800187a:	b2db      	uxtb	r3, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200000e0 	.word	0x200000e0

0800188c <setTrafficLightDefault>:


// Red mean light 0 off, light 1 off
// Green mean light 0 off, light 1 on
// Amber mean light 0 on, light 1 on
void setTrafficLightDefault(int lane){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	switch(lane){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d02d      	beq.n	80018f6 <setTrafficLightDefault+0x6a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	dc37      	bgt.n	8001910 <setTrafficLightDefault+0x84>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <setTrafficLightDefault+0x22>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d019      	beq.n	80018e0 <setTrafficLightDefault+0x54>
	case 2:
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		break;
	default:
		break;
 80018ac:	e030      	b.n	8001910 <setTrafficLightDefault+0x84>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <setTrafficLightDefault+0x90>)
 80018b6:	f000 fd4a 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <setTrafficLightDefault+0x90>)
 80018c2:	f000 fd44 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <setTrafficLightDefault+0x94>)
 80018ce:	f000 fd3e 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <setTrafficLightDefault+0x94>)
 80018da:	f000 fd38 	bl	800234e <HAL_GPIO_WritePin>
		break;
 80018de:	e018      	b.n	8001912 <setTrafficLightDefault+0x86>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2101      	movs	r1, #1
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <setTrafficLightDefault+0x94>)
 80018e6:	f000 fd32 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2110      	movs	r1, #16
 80018ee:	480d      	ldr	r0, [pc, #52]	; (8001924 <setTrafficLightDefault+0x98>)
 80018f0:	f000 fd2d 	bl	800234e <HAL_GPIO_WritePin>
		break;
 80018f4:	e00d      	b.n	8001912 <setTrafficLightDefault+0x86>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <setTrafficLightDefault+0x94>)
 80018fe:	f000 fd26 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <setTrafficLightDefault+0x94>)
 800190a:	f000 fd20 	bl	800234e <HAL_GPIO_WritePin>
		break;
 800190e:	e000      	b.n	8001912 <setTrafficLightDefault+0x86>
		break;
 8001910:	bf00      	nop
	}

}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40011000 	.word	0x40011000
 8001920:	40010c00 	.word	0x40010c00
 8001924:	40010800 	.word	0x40010800

08001928 <setGreen>:

void setGreen(int lane){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d021      	beq.n	800197a <setGreen+0x52>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b02      	cmp	r3, #2
 800193a:	dc2b      	bgt.n	8001994 <setGreen+0x6c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <setGreen+0x22>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d00d      	beq.n	8001964 <setGreen+0x3c>
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
//				RESET);
		break;
 8001948:	e024      	b.n	8001994 <setGreen+0x6c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <setGreen+0x78>)
 8001952:	f000 fcfc 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800195c:	4810      	ldr	r0, [pc, #64]	; (80019a0 <setGreen+0x78>)
 800195e:	f000 fcf6 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001962:	e018      	b.n	8001996 <setGreen+0x6e>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	480e      	ldr	r0, [pc, #56]	; (80019a4 <setGreen+0x7c>)
 800196a:	f000 fcf0 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 800196e:	2201      	movs	r2, #1
 8001970:	2110      	movs	r1, #16
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <setGreen+0x80>)
 8001974:	f000 fceb 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001978:	e00d      	b.n	8001996 <setGreen+0x6e>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <setGreen+0x7c>)
 8001982:	f000 fce4 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <setGreen+0x7c>)
 800198e:	f000 fcde 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001992:	e000      	b.n	8001996 <setGreen+0x6e>
		break;
 8001994:	bf00      	nop

	}
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40010800 	.word	0x40010800

080019ac <setRed>:

void setRed(int lane){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	switch (lane) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d021      	beq.n	80019fe <setRed+0x52>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	dc2b      	bgt.n	8001a18 <setRed+0x6c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <setRed+0x22>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00d      	beq.n	80019e8 <setRed+0x3c>
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
//				RESET);
		break;
 80019cc:	e024      	b.n	8001a18 <setRed+0x6c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <setRed+0x78>)
 80019d6:	f000 fcba 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e0:	4810      	ldr	r0, [pc, #64]	; (8001a24 <setRed+0x78>)
 80019e2:	f000 fcb4 	bl	800234e <HAL_GPIO_WritePin>
		break;
 80019e6:	e018      	b.n	8001a1a <setRed+0x6e>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 80019e8:	2201      	movs	r2, #1
 80019ea:	2101      	movs	r1, #1
 80019ec:	480e      	ldr	r0, [pc, #56]	; (8001a28 <setRed+0x7c>)
 80019ee:	f000 fcae 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 80019f2:	2200      	movs	r2, #0
 80019f4:	2110      	movs	r1, #16
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <setRed+0x80>)
 80019f8:	f000 fca9 	bl	800234e <HAL_GPIO_WritePin>
		break;
 80019fc:	e00d      	b.n	8001a1a <setRed+0x6e>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <setRed+0x7c>)
 8001a06:	f000 fca2 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <setRed+0x7c>)
 8001a12:	f000 fc9c 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001a16:	e000      	b.n	8001a1a <setRed+0x6e>
		break;
 8001a18:	bf00      	nop

	}
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40010800 	.word	0x40010800

08001a30 <setAmber>:

void setAmber(int lane){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <setAmber+0x16>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d00d      	beq.n	8001a60 <setAmber+0x30>
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
//				RESET);
		break;
 8001a44:	e017      	b.n	8001a76 <setAmber+0x46>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <setAmber+0x50>)
 8001a4e:	f000 fc7e 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a58:	4809      	ldr	r0, [pc, #36]	; (8001a80 <setAmber+0x50>)
 8001a5a:	f000 fc78 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001a5e:	e00a      	b.n	8001a76 <setAmber+0x46>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001a60:	2201      	movs	r2, #1
 8001a62:	2101      	movs	r1, #1
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <setAmber+0x54>)
 8001a66:	f000 fc72 	bl	800234e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	4806      	ldr	r0, [pc, #24]	; (8001a88 <setAmber+0x58>)
 8001a70:	f000 fc6d 	bl	800234e <HAL_GPIO_WritePin>
		break;
 8001a74:	bf00      	nop

	}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40010800 	.word	0x40010800

08001a8c <Display>:
 *  Created on: Dec 8, 2023
 *      Author: MY PC
 */
#include "transfer.h"

void Display(int n1, int n2){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]


	int i=0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
	if( n1 < 10) i+=1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	dc02      	bgt.n	8001aa6 <Display+0x1a>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
	if( n2 < 10) i+=2;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	dc02      	bgt.n	8001ab2 <Display+0x26>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d847      	bhi.n	8001b48 <Display+0xbc>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <Display+0x34>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001ad1 	.word	0x08001ad1
 8001ac4:	08001aef 	.word	0x08001aef
 8001ac8:	08001b0d 	.word	0x08001b0d
 8001acc:	08001b2b 	.word	0x08001b2b
	switch(i){
	case 0:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:%d %d# \r", n1, n2), 1000);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4926      	ldr	r1, [pc, #152]	; (8001b70 <Display+0xe4>)
 8001ad6:	4827      	ldr	r0, [pc, #156]	; (8001b74 <Display+0xe8>)
 8001ad8:	f002 fe34 	bl	8004744 <siprintf>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae4:	4923      	ldr	r1, [pc, #140]	; (8001b74 <Display+0xe8>)
 8001ae6:	4824      	ldr	r0, [pc, #144]	; (8001b78 <Display+0xec>)
 8001ae8:	f002 f826 	bl	8003b38 <HAL_UART_Transmit>
		break;
 8001aec:	e03b      	b.n	8001b66 <Display+0xda>
	case 1:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:0%d %d# \r", n1, n2), 1000);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4922      	ldr	r1, [pc, #136]	; (8001b7c <Display+0xf0>)
 8001af4:	481f      	ldr	r0, [pc, #124]	; (8001b74 <Display+0xe8>)
 8001af6:	f002 fe25 	bl	8004744 <siprintf>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	491c      	ldr	r1, [pc, #112]	; (8001b74 <Display+0xe8>)
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <Display+0xec>)
 8001b06:	f002 f817 	bl	8003b38 <HAL_UART_Transmit>
		break;
 8001b0a:	e02c      	b.n	8001b66 <Display+0xda>
	case 2:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:%d 0%d# \r", n1, n2), 1000);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	491b      	ldr	r1, [pc, #108]	; (8001b80 <Display+0xf4>)
 8001b12:	4818      	ldr	r0, [pc, #96]	; (8001b74 <Display+0xe8>)
 8001b14:	f002 fe16 	bl	8004744 <siprintf>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	4914      	ldr	r1, [pc, #80]	; (8001b74 <Display+0xe8>)
 8001b22:	4815      	ldr	r0, [pc, #84]	; (8001b78 <Display+0xec>)
 8001b24:	f002 f808 	bl	8003b38 <HAL_UART_Transmit>
		break;
 8001b28:	e01d      	b.n	8001b66 <Display+0xda>
	case 3:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:0%d 0%d# \r", n1, n2), 1000);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4915      	ldr	r1, [pc, #84]	; (8001b84 <Display+0xf8>)
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <Display+0xe8>)
 8001b32:	f002 fe07 	bl	8004744 <siprintf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	490d      	ldr	r1, [pc, #52]	; (8001b74 <Display+0xe8>)
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <Display+0xec>)
 8001b42:	f001 fff9 	bl	8003b38 <HAL_UART_Transmit>
		break;
 8001b46:	e00e      	b.n	8001b66 <Display+0xda>
	default:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:%d %d# \r", n1, n2), 1000);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4908      	ldr	r1, [pc, #32]	; (8001b70 <Display+0xe4>)
 8001b4e:	4809      	ldr	r0, [pc, #36]	; (8001b74 <Display+0xe8>)
 8001b50:	f002 fdf8 	bl	8004744 <siprintf>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5c:	4905      	ldr	r1, [pc, #20]	; (8001b74 <Display+0xe8>)
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <Display+0xec>)
 8001b60:	f001 ffea 	bl	8003b38 <HAL_UART_Transmit>
		break;
 8001b64:	bf00      	nop
//		HAL_UART_Transmit(&huart3, ( void *) info1, sprintf(info1, "!7SEG:0%d#", n), 1000);
//	}
//	else{
//		HAL_UART_Transmit(&huart3, ( void *) info1, sprintf(info1, "!7SEG:%d#", n), 1000);
//	}
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08004fd0 	.word	0x08004fd0
 8001b74:	200002c8 	.word	0x200002c8
 8001b78:	20000108 	.word	0x20000108
 8001b7c:	08004fe0 	.word	0x08004fe0
 8001b80:	08004ff0 	.word	0x08004ff0
 8001b84:	08005000 	.word	0x08005000

08001b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff fdce 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b8e:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ba4:	4c09      	ldr	r4, [pc, #36]	; (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f002 fd9b 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb6:	f7ff fa3d 	bl	8001034 <main>
  bx lr
 8001bba:	4770      	bx	lr
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001bc4:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8001bc8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001bcc:	200002ec 	.word	0x200002ec

08001bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_2_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_Init+0x28>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_Init+0x28>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f923 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fc38 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f93b 	bl	8001e9a <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f903 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000040 	.word	0x20000040
 8001c58:	20000048 	.word	0x20000048
 8001c5c:	20000044 	.word	0x20000044

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_IncTick+0x1c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x20>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <HAL_IncTick+0x20>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000048 	.word	0x20000048
 8001c80:	200002d8 	.word	0x200002d8

08001c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_GetTick+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	200002d8 	.word	0x200002d8

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4906      	ldr	r1, [pc, #24]	; (8001d30 <__NVIC_EnableIRQ+0x34>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff90 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff2d 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff42 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff35 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa2 	bl	8001dec <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d008      	beq.n	8001edc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e020      	b.n	8001f1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020e 	bic.w	r2, r2, #14
 8001eea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d005      	beq.n	8001f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e051      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 020e 	bic.w	r2, r2, #14
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_DMA_Abort_IT+0xd4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d029      	beq.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_DMA_Abort_IT+0xd8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x9e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_DMA_Abort_IT+0xdc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x98>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_DMA_Abort_IT+0xe0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_Abort_IT+0x92>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_DMA_Abort_IT+0xe4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x8c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_DMA_Abort_IT+0xe8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d102      	bne.n	8001fae <HAL_DMA_Abort_IT+0x86>
 8001fa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fac:	e00e      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb2:	e00b      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb8:	e008      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbe:	e005      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc4:	e002      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_DMA_Abort_IT+0xec>)
 8001fce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
    } 
  }
  return status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40020008 	.word	0x40020008
 8002000:	4002001c 	.word	0x4002001c
 8002004:	40020030 	.word	0x40020030
 8002008:	40020044 	.word	0x40020044
 800200c:	40020058 	.word	0x40020058
 8002010:	4002006c 	.word	0x4002006c
 8002014:	40020000 	.word	0x40020000

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b08b      	sub	sp, #44	; 0x2c
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202a:	e169      	b.n	8002300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800202c:	2201      	movs	r2, #1
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	f040 8158 	bne.w	80022fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a9a      	ldr	r2, [pc, #616]	; (80022b8 <HAL_GPIO_Init+0x2a0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d05e      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002054:	4a98      	ldr	r2, [pc, #608]	; (80022b8 <HAL_GPIO_Init+0x2a0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d875      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 800205a:	4a98      	ldr	r2, [pc, #608]	; (80022bc <HAL_GPIO_Init+0x2a4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d058      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002060:	4a96      	ldr	r2, [pc, #600]	; (80022bc <HAL_GPIO_Init+0x2a4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d86f      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 8002066:	4a96      	ldr	r2, [pc, #600]	; (80022c0 <HAL_GPIO_Init+0x2a8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d052      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 800206c:	4a94      	ldr	r2, [pc, #592]	; (80022c0 <HAL_GPIO_Init+0x2a8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d869      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 8002072:	4a94      	ldr	r2, [pc, #592]	; (80022c4 <HAL_GPIO_Init+0x2ac>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d04c      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002078:	4a92      	ldr	r2, [pc, #584]	; (80022c4 <HAL_GPIO_Init+0x2ac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d863      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 800207e:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <HAL_GPIO_Init+0x2b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d046      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002084:	4a90      	ldr	r2, [pc, #576]	; (80022c8 <HAL_GPIO_Init+0x2b0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d85d      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 800208a:	2b12      	cmp	r3, #18
 800208c:	d82a      	bhi.n	80020e4 <HAL_GPIO_Init+0xcc>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d859      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 8002092:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <HAL_GPIO_Init+0x80>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	08002113 	.word	0x08002113
 800209c:	080020ed 	.word	0x080020ed
 80020a0:	080020ff 	.word	0x080020ff
 80020a4:	08002141 	.word	0x08002141
 80020a8:	08002147 	.word	0x08002147
 80020ac:	08002147 	.word	0x08002147
 80020b0:	08002147 	.word	0x08002147
 80020b4:	08002147 	.word	0x08002147
 80020b8:	08002147 	.word	0x08002147
 80020bc:	08002147 	.word	0x08002147
 80020c0:	08002147 	.word	0x08002147
 80020c4:	08002147 	.word	0x08002147
 80020c8:	08002147 	.word	0x08002147
 80020cc:	08002147 	.word	0x08002147
 80020d0:	08002147 	.word	0x08002147
 80020d4:	08002147 	.word	0x08002147
 80020d8:	08002147 	.word	0x08002147
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	08002109 	.word	0x08002109
 80020e4:	4a79      	ldr	r2, [pc, #484]	; (80022cc <HAL_GPIO_Init+0x2b4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ea:	e02c      	b.n	8002146 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	623b      	str	r3, [r7, #32]
          break;
 80020f2:	e029      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	3304      	adds	r3, #4
 80020fa:	623b      	str	r3, [r7, #32]
          break;
 80020fc:	e024      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	3308      	adds	r3, #8
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e01f      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	330c      	adds	r3, #12
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e01a      	b.n	8002148 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211a:	2304      	movs	r3, #4
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e013      	b.n	8002148 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002128:	2308      	movs	r3, #8
 800212a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	611a      	str	r2, [r3, #16]
          break;
 8002132:	e009      	b.n	8002148 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002134:	2308      	movs	r3, #8
 8002136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	615a      	str	r2, [r3, #20]
          break;
 800213e:	e003      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x130>
          break;
 8002146:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2bff      	cmp	r3, #255	; 0xff
 800214c:	d801      	bhi.n	8002152 <HAL_GPIO_Init+0x13a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	e001      	b.n	8002156 <HAL_GPIO_Init+0x13e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d802      	bhi.n	8002164 <HAL_GPIO_Init+0x14c>
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x152>
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3b08      	subs	r3, #8
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	210f      	movs	r1, #15
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	401a      	ands	r2, r3
 800217c:	6a39      	ldr	r1, [r7, #32]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80b1 	beq.w	80022fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002198:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <HAL_GPIO_Init+0x2b8>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <HAL_GPIO_Init+0x2b8>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_GPIO_Init+0x2b8>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b0:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <HAL_GPIO_Init+0x2bc>)
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <HAL_GPIO_Init+0x2c0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1ec>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3f      	ldr	r2, [pc, #252]	; (80022dc <HAL_GPIO_Init+0x2c4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1e8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <HAL_GPIO_Init+0x2c8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1e0>
 80021f4:	2303      	movs	r3, #3
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021f8:	2304      	movs	r3, #4
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 8002204:	2300      	movs	r3, #0
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002216:	492f      	ldr	r1, [pc, #188]	; (80022d4 <HAL_GPIO_Init+0x2bc>)
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	492c      	ldr	r1, [pc, #176]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	4928      	ldr	r1, [pc, #160]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002248:	4013      	ands	r3, r2
 800224a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4922      	ldr	r1, [pc, #136]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	491e      	ldr	r1, [pc, #120]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002270:	4013      	ands	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4918      	ldr	r1, [pc, #96]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4914      	ldr	r1, [pc, #80]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d021      	beq.n	80022ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	490e      	ldr	r1, [pc, #56]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e021      	b.n	80022fa <HAL_GPIO_Init+0x2e2>
 80022b6:	bf00      	nop
 80022b8:	10320000 	.word	0x10320000
 80022bc:	10310000 	.word	0x10310000
 80022c0:	10220000 	.word	0x10220000
 80022c4:	10210000 	.word	0x10210000
 80022c8:	10120000 	.word	0x10120000
 80022cc:	10110000 	.word	0x10110000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40010800 	.word	0x40010800
 80022dc:	40010c00 	.word	0x40010c00
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40011400 	.word	0x40011400
 80022e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_GPIO_Init+0x304>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <HAL_GPIO_Init+0x304>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f ae8e 	bne.w	800202c <HAL_GPIO_Init+0x14>
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	372c      	adds	r7, #44	; 0x2c
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]
 800235a:	4613      	mov	r3, r2
 800235c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235e:	787b      	ldrb	r3, [r7, #1]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002364:	887a      	ldrh	r2, [r7, #2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800236a:	e003      	b.n	8002374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43d9      	mvns	r1, r3
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e26c      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8087 	beq.w	80024de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d0:	4b92      	ldr	r3, [pc, #584]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d00c      	beq.n	80023f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023dc:	4b8f      	ldr	r3, [pc, #572]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d112      	bne.n	800240e <HAL_RCC_OscConfig+0x5e>
 80023e8:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d10b      	bne.n	800240e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f6:	4b89      	ldr	r3, [pc, #548]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d06c      	beq.n	80024dc <HAL_RCC_OscConfig+0x12c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d168      	bne.n	80024dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e246      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x76>
 8002418:	4b80      	ldr	r3, [pc, #512]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a7f      	ldr	r2, [pc, #508]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e02e      	b.n	8002484 <HAL_RCC_OscConfig+0xd4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x98>
 800242e:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7a      	ldr	r2, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b78      	ldr	r3, [pc, #480]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a77      	ldr	r2, [pc, #476]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xd4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0xbc>
 8002452:	4b72      	ldr	r3, [pc, #456]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a71      	ldr	r2, [pc, #452]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6e      	ldr	r2, [pc, #440]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xd4>
 800246c:	4b6b      	ldr	r3, [pc, #428]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6a      	ldr	r2, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a67      	ldr	r2, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fbfa 	bl	8001c84 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff fbf6 	bl	8001c84 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1fa      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xe4>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fbe6 	bl	8001c84 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fbe2 	bl	8001c84 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1e6      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x10c>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ea:	4b4c      	ldr	r3, [pc, #304]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f6:	4b49      	ldr	r3, [pc, #292]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x18c>
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x176>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1ba      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4939      	ldr	r1, [pc, #228]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x270>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fb9b 	bl	8001c84 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff fb97 	bl	8001c84 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e19b      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4927      	ldr	r1, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x270>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff fb7a 	bl	8001c84 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff fb76 	bl	8001c84 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e17a      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03a      	beq.n	8002634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d019      	beq.n	80025fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_RCC_OscConfig+0x274>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7ff fb5a 	bl	8001c84 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d4:	f7ff fb56 	bl	8001c84 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e15a      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 facc 	bl	8002b90 <RCC_Delay>
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7ff fb40 	bl	8001c84 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002606:	e00f      	b.n	8002628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fb3c 	bl	8001c84 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d908      	bls.n	8002628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e140      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	42420000 	.word	0x42420000
 8002624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	4b9e      	ldr	r3, [pc, #632]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e9      	bne.n	8002608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a6 	beq.w	800278e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b97      	ldr	r3, [pc, #604]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b94      	ldr	r3, [pc, #592]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a93      	ldr	r2, [pc, #588]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]
 800265e:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b8e      	ldr	r3, [pc, #568]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a8a      	ldr	r2, [pc, #552]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7ff fafd 	bl	8001c84 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7ff faf9 	bl	8001c84 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0fd      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x312>
 80026b4:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	e02d      	b.n	800271e <HAL_RCC_OscConfig+0x36e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x334>
 80026ca:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a75      	ldr	r2, [pc, #468]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a72      	ldr	r2, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	e01c      	b.n	800271e <HAL_RCC_OscConfig+0x36e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x356>
 80026ec:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a6c      	ldr	r2, [pc, #432]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a69      	ldr	r2, [pc, #420]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e00b      	b.n	800271e <HAL_RCC_OscConfig+0x36e>
 8002706:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d015      	beq.n	8002752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff faad 	bl	8001c84 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7ff faa9 	bl	8001c84 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0ab      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	4b57      	ldr	r3, [pc, #348]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ee      	beq.n	800272e <HAL_RCC_OscConfig+0x37e>
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff fa97 	bl	8001c84 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7ff fa93 	bl	8001c84 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e095      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ee      	bne.n	800275a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a47      	ldr	r2, [pc, #284]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8081 	beq.w	800289a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d061      	beq.n	8002868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d146      	bne.n	800283a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_OscConfig+0x4fc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff fa67 	bl	8001c84 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff fa63 	bl	8001c84 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e067      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027e2:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	492d      	ldr	r1, [pc, #180]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a19      	ldr	r1, [r3, #32]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	430b      	orrs	r3, r1
 8002806:	4927      	ldr	r1, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x4fc>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fa37 	bl	8001c84 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff fa33 	bl	8001c84 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e037      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x46a>
 8002838:	e02f      	b.n	800289a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_RCC_OscConfig+0x4fc>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff fa20 	bl	8001c84 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7ff fa1c 	bl	8001c84 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e020      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x498>
 8002866:	e018      	b.n	800289a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e013      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	42420060 	.word	0x42420060

080028b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d0      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4965      	ldr	r1, [pc, #404]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800292e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d040      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d115      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e073      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4936      	ldr	r1, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7ff f970 	bl	8001c84 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7ff f96c 	bl	8001c84 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e053      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d210      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4922      	ldr	r1, [pc, #136]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f821 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1cc>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f8ce 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08005014 	.word	0x08005014
 8002a7c:	20000040 	.word	0x20000040
 8002a80:	20000044 	.word	0x20000044

08002a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x36>
 8002ab2:	e027      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab6:	613b      	str	r3, [r7, #16]
      break;
 8002ab8:	e027      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0c9b      	lsrs	r3, r3, #18
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0c5b      	lsrs	r3, r3, #17
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	fb02 f203 	mul.w	r2, r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e004      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	007a1200 	.word	0x007a1200
 8002b20:	0800502c 	.word	0x0800502c
 8002b24:	0800503c 	.word	0x0800503c
 8002b28:	003d0900 	.word	0x003d0900

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	20000040 	.word	0x20000040

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff2 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08005024 	.word	0x08005024

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08005024 	.word	0x08005024

08002b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <RCC_Delay+0x34>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <RCC_Delay+0x38>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	0a5b      	lsrs	r3, r3, #9
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bac:	bf00      	nop
  }
  while (Delay --);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1e5a      	subs	r2, r3, #1
 8002bb2:	60fa      	str	r2, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <RCC_Delay+0x1c>
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20000040 	.word	0x20000040
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fc68 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 fc30 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e03a      	b.n	8002cfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_TIM_Base_Start_IT+0x98>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_TIM_Base_Start_IT+0x58>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIM_Base_Start_IT+0x58>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_TIM_Base_Start_IT+0x58>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_TIM_Base_Start_IT+0xa0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d010      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce6:	e007      	b.n	8002cf8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40000800 	.word	0x40000800

08002d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f839 	bl	8002dae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fb8e 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_TIM_PWM_Start+0x24>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e022      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d109      	bne.n	8002dfe <HAL_TIM_PWM_Start+0x3e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e015      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x58>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e05e      	b.n	8002ef0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x82>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	e013      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x92>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	e00b      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e60:	e003      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fd7c 	bl	8003970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <HAL_TIM_PWM_Start+0x138>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d107      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_TIM_PWM_Start+0x138>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_TIM_PWM_Start+0xfa>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_PWM_Start+0xfa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_TIM_PWM_Start+0x13c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_PWM_Start+0xfa>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_TIM_PWM_Start+0x140>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d111      	bne.n	8002ede <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d010      	beq.n	8002eee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	e007      	b.n	8002eee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800

08002f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa76 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa69 	bl	8003426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fa78 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0204 	mvn.w	r2, #4
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa4c 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa3f 	bl	8003426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fa4e 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0208 	mvn.w	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa22 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa15 	bl	8003426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa24 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2208      	movs	r2, #8
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f9f8 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f9eb 	bl	8003426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f9fa 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0201 	mvn.w	r2, #1
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe f9c6 	bl	8001414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fce9 	bl	8003a86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9be 	bl	800345c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0220 	mvn.w	r2, #32
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fcb4 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800312e:	2302      	movs	r3, #2
 8003130:	e0ae      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	f200 809f 	bhi.w	8003280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003281 	.word	0x08003281
 8003150:	08003281 	.word	0x08003281
 8003154:	08003281 	.word	0x08003281
 8003158:	080031bd 	.word	0x080031bd
 800315c:	08003281 	.word	0x08003281
 8003160:	08003281 	.word	0x08003281
 8003164:	08003281 	.word	0x08003281
 8003168:	080031ff 	.word	0x080031ff
 800316c:	08003281 	.word	0x08003281
 8003170:	08003281 	.word	0x08003281
 8003174:	08003281 	.word	0x08003281
 8003178:	0800323f 	.word	0x0800323f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f9d6 	bl	8003534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6999      	ldr	r1, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
      break;
 80031ba:	e064      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fa1c 	bl	8003600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
      break;
 80031fc:	e043      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fa65 	bl	80036d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0204 	bic.w	r2, r2, #4
 8003228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
      break;
 800323c:	e023      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 faaf 	bl	80037a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]
      break;
 800327e:	e002      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
      break;
 8003284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800328e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0b4      	b.n	800341e <HAL_TIM_ConfigClockSource+0x186>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d03e      	beq.n	800336c <HAL_TIM_ConfigClockSource+0xd4>
 80032ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f2:	f200 8087 	bhi.w	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 80032f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fa:	f000 8086 	beq.w	800340a <HAL_TIM_ConfigClockSource+0x172>
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d87f      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b70      	cmp	r3, #112	; 0x70
 8003306:	d01a      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xa6>
 8003308:	2b70      	cmp	r3, #112	; 0x70
 800330a:	d87b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b60      	cmp	r3, #96	; 0x60
 800330e:	d050      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003310:	2b60      	cmp	r3, #96	; 0x60
 8003312:	d877      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b50      	cmp	r3, #80	; 0x50
 8003316:	d03c      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0xfa>
 8003318:	2b50      	cmp	r3, #80	; 0x50
 800331a:	d873      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d058      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d86f      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	d064      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d86b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d060      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003330:	2b20      	cmp	r3, #32
 8003332:	d867      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05c      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	2b10      	cmp	r3, #16
 800333a:	d05a      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 800333c:	e062      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f000 faf0 	bl	8003932 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	609a      	str	r2, [r3, #8]
      break;
 800336a:	e04f      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6899      	ldr	r1, [r3, #8]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f000 fad9 	bl	8003932 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338e:	609a      	str	r2, [r3, #8]
      break;
 8003390:	e03c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 fa50 	bl	8003844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2150      	movs	r1, #80	; 0x50
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 faa7 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80033b0:	e02c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 fa6e 	bl	80038a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2160      	movs	r1, #96	; 0x60
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fa97 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80033d0:	e01c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	461a      	mov	r2, r3
 80033e0:	f000 fa30 	bl	8003844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2140      	movs	r1, #64	; 0x40
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fa87 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80033f0:	e00c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fa7e 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 8003402:	e003      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e000      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800340a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a29      	ldr	r2, [pc, #164]	; (8003528 <TIM_Base_SetConfig+0xb8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x30>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x30>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <TIM_Base_SetConfig+0xbc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x30>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a25      	ldr	r2, [pc, #148]	; (8003530 <TIM_Base_SetConfig+0xc0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <TIM_Base_SetConfig+0xb8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_Base_SetConfig+0x62>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d007      	beq.n	80034d2 <TIM_Base_SetConfig+0x62>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <TIM_Base_SetConfig+0xbc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_Base_SetConfig+0x62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a18      	ldr	r2, [pc, #96]	; (8003530 <TIM_Base_SetConfig+0xc0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d108      	bne.n	80034e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <TIM_Base_SetConfig+0xb8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	615a      	str	r2, [r3, #20]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800

08003534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f023 0201 	bic.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <TIM_OC1_SetConfig+0xc8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10c      	bne.n	80035aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0308 	bic.w	r3, r3, #8
 8003596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <TIM_OC1_SetConfig+0xc8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d111      	bne.n	80035d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40012c00 	.word	0x40012c00

08003600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f023 0210 	bic.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0320 	bic.w	r3, r3, #32
 800364a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <TIM_OC2_SetConfig+0xd0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10d      	bne.n	800367c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <TIM_OC2_SetConfig+0xd0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d113      	bne.n	80036ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	40012c00 	.word	0x40012c00

080036d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800371c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <TIM_OC3_SetConfig+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10d      	bne.n	800374e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC3_SetConfig+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d113      	bne.n	800377e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40012c00 	.word	0x40012c00

080037a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <TIM_OC4_SetConfig+0x98>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d109      	bne.n	800381c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800380e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	019b      	lsls	r3, r3, #6
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00

08003844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 030a 	bic.w	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0210 	bic.w	r2, r3, #16
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	031b      	lsls	r3, r3, #12
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	f043 0307 	orr.w	r3, r3, #7
 8003920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003932:	b480      	push	{r7}
 8003934:	b087      	sub	sp, #28
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	021a      	lsls	r2, r3, #8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	431a      	orrs	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2201      	movs	r2, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e046      	b.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10c      	bne.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e042      	b.n	8003b30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fd6c 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fd71 	bl	80045c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d16d      	bne.n	8003c34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_Transmit+0x2c>
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e066      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	; 0x21
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b76:	f7fe f885 	bl	8001c84 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b90:	d108      	bne.n	8003ba4 <HAL_UART_Transmit+0x6c>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e003      	b.n	8003bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bac:	e02a      	b.n	8003c04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 faf9 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e036      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e007      	b.n	8003bf6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cf      	bne.n	8003bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	; 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fac9 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0ba      	sub	sp, #232	; 0xe8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x66>
 8003c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fbd1 	bl	8004446 <UART_Receive_IT>
      return;
 8003ca4:	e25b      	b.n	800415e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80de 	beq.w	8003e6c <HAL_UART_IRQHandler+0x22c>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80d1 	beq.w	8003e6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_UART_IRQHandler+0xae>
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_UART_IRQHandler+0xd2>
 8003cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_UART_IRQHandler+0xf6>
 8003d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <HAL_UART_IRQHandler+0x126>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f043 0208 	orr.w	r2, r3, #8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 81f2 	beq.w	8004154 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_UART_IRQHandler+0x14e>
 8003d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fb5c 	bl	8004446 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_UART_IRQHandler+0x17a>
 8003db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04f      	beq.n	8003e5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa66 	bl	800428c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d041      	beq.n	8003e52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1d9      	bne.n	8003dce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d013      	beq.n	8003e4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	4a7e      	ldr	r2, [pc, #504]	; (8004020 <HAL_UART_IRQHandler+0x3e0>)
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f87a 	bl	8001f28 <HAL_DMA_Abort_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e44:	4610      	mov	r0, r2
 8003e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	e00e      	b.n	8003e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f99c 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e50:	e00a      	b.n	8003e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f998 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e006      	b.n	8003e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f994 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e66:	e175      	b.n	8004154 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	bf00      	nop
    return;
 8003e6a:	e173      	b.n	8004154 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	f040 814f 	bne.w	8004114 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8148 	beq.w	8004114 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8141 	beq.w	8004114 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80b6 	beq.w	8004024 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8145 	beq.w	8004158 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	f080 813e 	bcs.w	8004158 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	f000 8088 	beq.w	8004000 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f1c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1d9      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f60:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e1      	bne.n	8003f3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3314      	adds	r3, #20
 8003f98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e3      	bne.n	8003f78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fe4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e3      	bne.n	8003fbe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd ff59 	bl	8001eb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400e:	b29b      	uxth	r3, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8bf 	bl	800419a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800401c:	e09c      	b.n	8004158 <HAL_UART_IRQHandler+0x518>
 800401e:	bf00      	nop
 8004020:	08004351 	.word	0x08004351
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800402c:	b29b      	uxth	r3, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 808e 	beq.w	800415c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8089 	beq.w	800415c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800406e:	647a      	str	r2, [r7, #68]	; 0x44
 8004070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e3      	bne.n	800404a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	623b      	str	r3, [r7, #32]
   return(result);
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040a6:	633a      	str	r2, [r7, #48]	; 0x30
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e3      	bne.n	8004082 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040ec:	61fa      	str	r2, [r7, #28]
 80040ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	69b9      	ldr	r1, [r7, #24]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	617b      	str	r3, [r7, #20]
   return(result);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e3      	bne.n	80040c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f844 	bl	800419a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004112:	e023      	b.n	800415c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_UART_IRQHandler+0x4f4>
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f923 	bl	8004378 <UART_Transmit_IT>
    return;
 8004132:	e014      	b.n	800415e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00e      	beq.n	800415e <HAL_UART_IRQHandler+0x51e>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f962 	bl	8004416 <UART_EndTransmit_IT>
    return;
 8004152:	e004      	b.n	800415e <HAL_UART_IRQHandler+0x51e>
    return;
 8004154:	bf00      	nop
 8004156:	e002      	b.n	800415e <HAL_UART_IRQHandler+0x51e>
      return;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_UART_IRQHandler+0x51e>
      return;
 800415c:	bf00      	nop
  }
}
 800415e:	37e8      	adds	r7, #232	; 0xe8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b090      	sub	sp, #64	; 0x40
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	e050      	b.n	8004264 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d04c      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d0:	f7fd fd58 	bl	8001c84 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041dc:	429a      	cmp	r2, r3
 80041de:	d241      	bcs.n	8004264 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004200:	637a      	str	r2, [r7, #52]	; 0x34
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	613b      	str	r3, [r7, #16]
   return(result);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	63bb      	str	r3, [r7, #56]	; 0x38
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004234:	623a      	str	r2, [r7, #32]
 8004236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	69f9      	ldr	r1, [r7, #28]
 800423a:	6a3a      	ldr	r2, [r7, #32]
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	61bb      	str	r3, [r7, #24]
   return(result);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e5      	bne.n	8004214 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e00f      	b.n	8004284 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	429a      	cmp	r2, r3
 8004280:	d09f      	beq.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3740      	adds	r7, #64	; 0x40
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b095      	sub	sp, #84	; 0x54
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042b4:	643a      	str	r2, [r7, #64]	; 0x40
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3314      	adds	r3, #20
 80042ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	60bb      	str	r3, [r7, #8]
   return(result);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f023 0310 	bic.w	r3, r3, #16
 800431a:	647b      	str	r3, [r7, #68]	; 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004324:	61ba      	str	r2, [r7, #24]
 8004326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	613b      	str	r3, [r7, #16]
   return(result);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004346:	bf00      	nop
 8004348:	3754      	adds	r7, #84	; 0x54
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff0c 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d13e      	bne.n	800440a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d114      	bne.n	80043c0 <UART_Transmit_IT+0x48>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d110      	bne.n	80043c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]
 80043be:	e008      	b.n	80043d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	1c59      	adds	r1, r3, #1
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6211      	str	r1, [r2, #32]
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4619      	mov	r1, r3
 80043e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004404:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fe94 	bl	8004164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08c      	sub	sp, #48	; 0x30
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b22      	cmp	r3, #34	; 0x22
 8004458:	f040 80ae 	bne.w	80045b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d117      	bne.n	8004496 <UART_Receive_IT+0x50>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	b29a      	uxth	r2, r3
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
 8004494:	e026      	b.n	80044e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a8:	d007      	beq.n	80044ba <UART_Receive_IT+0x74>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <UART_Receive_IT+0x82>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e008      	b.n	80044da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d15d      	bne.n	80045b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0220 	bic.w	r2, r2, #32
 8004506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	2b01      	cmp	r3, #1
 800453c:	d135      	bne.n	80045aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	613b      	str	r3, [r7, #16]
   return(result);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	623a      	str	r2, [r7, #32]
 8004566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	69f9      	ldr	r1, [r7, #28]
 800456a:	6a3a      	ldr	r2, [r7, #32]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	61bb      	str	r3, [r7, #24]
   return(result);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b10      	cmp	r3, #16
 8004584:	d10a      	bne.n	800459c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fdf9 	bl	800419a <HAL_UARTEx_RxEventCallback>
 80045a8:	e002      	b.n	80045b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff fde3 	bl	8004176 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e002      	b.n	80045ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3730      	adds	r7, #48	; 0x30
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045fe:	f023 030c 	bic.w	r3, r3, #12
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	430b      	orrs	r3, r1
 800460a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <UART_SetConfig+0x114>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d103      	bne.n	8004634 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe fa9c 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	e002      	b.n	800463a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe fa84 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8004638:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <UART_SetConfig+0x118>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	0119      	lsls	r1, r3, #4
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009a      	lsls	r2, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <UART_SetConfig+0x118>)
 8004672:	fba3 0302 	umull	r0, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2064      	movs	r0, #100	; 0x64
 800467a:	fb00 f303 	mul.w	r3, r0, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	3332      	adds	r3, #50	; 0x32
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <UART_SetConfig+0x118>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004690:	4419      	add	r1, r3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <UART_SetConfig+0x118>)
 80046aa:	fba3 0302 	umull	r0, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2064      	movs	r0, #100	; 0x64
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	3332      	adds	r3, #50	; 0x32
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <UART_SetConfig+0x118>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	440a      	add	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40013800 	.word	0x40013800
 80046dc:	51eb851f 	.word	0x51eb851f

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000004c 	.word	0x2000004c

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	2600      	movs	r6, #0
 80046f0:	4d0c      	ldr	r5, [pc, #48]	; (8004724 <__libc_init_array+0x38>)
 80046f2:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	f000 fc5c 	bl	8004fb8 <_init>
 8004700:	2600      	movs	r6, #0
 8004702:	4d0a      	ldr	r5, [pc, #40]	; (800472c <__libc_init_array+0x40>)
 8004704:	4c0a      	ldr	r4, [pc, #40]	; (8004730 <__libc_init_array+0x44>)
 8004706:	1b64      	subs	r4, r4, r5
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08005074 	.word	0x08005074
 8004728:	08005074 	.word	0x08005074
 800472c:	08005074 	.word	0x08005074
 8004730:	08005078 	.word	0x08005078

08004734 <memset>:
 8004734:	4603      	mov	r3, r0
 8004736:	4402      	add	r2, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <siprintf>:
 8004744:	b40e      	push	{r1, r2, r3}
 8004746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800474a:	b500      	push	{lr}
 800474c:	b09c      	sub	sp, #112	; 0x70
 800474e:	ab1d      	add	r3, sp, #116	; 0x74
 8004750:	9002      	str	r0, [sp, #8]
 8004752:	9006      	str	r0, [sp, #24]
 8004754:	9107      	str	r1, [sp, #28]
 8004756:	9104      	str	r1, [sp, #16]
 8004758:	4808      	ldr	r0, [pc, #32]	; (800477c <siprintf+0x38>)
 800475a:	4909      	ldr	r1, [pc, #36]	; (8004780 <siprintf+0x3c>)
 800475c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004760:	9105      	str	r1, [sp, #20]
 8004762:	6800      	ldr	r0, [r0, #0]
 8004764:	a902      	add	r1, sp, #8
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	f000 f868 	bl	800483c <_svfiprintf_r>
 800476c:	2200      	movs	r2, #0
 800476e:	9b02      	ldr	r3, [sp, #8]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	b01c      	add	sp, #112	; 0x70
 8004774:	f85d eb04 	ldr.w	lr, [sp], #4
 8004778:	b003      	add	sp, #12
 800477a:	4770      	bx	lr
 800477c:	2000004c 	.word	0x2000004c
 8004780:	ffff0208 	.word	0xffff0208

08004784 <__ssputs_r>:
 8004784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	688e      	ldr	r6, [r1, #8]
 800478a:	4682      	mov	sl, r0
 800478c:	429e      	cmp	r6, r3
 800478e:	460c      	mov	r4, r1
 8004790:	4690      	mov	r8, r2
 8004792:	461f      	mov	r7, r3
 8004794:	d838      	bhi.n	8004808 <__ssputs_r+0x84>
 8004796:	898a      	ldrh	r2, [r1, #12]
 8004798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800479c:	d032      	beq.n	8004804 <__ssputs_r+0x80>
 800479e:	6825      	ldr	r5, [r4, #0]
 80047a0:	6909      	ldr	r1, [r1, #16]
 80047a2:	3301      	adds	r3, #1
 80047a4:	eba5 0901 	sub.w	r9, r5, r1
 80047a8:	6965      	ldr	r5, [r4, #20]
 80047aa:	444b      	add	r3, r9
 80047ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047b4:	106d      	asrs	r5, r5, #1
 80047b6:	429d      	cmp	r5, r3
 80047b8:	bf38      	it	cc
 80047ba:	461d      	movcc	r5, r3
 80047bc:	0553      	lsls	r3, r2, #21
 80047be:	d531      	bpl.n	8004824 <__ssputs_r+0xa0>
 80047c0:	4629      	mov	r1, r5
 80047c2:	f000 fb53 	bl	8004e6c <_malloc_r>
 80047c6:	4606      	mov	r6, r0
 80047c8:	b950      	cbnz	r0, 80047e0 <__ssputs_r+0x5c>
 80047ca:	230c      	movs	r3, #12
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	f8ca 3000 	str.w	r3, [sl]
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	464a      	mov	r2, r9
 80047e2:	6921      	ldr	r1, [r4, #16]
 80047e4:	f000 face 	bl	8004d84 <memcpy>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	6126      	str	r6, [r4, #16]
 80047f6:	444e      	add	r6, r9
 80047f8:	6026      	str	r6, [r4, #0]
 80047fa:	463e      	mov	r6, r7
 80047fc:	6165      	str	r5, [r4, #20]
 80047fe:	eba5 0509 	sub.w	r5, r5, r9
 8004802:	60a5      	str	r5, [r4, #8]
 8004804:	42be      	cmp	r6, r7
 8004806:	d900      	bls.n	800480a <__ssputs_r+0x86>
 8004808:	463e      	mov	r6, r7
 800480a:	4632      	mov	r2, r6
 800480c:	4641      	mov	r1, r8
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	f000 fac6 	bl	8004da0 <memmove>
 8004814:	68a3      	ldr	r3, [r4, #8]
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	1b9b      	subs	r3, r3, r6
 800481a:	4432      	add	r2, r6
 800481c:	2000      	movs	r0, #0
 800481e:	60a3      	str	r3, [r4, #8]
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	e7db      	b.n	80047dc <__ssputs_r+0x58>
 8004824:	462a      	mov	r2, r5
 8004826:	f000 fb7b 	bl	8004f20 <_realloc_r>
 800482a:	4606      	mov	r6, r0
 800482c:	2800      	cmp	r0, #0
 800482e:	d1e1      	bne.n	80047f4 <__ssputs_r+0x70>
 8004830:	4650      	mov	r0, sl
 8004832:	6921      	ldr	r1, [r4, #16]
 8004834:	f000 face 	bl	8004dd4 <_free_r>
 8004838:	e7c7      	b.n	80047ca <__ssputs_r+0x46>
	...

0800483c <_svfiprintf_r>:
 800483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004840:	4698      	mov	r8, r3
 8004842:	898b      	ldrh	r3, [r1, #12]
 8004844:	4607      	mov	r7, r0
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	460d      	mov	r5, r1
 800484a:	4614      	mov	r4, r2
 800484c:	b09d      	sub	sp, #116	; 0x74
 800484e:	d50e      	bpl.n	800486e <_svfiprintf_r+0x32>
 8004850:	690b      	ldr	r3, [r1, #16]
 8004852:	b963      	cbnz	r3, 800486e <_svfiprintf_r+0x32>
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	f000 fb09 	bl	8004e6c <_malloc_r>
 800485a:	6028      	str	r0, [r5, #0]
 800485c:	6128      	str	r0, [r5, #16]
 800485e:	b920      	cbnz	r0, 800486a <_svfiprintf_r+0x2e>
 8004860:	230c      	movs	r3, #12
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e0d1      	b.n	8004a0e <_svfiprintf_r+0x1d2>
 800486a:	2340      	movs	r3, #64	; 0x40
 800486c:	616b      	str	r3, [r5, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	2320      	movs	r3, #32
 8004874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004878:	2330      	movs	r3, #48	; 0x30
 800487a:	f04f 0901 	mov.w	r9, #1
 800487e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004882:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a28 <_svfiprintf_r+0x1ec>
 8004886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800488a:	4623      	mov	r3, r4
 800488c:	469a      	mov	sl, r3
 800488e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004892:	b10a      	cbz	r2, 8004898 <_svfiprintf_r+0x5c>
 8004894:	2a25      	cmp	r2, #37	; 0x25
 8004896:	d1f9      	bne.n	800488c <_svfiprintf_r+0x50>
 8004898:	ebba 0b04 	subs.w	fp, sl, r4
 800489c:	d00b      	beq.n	80048b6 <_svfiprintf_r+0x7a>
 800489e:	465b      	mov	r3, fp
 80048a0:	4622      	mov	r2, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ff6d 	bl	8004784 <__ssputs_r>
 80048aa:	3001      	adds	r0, #1
 80048ac:	f000 80aa 	beq.w	8004a04 <_svfiprintf_r+0x1c8>
 80048b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b2:	445a      	add	r2, fp
 80048b4:	9209      	str	r2, [sp, #36]	; 0x24
 80048b6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80a2 	beq.w	8004a04 <_svfiprintf_r+0x1c8>
 80048c0:	2300      	movs	r3, #0
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ca:	f10a 0a01 	add.w	sl, sl, #1
 80048ce:	9304      	str	r3, [sp, #16]
 80048d0:	9307      	str	r3, [sp, #28]
 80048d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d6:	931a      	str	r3, [sp, #104]	; 0x68
 80048d8:	4654      	mov	r4, sl
 80048da:	2205      	movs	r2, #5
 80048dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e0:	4851      	ldr	r0, [pc, #324]	; (8004a28 <_svfiprintf_r+0x1ec>)
 80048e2:	f000 fa41 	bl	8004d68 <memchr>
 80048e6:	9a04      	ldr	r2, [sp, #16]
 80048e8:	b9d8      	cbnz	r0, 8004922 <_svfiprintf_r+0xe6>
 80048ea:	06d0      	lsls	r0, r2, #27
 80048ec:	bf44      	itt	mi
 80048ee:	2320      	movmi	r3, #32
 80048f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f4:	0711      	lsls	r1, r2, #28
 80048f6:	bf44      	itt	mi
 80048f8:	232b      	movmi	r3, #43	; 0x2b
 80048fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004902:	2b2a      	cmp	r3, #42	; 0x2a
 8004904:	d015      	beq.n	8004932 <_svfiprintf_r+0xf6>
 8004906:	4654      	mov	r4, sl
 8004908:	2000      	movs	r0, #0
 800490a:	f04f 0c0a 	mov.w	ip, #10
 800490e:	9a07      	ldr	r2, [sp, #28]
 8004910:	4621      	mov	r1, r4
 8004912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004916:	3b30      	subs	r3, #48	; 0x30
 8004918:	2b09      	cmp	r3, #9
 800491a:	d94e      	bls.n	80049ba <_svfiprintf_r+0x17e>
 800491c:	b1b0      	cbz	r0, 800494c <_svfiprintf_r+0x110>
 800491e:	9207      	str	r2, [sp, #28]
 8004920:	e014      	b.n	800494c <_svfiprintf_r+0x110>
 8004922:	eba0 0308 	sub.w	r3, r0, r8
 8004926:	fa09 f303 	lsl.w	r3, r9, r3
 800492a:	4313      	orrs	r3, r2
 800492c:	46a2      	mov	sl, r4
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	e7d2      	b.n	80048d8 <_svfiprintf_r+0x9c>
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	1d19      	adds	r1, r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	9103      	str	r1, [sp, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	bfbb      	ittet	lt
 800493e:	425b      	neglt	r3, r3
 8004940:	f042 0202 	orrlt.w	r2, r2, #2
 8004944:	9307      	strge	r3, [sp, #28]
 8004946:	9307      	strlt	r3, [sp, #28]
 8004948:	bfb8      	it	lt
 800494a:	9204      	strlt	r2, [sp, #16]
 800494c:	7823      	ldrb	r3, [r4, #0]
 800494e:	2b2e      	cmp	r3, #46	; 0x2e
 8004950:	d10c      	bne.n	800496c <_svfiprintf_r+0x130>
 8004952:	7863      	ldrb	r3, [r4, #1]
 8004954:	2b2a      	cmp	r3, #42	; 0x2a
 8004956:	d135      	bne.n	80049c4 <_svfiprintf_r+0x188>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	3402      	adds	r4, #2
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	9203      	str	r2, [sp, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfb8      	it	lt
 8004966:	f04f 33ff 	movlt.w	r3, #4294967295
 800496a:	9305      	str	r3, [sp, #20]
 800496c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a38 <_svfiprintf_r+0x1fc>
 8004970:	2203      	movs	r2, #3
 8004972:	4650      	mov	r0, sl
 8004974:	7821      	ldrb	r1, [r4, #0]
 8004976:	f000 f9f7 	bl	8004d68 <memchr>
 800497a:	b140      	cbz	r0, 800498e <_svfiprintf_r+0x152>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	eba0 000a 	sub.w	r0, r0, sl
 8004982:	fa03 f000 	lsl.w	r0, r3, r0
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	3401      	adds	r4, #1
 800498a:	4303      	orrs	r3, r0
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004992:	2206      	movs	r2, #6
 8004994:	4825      	ldr	r0, [pc, #148]	; (8004a2c <_svfiprintf_r+0x1f0>)
 8004996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800499a:	f000 f9e5 	bl	8004d68 <memchr>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d038      	beq.n	8004a14 <_svfiprintf_r+0x1d8>
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <_svfiprintf_r+0x1f4>)
 80049a4:	bb1b      	cbnz	r3, 80049ee <_svfiprintf_r+0x1b2>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	3307      	adds	r3, #7
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	3308      	adds	r3, #8
 80049b0:	9303      	str	r3, [sp, #12]
 80049b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b4:	4433      	add	r3, r6
 80049b6:	9309      	str	r3, [sp, #36]	; 0x24
 80049b8:	e767      	b.n	800488a <_svfiprintf_r+0x4e>
 80049ba:	460c      	mov	r4, r1
 80049bc:	2001      	movs	r0, #1
 80049be:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c2:	e7a5      	b.n	8004910 <_svfiprintf_r+0xd4>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f04f 0c0a 	mov.w	ip, #10
 80049ca:	4619      	mov	r1, r3
 80049cc:	3401      	adds	r4, #1
 80049ce:	9305      	str	r3, [sp, #20]
 80049d0:	4620      	mov	r0, r4
 80049d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d6:	3a30      	subs	r2, #48	; 0x30
 80049d8:	2a09      	cmp	r2, #9
 80049da:	d903      	bls.n	80049e4 <_svfiprintf_r+0x1a8>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0c5      	beq.n	800496c <_svfiprintf_r+0x130>
 80049e0:	9105      	str	r1, [sp, #20]
 80049e2:	e7c3      	b.n	800496c <_svfiprintf_r+0x130>
 80049e4:	4604      	mov	r4, r0
 80049e6:	2301      	movs	r3, #1
 80049e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ec:	e7f0      	b.n	80049d0 <_svfiprintf_r+0x194>
 80049ee:	ab03      	add	r3, sp, #12
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	462a      	mov	r2, r5
 80049f4:	4638      	mov	r0, r7
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <_svfiprintf_r+0x1f8>)
 80049f8:	a904      	add	r1, sp, #16
 80049fa:	f3af 8000 	nop.w
 80049fe:	1c42      	adds	r2, r0, #1
 8004a00:	4606      	mov	r6, r0
 8004a02:	d1d6      	bne.n	80049b2 <_svfiprintf_r+0x176>
 8004a04:	89ab      	ldrh	r3, [r5, #12]
 8004a06:	065b      	lsls	r3, r3, #25
 8004a08:	f53f af2c 	bmi.w	8004864 <_svfiprintf_r+0x28>
 8004a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a0e:	b01d      	add	sp, #116	; 0x74
 8004a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a14:	ab03      	add	r3, sp, #12
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	462a      	mov	r2, r5
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <_svfiprintf_r+0x1f8>)
 8004a1e:	a904      	add	r1, sp, #16
 8004a20:	f000 f87c 	bl	8004b1c <_printf_i>
 8004a24:	e7eb      	b.n	80049fe <_svfiprintf_r+0x1c2>
 8004a26:	bf00      	nop
 8004a28:	0800503e 	.word	0x0800503e
 8004a2c:	08005048 	.word	0x08005048
 8004a30:	00000000 	.word	0x00000000
 8004a34:	08004785 	.word	0x08004785
 8004a38:	08005044 	.word	0x08005044

08004a3c <_printf_common>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	4616      	mov	r6, r2
 8004a42:	4699      	mov	r9, r3
 8004a44:	688a      	ldr	r2, [r1, #8]
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	4607      	mov	r7, r0
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	bfb8      	it	lt
 8004a4e:	4613      	movlt	r3, r2
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a56:	460c      	mov	r4, r1
 8004a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a5c:	b10a      	cbz	r2, 8004a62 <_printf_common+0x26>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	0699      	lsls	r1, r3, #26
 8004a66:	bf42      	ittt	mi
 8004a68:	6833      	ldrmi	r3, [r6, #0]
 8004a6a:	3302      	addmi	r3, #2
 8004a6c:	6033      	strmi	r3, [r6, #0]
 8004a6e:	6825      	ldr	r5, [r4, #0]
 8004a70:	f015 0506 	ands.w	r5, r5, #6
 8004a74:	d106      	bne.n	8004a84 <_printf_common+0x48>
 8004a76:	f104 0a19 	add.w	sl, r4, #25
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	6832      	ldr	r2, [r6, #0]
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dc28      	bgt.n	8004ad6 <_printf_common+0x9a>
 8004a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a88:	1e13      	subs	r3, r2, #0
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	bf18      	it	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	0692      	lsls	r2, r2, #26
 8004a92:	d42d      	bmi.n	8004af0 <_printf_common+0xb4>
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d020      	beq.n	8004ae4 <_printf_common+0xa8>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	68e5      	ldr	r5, [r4, #12]
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf18      	it	ne
 8004aae:	2500      	movne	r5, #0
 8004ab0:	6832      	ldr	r2, [r6, #0]
 8004ab2:	f04f 0600 	mov.w	r6, #0
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	bf08      	it	eq
 8004aba:	1aad      	subeq	r5, r5, r2
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	bf08      	it	eq
 8004ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	bfc4      	itt	gt
 8004ac8:	1a9b      	subgt	r3, r3, r2
 8004aca:	18ed      	addgt	r5, r5, r3
 8004acc:	341a      	adds	r4, #26
 8004ace:	42b5      	cmp	r5, r6
 8004ad0:	d11a      	bne.n	8004b08 <_printf_common+0xcc>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e008      	b.n	8004ae8 <_printf_common+0xac>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4649      	mov	r1, r9
 8004adc:	4638      	mov	r0, r7
 8004ade:	47c0      	blx	r8
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d103      	bne.n	8004aec <_printf_common+0xb0>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	3501      	adds	r5, #1
 8004aee:	e7c4      	b.n	8004a7a <_printf_common+0x3e>
 8004af0:	2030      	movs	r0, #48	; 0x30
 8004af2:	18e1      	adds	r1, r4, r3
 8004af4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004afe:	4422      	add	r2, r4
 8004b00:	3302      	adds	r3, #2
 8004b02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b06:	e7c5      	b.n	8004a94 <_printf_common+0x58>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0e6      	beq.n	8004ae4 <_printf_common+0xa8>
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7d9      	b.n	8004ace <_printf_common+0x92>
	...

08004b1c <_printf_i>:
 8004b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	460c      	mov	r4, r1
 8004b22:	7e27      	ldrb	r7, [r4, #24]
 8004b24:	4691      	mov	r9, r2
 8004b26:	2f78      	cmp	r7, #120	; 0x78
 8004b28:	4680      	mov	r8, r0
 8004b2a:	469a      	mov	sl, r3
 8004b2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b32:	d807      	bhi.n	8004b44 <_printf_i+0x28>
 8004b34:	2f62      	cmp	r7, #98	; 0x62
 8004b36:	d80a      	bhi.n	8004b4e <_printf_i+0x32>
 8004b38:	2f00      	cmp	r7, #0
 8004b3a:	f000 80d9 	beq.w	8004cf0 <_printf_i+0x1d4>
 8004b3e:	2f58      	cmp	r7, #88	; 0x58
 8004b40:	f000 80a4 	beq.w	8004c8c <_printf_i+0x170>
 8004b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b4c:	e03a      	b.n	8004bc4 <_printf_i+0xa8>
 8004b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b52:	2b15      	cmp	r3, #21
 8004b54:	d8f6      	bhi.n	8004b44 <_printf_i+0x28>
 8004b56:	a001      	add	r0, pc, #4	; (adr r0, 8004b5c <_printf_i+0x40>)
 8004b58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004b45 	.word	0x08004b45
 8004b68:	08004b45 	.word	0x08004b45
 8004b6c:	08004b45 	.word	0x08004b45
 8004b70:	08004b45 	.word	0x08004b45
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004b45 	.word	0x08004b45
 8004b7c:	08004b45 	.word	0x08004b45
 8004b80:	08004b45 	.word	0x08004b45
 8004b84:	08004b45 	.word	0x08004b45
 8004b88:	08004cd7 	.word	0x08004cd7
 8004b8c:	08004bf9 	.word	0x08004bf9
 8004b90:	08004cb9 	.word	0x08004cb9
 8004b94:	08004b45 	.word	0x08004b45
 8004b98:	08004b45 	.word	0x08004b45
 8004b9c:	08004cf9 	.word	0x08004cf9
 8004ba0:	08004b45 	.word	0x08004b45
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b45 	.word	0x08004b45
 8004bac:	08004b45 	.word	0x08004b45
 8004bb0:	08004cc1 	.word	0x08004cc1
 8004bb4:	680b      	ldr	r3, [r1, #0]
 8004bb6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bba:	1d1a      	adds	r2, r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	600a      	str	r2, [r1, #0]
 8004bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0a4      	b.n	8004d12 <_printf_i+0x1f6>
 8004bc8:	6825      	ldr	r5, [r4, #0]
 8004bca:	6808      	ldr	r0, [r1, #0]
 8004bcc:	062e      	lsls	r6, r5, #24
 8004bce:	f100 0304 	add.w	r3, r0, #4
 8004bd2:	d50a      	bpl.n	8004bea <_printf_i+0xce>
 8004bd4:	6805      	ldr	r5, [r0, #0]
 8004bd6:	600b      	str	r3, [r1, #0]
 8004bd8:	2d00      	cmp	r5, #0
 8004bda:	da03      	bge.n	8004be4 <_printf_i+0xc8>
 8004bdc:	232d      	movs	r3, #45	; 0x2d
 8004bde:	426d      	negs	r5, r5
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be4:	230a      	movs	r3, #10
 8004be6:	485e      	ldr	r0, [pc, #376]	; (8004d60 <_printf_i+0x244>)
 8004be8:	e019      	b.n	8004c1e <_printf_i+0x102>
 8004bea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bee:	6805      	ldr	r5, [r0, #0]
 8004bf0:	600b      	str	r3, [r1, #0]
 8004bf2:	bf18      	it	ne
 8004bf4:	b22d      	sxthne	r5, r5
 8004bf6:	e7ef      	b.n	8004bd8 <_printf_i+0xbc>
 8004bf8:	680b      	ldr	r3, [r1, #0]
 8004bfa:	6825      	ldr	r5, [r4, #0]
 8004bfc:	1d18      	adds	r0, r3, #4
 8004bfe:	6008      	str	r0, [r1, #0]
 8004c00:	0628      	lsls	r0, r5, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xec>
 8004c04:	681d      	ldr	r5, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <_printf_i+0xf2>
 8004c08:	0669      	lsls	r1, r5, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xe8>
 8004c0c:	881d      	ldrh	r5, [r3, #0]
 8004c0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c10:	bf0c      	ite	eq
 8004c12:	2308      	moveq	r3, #8
 8004c14:	230a      	movne	r3, #10
 8004c16:	4852      	ldr	r0, [pc, #328]	; (8004d60 <_printf_i+0x244>)
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1e:	6866      	ldr	r6, [r4, #4]
 8004c20:	2e00      	cmp	r6, #0
 8004c22:	bfa8      	it	ge
 8004c24:	6821      	ldrge	r1, [r4, #0]
 8004c26:	60a6      	str	r6, [r4, #8]
 8004c28:	bfa4      	itt	ge
 8004c2a:	f021 0104 	bicge.w	r1, r1, #4
 8004c2e:	6021      	strge	r1, [r4, #0]
 8004c30:	b90d      	cbnz	r5, 8004c36 <_printf_i+0x11a>
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	d04d      	beq.n	8004cd2 <_printf_i+0x1b6>
 8004c36:	4616      	mov	r6, r2
 8004c38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004c40:	5dc7      	ldrb	r7, [r0, r7]
 8004c42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c46:	462f      	mov	r7, r5
 8004c48:	42bb      	cmp	r3, r7
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	d9f4      	bls.n	8004c38 <_printf_i+0x11c>
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d10b      	bne.n	8004c6a <_printf_i+0x14e>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	07df      	lsls	r7, r3, #31
 8004c56:	d508      	bpl.n	8004c6a <_printf_i+0x14e>
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	6861      	ldr	r1, [r4, #4]
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	bfde      	ittt	le
 8004c60:	2330      	movle	r3, #48	; 0x30
 8004c62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c6a:	1b92      	subs	r2, r2, r6
 8004c6c:	6122      	str	r2, [r4, #16]
 8004c6e:	464b      	mov	r3, r9
 8004c70:	4621      	mov	r1, r4
 8004c72:	4640      	mov	r0, r8
 8004c74:	f8cd a000 	str.w	sl, [sp]
 8004c78:	aa03      	add	r2, sp, #12
 8004c7a:	f7ff fedf 	bl	8004a3c <_printf_common>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d14c      	bne.n	8004d1c <_printf_i+0x200>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	b004      	add	sp, #16
 8004c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8c:	4834      	ldr	r0, [pc, #208]	; (8004d60 <_printf_i+0x244>)
 8004c8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c92:	680e      	ldr	r6, [r1, #0]
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c9a:	061f      	lsls	r7, r3, #24
 8004c9c:	600e      	str	r6, [r1, #0]
 8004c9e:	d514      	bpl.n	8004cca <_printf_i+0x1ae>
 8004ca0:	07d9      	lsls	r1, r3, #31
 8004ca2:	bf44      	itt	mi
 8004ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca8:	6023      	strmi	r3, [r4, #0]
 8004caa:	b91d      	cbnz	r5, 8004cb4 <_printf_i+0x198>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	f023 0320 	bic.w	r3, r3, #32
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	e7af      	b.n	8004c18 <_printf_i+0xfc>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	f043 0320 	orr.w	r3, r3, #32
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	2378      	movs	r3, #120	; 0x78
 8004cc2:	4828      	ldr	r0, [pc, #160]	; (8004d64 <_printf_i+0x248>)
 8004cc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cc8:	e7e3      	b.n	8004c92 <_printf_i+0x176>
 8004cca:	065e      	lsls	r6, r3, #25
 8004ccc:	bf48      	it	mi
 8004cce:	b2ad      	uxthmi	r5, r5
 8004cd0:	e7e6      	b.n	8004ca0 <_printf_i+0x184>
 8004cd2:	4616      	mov	r6, r2
 8004cd4:	e7bb      	b.n	8004c4e <_printf_i+0x132>
 8004cd6:	680b      	ldr	r3, [r1, #0]
 8004cd8:	6826      	ldr	r6, [r4, #0]
 8004cda:	1d1d      	adds	r5, r3, #4
 8004cdc:	6960      	ldr	r0, [r4, #20]
 8004cde:	600d      	str	r5, [r1, #0]
 8004ce0:	0635      	lsls	r5, r6, #24
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	d501      	bpl.n	8004cea <_printf_i+0x1ce>
 8004ce6:	6018      	str	r0, [r3, #0]
 8004ce8:	e002      	b.n	8004cf0 <_printf_i+0x1d4>
 8004cea:	0671      	lsls	r1, r6, #25
 8004cec:	d5fb      	bpl.n	8004ce6 <_printf_i+0x1ca>
 8004cee:	8018      	strh	r0, [r3, #0]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4616      	mov	r6, r2
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	e7ba      	b.n	8004c6e <_printf_i+0x152>
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	600a      	str	r2, [r1, #0]
 8004cfe:	681e      	ldr	r6, [r3, #0]
 8004d00:	2100      	movs	r1, #0
 8004d02:	4630      	mov	r0, r6
 8004d04:	6862      	ldr	r2, [r4, #4]
 8004d06:	f000 f82f 	bl	8004d68 <memchr>
 8004d0a:	b108      	cbz	r0, 8004d10 <_printf_i+0x1f4>
 8004d0c:	1b80      	subs	r0, r0, r6
 8004d0e:	6060      	str	r0, [r4, #4]
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	6123      	str	r3, [r4, #16]
 8004d14:	2300      	movs	r3, #0
 8004d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1a:	e7a8      	b.n	8004c6e <_printf_i+0x152>
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	47d0      	blx	sl
 8004d26:	3001      	adds	r0, #1
 8004d28:	d0ab      	beq.n	8004c82 <_printf_i+0x166>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	079b      	lsls	r3, r3, #30
 8004d2e:	d413      	bmi.n	8004d58 <_printf_i+0x23c>
 8004d30:	68e0      	ldr	r0, [r4, #12]
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	4298      	cmp	r0, r3
 8004d36:	bfb8      	it	lt
 8004d38:	4618      	movlt	r0, r3
 8004d3a:	e7a4      	b.n	8004c86 <_printf_i+0x16a>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4632      	mov	r2, r6
 8004d40:	4649      	mov	r1, r9
 8004d42:	4640      	mov	r0, r8
 8004d44:	47d0      	blx	sl
 8004d46:	3001      	adds	r0, #1
 8004d48:	d09b      	beq.n	8004c82 <_printf_i+0x166>
 8004d4a:	3501      	adds	r5, #1
 8004d4c:	68e3      	ldr	r3, [r4, #12]
 8004d4e:	9903      	ldr	r1, [sp, #12]
 8004d50:	1a5b      	subs	r3, r3, r1
 8004d52:	42ab      	cmp	r3, r5
 8004d54:	dcf2      	bgt.n	8004d3c <_printf_i+0x220>
 8004d56:	e7eb      	b.n	8004d30 <_printf_i+0x214>
 8004d58:	2500      	movs	r5, #0
 8004d5a:	f104 0619 	add.w	r6, r4, #25
 8004d5e:	e7f5      	b.n	8004d4c <_printf_i+0x230>
 8004d60:	0800504f 	.word	0x0800504f
 8004d64:	08005060 	.word	0x08005060

08004d68 <memchr>:
 8004d68:	4603      	mov	r3, r0
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	b2c9      	uxtb	r1, r1
 8004d6e:	4402      	add	r2, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	d101      	bne.n	8004d7a <memchr+0x12>
 8004d76:	2000      	movs	r0, #0
 8004d78:	e003      	b.n	8004d82 <memchr+0x1a>
 8004d7a:	7804      	ldrb	r4, [r0, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	428c      	cmp	r4, r1
 8004d80:	d1f6      	bne.n	8004d70 <memchr+0x8>
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <memcpy>:
 8004d84:	440a      	add	r2, r1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xc>
 8004d8e:	4770      	bx	lr
 8004d90:	b510      	push	{r4, lr}
 8004d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9c:	d1f9      	bne.n	8004d92 <memcpy+0xe>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <memmove>:
 8004da0:	4288      	cmp	r0, r1
 8004da2:	b510      	push	{r4, lr}
 8004da4:	eb01 0402 	add.w	r4, r1, r2
 8004da8:	d902      	bls.n	8004db0 <memmove+0x10>
 8004daa:	4284      	cmp	r4, r0
 8004dac:	4623      	mov	r3, r4
 8004dae:	d807      	bhi.n	8004dc0 <memmove+0x20>
 8004db0:	1e43      	subs	r3, r0, #1
 8004db2:	42a1      	cmp	r1, r4
 8004db4:	d008      	beq.n	8004dc8 <memmove+0x28>
 8004db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dbe:	e7f8      	b.n	8004db2 <memmove+0x12>
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	4402      	add	r2, r0
 8004dc4:	428a      	cmp	r2, r1
 8004dc6:	d100      	bne.n	8004dca <memmove+0x2a>
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd2:	e7f7      	b.n	8004dc4 <memmove+0x24>

08004dd4 <_free_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d043      	beq.n	8004e64 <_free_r+0x90>
 8004ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de0:	1f0c      	subs	r4, r1, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	18e4      	addlt	r4, r4, r3
 8004de8:	f000 f8d0 	bl	8004f8c <__malloc_lock>
 8004dec:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <_free_r+0x94>)
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	4610      	mov	r0, r2
 8004df2:	b933      	cbnz	r3, 8004e02 <_free_r+0x2e>
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	6014      	str	r4, [r2, #0]
 8004df8:	4628      	mov	r0, r5
 8004dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dfe:	f000 b8cb 	b.w	8004f98 <__malloc_unlock>
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	d90a      	bls.n	8004e1c <_free_r+0x48>
 8004e06:	6821      	ldr	r1, [r4, #0]
 8004e08:	1862      	adds	r2, r4, r1
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	bf01      	itttt	eq
 8004e0e:	681a      	ldreq	r2, [r3, #0]
 8004e10:	685b      	ldreq	r3, [r3, #4]
 8004e12:	1852      	addeq	r2, r2, r1
 8004e14:	6022      	streq	r2, [r4, #0]
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6004      	str	r4, [r0, #0]
 8004e1a:	e7ed      	b.n	8004df8 <_free_r+0x24>
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	b10b      	cbz	r3, 8004e26 <_free_r+0x52>
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d9fa      	bls.n	8004e1c <_free_r+0x48>
 8004e26:	6811      	ldr	r1, [r2, #0]
 8004e28:	1850      	adds	r0, r2, r1
 8004e2a:	42a0      	cmp	r0, r4
 8004e2c:	d10b      	bne.n	8004e46 <_free_r+0x72>
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	4401      	add	r1, r0
 8004e32:	1850      	adds	r0, r2, r1
 8004e34:	4283      	cmp	r3, r0
 8004e36:	6011      	str	r1, [r2, #0]
 8004e38:	d1de      	bne.n	8004df8 <_free_r+0x24>
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4401      	add	r1, r0
 8004e40:	6011      	str	r1, [r2, #0]
 8004e42:	6053      	str	r3, [r2, #4]
 8004e44:	e7d8      	b.n	8004df8 <_free_r+0x24>
 8004e46:	d902      	bls.n	8004e4e <_free_r+0x7a>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	e7d4      	b.n	8004df8 <_free_r+0x24>
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	1821      	adds	r1, r4, r0
 8004e52:	428b      	cmp	r3, r1
 8004e54:	bf01      	itttt	eq
 8004e56:	6819      	ldreq	r1, [r3, #0]
 8004e58:	685b      	ldreq	r3, [r3, #4]
 8004e5a:	1809      	addeq	r1, r1, r0
 8004e5c:	6021      	streq	r1, [r4, #0]
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	6054      	str	r4, [r2, #4]
 8004e62:	e7c9      	b.n	8004df8 <_free_r+0x24>
 8004e64:	bd38      	pop	{r3, r4, r5, pc}
 8004e66:	bf00      	nop
 8004e68:	200000d8 	.word	0x200000d8

08004e6c <_malloc_r>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	1ccd      	adds	r5, r1, #3
 8004e70:	f025 0503 	bic.w	r5, r5, #3
 8004e74:	3508      	adds	r5, #8
 8004e76:	2d0c      	cmp	r5, #12
 8004e78:	bf38      	it	cc
 8004e7a:	250c      	movcc	r5, #12
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	4606      	mov	r6, r0
 8004e80:	db01      	blt.n	8004e86 <_malloc_r+0x1a>
 8004e82:	42a9      	cmp	r1, r5
 8004e84:	d903      	bls.n	8004e8e <_malloc_r+0x22>
 8004e86:	230c      	movs	r3, #12
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8e:	f000 f87d 	bl	8004f8c <__malloc_lock>
 8004e92:	4921      	ldr	r1, [pc, #132]	; (8004f18 <_malloc_r+0xac>)
 8004e94:	680a      	ldr	r2, [r1, #0]
 8004e96:	4614      	mov	r4, r2
 8004e98:	b99c      	cbnz	r4, 8004ec2 <_malloc_r+0x56>
 8004e9a:	4f20      	ldr	r7, [pc, #128]	; (8004f1c <_malloc_r+0xb0>)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	b923      	cbnz	r3, 8004eaa <_malloc_r+0x3e>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f000 f862 	bl	8004f6c <_sbrk_r>
 8004ea8:	6038      	str	r0, [r7, #0]
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 f85d 	bl	8004f6c <_sbrk_r>
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	d123      	bne.n	8004efe <_malloc_r+0x92>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	4630      	mov	r0, r6
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	f000 f86c 	bl	8004f98 <__malloc_unlock>
 8004ec0:	e7e3      	b.n	8004e8a <_malloc_r+0x1e>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	1b5b      	subs	r3, r3, r5
 8004ec6:	d417      	bmi.n	8004ef8 <_malloc_r+0x8c>
 8004ec8:	2b0b      	cmp	r3, #11
 8004eca:	d903      	bls.n	8004ed4 <_malloc_r+0x68>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	441c      	add	r4, r3
 8004ed0:	6025      	str	r5, [r4, #0]
 8004ed2:	e004      	b.n	8004ede <_malloc_r+0x72>
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	42a2      	cmp	r2, r4
 8004ed8:	bf0c      	ite	eq
 8004eda:	600b      	streq	r3, [r1, #0]
 8004edc:	6053      	strne	r3, [r2, #4]
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f000 f85a 	bl	8004f98 <__malloc_unlock>
 8004ee4:	f104 000b 	add.w	r0, r4, #11
 8004ee8:	1d23      	adds	r3, r4, #4
 8004eea:	f020 0007 	bic.w	r0, r0, #7
 8004eee:	1ac2      	subs	r2, r0, r3
 8004ef0:	d0cc      	beq.n	8004e8c <_malloc_r+0x20>
 8004ef2:	1a1b      	subs	r3, r3, r0
 8004ef4:	50a3      	str	r3, [r4, r2]
 8004ef6:	e7c9      	b.n	8004e8c <_malloc_r+0x20>
 8004ef8:	4622      	mov	r2, r4
 8004efa:	6864      	ldr	r4, [r4, #4]
 8004efc:	e7cc      	b.n	8004e98 <_malloc_r+0x2c>
 8004efe:	1cc4      	adds	r4, r0, #3
 8004f00:	f024 0403 	bic.w	r4, r4, #3
 8004f04:	42a0      	cmp	r0, r4
 8004f06:	d0e3      	beq.n	8004ed0 <_malloc_r+0x64>
 8004f08:	1a21      	subs	r1, r4, r0
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f000 f82e 	bl	8004f6c <_sbrk_r>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d1dd      	bne.n	8004ed0 <_malloc_r+0x64>
 8004f14:	e7cf      	b.n	8004eb6 <_malloc_r+0x4a>
 8004f16:	bf00      	nop
 8004f18:	200000d8 	.word	0x200000d8
 8004f1c:	200000dc 	.word	0x200000dc

08004f20 <_realloc_r>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	4607      	mov	r7, r0
 8004f24:	4614      	mov	r4, r2
 8004f26:	460e      	mov	r6, r1
 8004f28:	b921      	cbnz	r1, 8004f34 <_realloc_r+0x14>
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f30:	f7ff bf9c 	b.w	8004e6c <_malloc_r>
 8004f34:	b922      	cbnz	r2, 8004f40 <_realloc_r+0x20>
 8004f36:	f7ff ff4d 	bl	8004dd4 <_free_r>
 8004f3a:	4625      	mov	r5, r4
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f40:	f000 f830 	bl	8004fa4 <_malloc_usable_size_r>
 8004f44:	42a0      	cmp	r0, r4
 8004f46:	d20f      	bcs.n	8004f68 <_realloc_r+0x48>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f7ff ff8e 	bl	8004e6c <_malloc_r>
 8004f50:	4605      	mov	r5, r0
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d0f2      	beq.n	8004f3c <_realloc_r+0x1c>
 8004f56:	4631      	mov	r1, r6
 8004f58:	4622      	mov	r2, r4
 8004f5a:	f7ff ff13 	bl	8004d84 <memcpy>
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4638      	mov	r0, r7
 8004f62:	f7ff ff37 	bl	8004dd4 <_free_r>
 8004f66:	e7e9      	b.n	8004f3c <_realloc_r+0x1c>
 8004f68:	4635      	mov	r5, r6
 8004f6a:	e7e7      	b.n	8004f3c <_realloc_r+0x1c>

08004f6c <_sbrk_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4d05      	ldr	r5, [pc, #20]	; (8004f88 <_sbrk_r+0x1c>)
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	602b      	str	r3, [r5, #0]
 8004f78:	f7fc fba0 	bl	80016bc <_sbrk>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_sbrk_r+0x1a>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_sbrk_r+0x1a>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	200002dc 	.word	0x200002dc

08004f8c <__malloc_lock>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <__malloc_lock+0x8>)
 8004f8e:	f000 b811 	b.w	8004fb4 <__retarget_lock_acquire_recursive>
 8004f92:	bf00      	nop
 8004f94:	200002e4 	.word	0x200002e4

08004f98 <__malloc_unlock>:
 8004f98:	4801      	ldr	r0, [pc, #4]	; (8004fa0 <__malloc_unlock+0x8>)
 8004f9a:	f000 b80c 	b.w	8004fb6 <__retarget_lock_release_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	200002e4 	.word	0x200002e4

08004fa4 <_malloc_usable_size_r>:
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f18      	subs	r0, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfbc      	itt	lt
 8004fae:	580b      	ldrlt	r3, [r1, r0]
 8004fb0:	18c0      	addlt	r0, r0, r3
 8004fb2:	4770      	bx	lr

08004fb4 <__retarget_lock_acquire_recursive>:
 8004fb4:	4770      	bx	lr

08004fb6 <__retarget_lock_release_recursive>:
 8004fb6:	4770      	bx	lr

08004fb8 <_init>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr

08004fc4 <_fini>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	bf00      	nop
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr
