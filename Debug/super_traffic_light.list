
super_traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004108  08004108  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004108  08004108  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004108  08004108  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200000b0  080041c0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080041c0  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eaa  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b73  00000000  00000000  00037f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0003aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dcc  00000000  00000000  0003c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fa1  00000000  00000000  000561b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0c0  00000000  00000000  00068155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3215  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000f3268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004078 	.word	0x08004078

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08004078 	.word	0x08004078

0800014c <ButtonInitializer>:
//int BtnRegistor1 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
//int BtnRegistor2 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
//int BtnRegistor3 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
//int TimerForKeyPress [4] = {500, 500, 500, 500};

void ButtonInitializer(int i){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(i==0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d148      	bne.n	80001ec <ButtonInitializer+0xa0>
		button[i].gpio= BUTTON_PORT[i];
 800015a:	4a4d      	ldr	r2, [pc, #308]	; (8000290 <ButtonInitializer+0x144>)
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000162:	494c      	ldr	r1, [pc, #304]	; (8000294 <ButtonInitializer+0x148>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	015b      	lsls	r3, r3, #5
 8000168:	440b      	add	r3, r1
 800016a:	3318      	adds	r3, #24
 800016c:	601a      	str	r2, [r3, #0]
		button[i].is_long_pressed=0;
 800016e:	4a49      	ldr	r2, [pc, #292]	; (8000294 <ButtonInitializer+0x148>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	015b      	lsls	r3, r3, #5
 8000174:	4413      	add	r3, r2
 8000176:	3310      	adds	r3, #16
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
		button[i].is_pressed=0;
 800017c:	4a45      	ldr	r2, [pc, #276]	; (8000294 <ButtonInitializer+0x148>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	015b      	lsls	r3, r3, #5
 8000182:	4413      	add	r3, r2
 8000184:	330c      	adds	r3, #12
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
 800018a:	4a43      	ldr	r2, [pc, #268]	; (8000298 <ButtonInitializer+0x14c>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000192:	4a40      	ldr	r2, [pc, #256]	; (8000294 <ButtonInitializer+0x148>)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	015b      	lsls	r3, r3, #5
 8000198:	4413      	add	r3, r2
 800019a:	331c      	adds	r3, #28
 800019c:	460a      	mov	r2, r1
 800019e:	801a      	strh	r2, [r3, #0]
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = NORMAL_STATE;
 80001a0:	4a3c      	ldr	r2, [pc, #240]	; (8000294 <ButtonInitializer+0x148>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	015b      	lsls	r3, r3, #5
 80001a6:	4413      	add	r3, r2
 80001a8:	3308      	adds	r3, #8
 80001aa:	2201      	movs	r2, #1
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	4a39      	ldr	r2, [pc, #228]	; (8000294 <ButtonInitializer+0x148>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	015b      	lsls	r3, r3, #5
 80001b4:	4413      	add	r3, r2
 80001b6:	3308      	adds	r3, #8
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	4936      	ldr	r1, [pc, #216]	; (8000294 <ButtonInitializer+0x148>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	015b      	lsls	r3, r3, #5
 80001c0:	440b      	add	r3, r1
 80001c2:	3304      	adds	r3, #4
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	4a33      	ldr	r2, [pc, #204]	; (8000294 <ButtonInitializer+0x148>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	015b      	lsls	r3, r3, #5
 80001cc:	4413      	add	r3, r2
 80001ce:	3304      	adds	r3, #4
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	4930      	ldr	r1, [pc, #192]	; (8000294 <ButtonInitializer+0x148>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	015b      	lsls	r3, r3, #5
 80001d8:	440b      	add	r3, r1
 80001da:	601a      	str	r2, [r3, #0]
		button[i].timer= 100;
 80001dc:	4a2d      	ldr	r2, [pc, #180]	; (8000294 <ButtonInitializer+0x148>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	015b      	lsls	r3, r3, #5
 80001e2:	4413      	add	r3, r2
 80001e4:	3314      	adds	r3, #20
 80001e6:	2264      	movs	r2, #100	; 0x64
 80001e8:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = NORMAL_STATE;
		button[i].timer= 100;
		ButtonInitializer(i-1);
	}
}
 80001ea:	e04c      	b.n	8000286 <ButtonInitializer+0x13a>
		button[i].gpio= BUTTON_PORT[i];
 80001ec:	4a28      	ldr	r2, [pc, #160]	; (8000290 <ButtonInitializer+0x144>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4927      	ldr	r1, [pc, #156]	; (8000294 <ButtonInitializer+0x148>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	015b      	lsls	r3, r3, #5
 80001fa:	440b      	add	r3, r1
 80001fc:	3318      	adds	r3, #24
 80001fe:	601a      	str	r2, [r3, #0]
		button[i].is_long_pressed=0;
 8000200:	4a24      	ldr	r2, [pc, #144]	; (8000294 <ButtonInitializer+0x148>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	015b      	lsls	r3, r3, #5
 8000206:	4413      	add	r3, r2
 8000208:	3310      	adds	r3, #16
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
		button[i].is_pressed=0;
 800020e:	4a21      	ldr	r2, [pc, #132]	; (8000294 <ButtonInitializer+0x148>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	015b      	lsls	r3, r3, #5
 8000214:	4413      	add	r3, r2
 8000216:	330c      	adds	r3, #12
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
 800021c:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <ButtonInitializer+0x14c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000224:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <ButtonInitializer+0x148>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	015b      	lsls	r3, r3, #5
 800022a:	4413      	add	r3, r2
 800022c:	331c      	adds	r3, #28
 800022e:	460a      	mov	r2, r1
 8000230:	801a      	strh	r2, [r3, #0]
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = NORMAL_STATE;
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <ButtonInitializer+0x148>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	015b      	lsls	r3, r3, #5
 8000238:	4413      	add	r3, r2
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	4a14      	ldr	r2, [pc, #80]	; (8000294 <ButtonInitializer+0x148>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	015b      	lsls	r3, r3, #5
 8000246:	4413      	add	r3, r2
 8000248:	3308      	adds	r3, #8
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4911      	ldr	r1, [pc, #68]	; (8000294 <ButtonInitializer+0x148>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	015b      	lsls	r3, r3, #5
 8000252:	440b      	add	r3, r1
 8000254:	3304      	adds	r3, #4
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <ButtonInitializer+0x148>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	015b      	lsls	r3, r3, #5
 800025e:	4413      	add	r3, r2
 8000260:	3304      	adds	r3, #4
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	490b      	ldr	r1, [pc, #44]	; (8000294 <ButtonInitializer+0x148>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	015b      	lsls	r3, r3, #5
 800026a:	440b      	add	r3, r1
 800026c:	601a      	str	r2, [r3, #0]
		button[i].timer= 100;
 800026e:	4a09      	ldr	r2, [pc, #36]	; (8000294 <ButtonInitializer+0x148>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	015b      	lsls	r3, r3, #5
 8000274:	4413      	add	r3, r2
 8000276:	3314      	adds	r3, #20
 8000278:	2264      	movs	r2, #100	; 0x64
 800027a:	601a      	str	r2, [r3, #0]
		ButtonInitializer(i-1);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3b01      	subs	r3, #1
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff63 	bl	800014c <ButtonInitializer>
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000000 	.word	0x20000000
 8000294:	2000011c 	.word	0x2000011c
 8000298:	20000010 	.word	0x20000010

0800029c <buttonInnit>:

void buttonInnit(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	ButtonInitializer(NUMBER_OF_BUTTON -1);
 80002a0:	2003      	movs	r0, #3
 80002a2:	f7ff ff53 	bl	800014c <ButtonInitializer>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <isButtonPressed>:

int isButtonPressed(int index){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	return button[index].is_pressed;
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <isButtonPressed+0x20>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	015b      	lsls	r3, r3, #5
 80002ba:	4413      	add	r3, r2
 80002bc:	330c      	adds	r3, #12
 80002be:	681b      	ldr	r3, [r3, #0]
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	2000011c 	.word	0x2000011c

080002d0 <getInput>:
//void subKeyProcess(int button){
//	button_flag[button] = 1;
//}


void getInput(int i){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
//			{
//				BtnRegistor3[button] = NORMAL_STATE;
//			}
//		}
//	}
	if (i == 0) {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 808b 	bne.w	80003f6 <getInput+0x126>
		button[i].reg[0] = button[i].reg[1];
 80002e0:	4a8d      	ldr	r2, [pc, #564]	; (8000518 <getInput+0x248>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	015b      	lsls	r3, r3, #5
 80002e6:	4413      	add	r3, r2
 80002e8:	3304      	adds	r3, #4
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	498a      	ldr	r1, [pc, #552]	; (8000518 <getInput+0x248>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	015b      	lsls	r3, r3, #5
 80002f2:	440b      	add	r3, r1
 80002f4:	601a      	str	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 80002f6:	4a88      	ldr	r2, [pc, #544]	; (8000518 <getInput+0x248>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	015b      	lsls	r3, r3, #5
 80002fc:	4413      	add	r3, r2
 80002fe:	3308      	adds	r3, #8
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4985      	ldr	r1, [pc, #532]	; (8000518 <getInput+0x248>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	015b      	lsls	r3, r3, #5
 8000308:	440b      	add	r3, r1
 800030a:	3304      	adds	r3, #4
 800030c:	601a      	str	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 800030e:	4a83      	ldr	r2, [pc, #524]	; (800051c <getInput+0x24c>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4982      	ldr	r1, [pc, #520]	; (8000520 <getInput+0x250>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800031e:	4619      	mov	r1, r3
 8000320:	4610      	mov	r0, r2
 8000322:	f001 fcb1 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	4a7b      	ldr	r2, [pc, #492]	; (8000518 <getInput+0x248>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	015b      	lsls	r3, r3, #5
 8000330:	4413      	add	r3, r2
 8000332:	3308      	adds	r3, #8
 8000334:	6019      	str	r1, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000336:	4a78      	ldr	r2, [pc, #480]	; (8000518 <getInput+0x248>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	015b      	lsls	r3, r3, #5
 800033c:	4413      	add	r3, r2
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4975      	ldr	r1, [pc, #468]	; (8000518 <getInput+0x248>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	015b      	lsls	r3, r3, #5
 8000346:	440b      	add	r3, r1
 8000348:	3304      	adds	r3, #4
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	429a      	cmp	r2, r3
 800034e:	f040 80df 	bne.w	8000510 <getInput+0x240>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000352:	4a71      	ldr	r2, [pc, #452]	; (8000518 <getInput+0x248>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	015b      	lsls	r3, r3, #5
 8000358:	4413      	add	r3, r2
 800035a:	3304      	adds	r3, #4
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	496e      	ldr	r1, [pc, #440]	; (8000518 <getInput+0x248>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	015b      	lsls	r3, r3, #5
 8000364:	440b      	add	r3, r1
 8000366:	3308      	adds	r3, #8
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	429a      	cmp	r2, r3
 800036c:	f040 80d0 	bne.w	8000510 <getInput+0x240>
			if (button[i].reg[2] == PRESSED_STATE) {
 8000370:	4a69      	ldr	r2, [pc, #420]	; (8000518 <getInput+0x248>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	015b      	lsls	r3, r3, #5
 8000376:	4413      	add	r3, r2
 8000378:	3308      	adds	r3, #8
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d124      	bne.n	80003ca <getInput+0xfa>
				button[i].is_pressed = 1;
 8000380:	4a65      	ldr	r2, [pc, #404]	; (8000518 <getInput+0x248>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	015b      	lsls	r3, r3, #5
 8000386:	4413      	add	r3, r2
 8000388:	330c      	adds	r3, #12
 800038a:	2201      	movs	r2, #1
 800038c:	601a      	str	r2, [r3, #0]
				if (button[i].timer > 0) {
 800038e:	4a62      	ldr	r2, [pc, #392]	; (8000518 <getInput+0x248>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	015b      	lsls	r3, r3, #5
 8000394:	4413      	add	r3, r2
 8000396:	3314      	adds	r3, #20
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	dd0d      	ble.n	80003ba <getInput+0xea>
					button[i].timer--;
 800039e:	4a5e      	ldr	r2, [pc, #376]	; (8000518 <getInput+0x248>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	015b      	lsls	r3, r3, #5
 80003a4:	4413      	add	r3, r2
 80003a6:	3314      	adds	r3, #20
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	495a      	ldr	r1, [pc, #360]	; (8000518 <getInput+0x248>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	015b      	lsls	r3, r3, #5
 80003b2:	440b      	add	r3, r1
 80003b4:	3314      	adds	r3, #20
 80003b6:	601a      	str	r2, [r3, #0]
				button[i].timer = 100;
			}
		}
		getInput(i-1);
	}
}
 80003b8:	e0aa      	b.n	8000510 <getInput+0x240>
					button[i].is_long_pressed = 1;
 80003ba:	4a57      	ldr	r2, [pc, #348]	; (8000518 <getInput+0x248>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	015b      	lsls	r3, r3, #5
 80003c0:	4413      	add	r3, r2
 80003c2:	3310      	adds	r3, #16
 80003c4:	2201      	movs	r2, #1
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	e0a2      	b.n	8000510 <getInput+0x240>
				button[i].is_pressed = 0;
 80003ca:	4a53      	ldr	r2, [pc, #332]	; (8000518 <getInput+0x248>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	015b      	lsls	r3, r3, #5
 80003d0:	4413      	add	r3, r2
 80003d2:	330c      	adds	r3, #12
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
				button[i].is_long_pressed = 0;
 80003d8:	4a4f      	ldr	r2, [pc, #316]	; (8000518 <getInput+0x248>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	015b      	lsls	r3, r3, #5
 80003de:	4413      	add	r3, r2
 80003e0:	3310      	adds	r3, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
				button[i].timer = 100;
 80003e6:	4a4c      	ldr	r2, [pc, #304]	; (8000518 <getInput+0x248>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	015b      	lsls	r3, r3, #5
 80003ec:	4413      	add	r3, r2
 80003ee:	3314      	adds	r3, #20
 80003f0:	2264      	movs	r2, #100	; 0x64
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	e08c      	b.n	8000510 <getInput+0x240>
		button[i].reg[0] = button[i].reg[1];
 80003f6:	4a48      	ldr	r2, [pc, #288]	; (8000518 <getInput+0x248>)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	015b      	lsls	r3, r3, #5
 80003fc:	4413      	add	r3, r2
 80003fe:	3304      	adds	r3, #4
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4945      	ldr	r1, [pc, #276]	; (8000518 <getInput+0x248>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	015b      	lsls	r3, r3, #5
 8000408:	440b      	add	r3, r1
 800040a:	601a      	str	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 800040c:	4a42      	ldr	r2, [pc, #264]	; (8000518 <getInput+0x248>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	015b      	lsls	r3, r3, #5
 8000412:	4413      	add	r3, r2
 8000414:	3308      	adds	r3, #8
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	493f      	ldr	r1, [pc, #252]	; (8000518 <getInput+0x248>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	015b      	lsls	r3, r3, #5
 800041e:	440b      	add	r3, r1
 8000420:	3304      	adds	r3, #4
 8000422:	601a      	str	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 8000424:	4a3d      	ldr	r2, [pc, #244]	; (800051c <getInput+0x24c>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042c:	493c      	ldr	r1, [pc, #240]	; (8000520 <getInput+0x250>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000434:	4619      	mov	r1, r3
 8000436:	4610      	mov	r0, r2
 8000438:	f001 fc26 	bl	8001c88 <HAL_GPIO_ReadPin>
 800043c:	4603      	mov	r3, r0
 800043e:	4619      	mov	r1, r3
 8000440:	4a35      	ldr	r2, [pc, #212]	; (8000518 <getInput+0x248>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	015b      	lsls	r3, r3, #5
 8000446:	4413      	add	r3, r2
 8000448:	3308      	adds	r3, #8
 800044a:	6019      	str	r1, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 800044c:	4a32      	ldr	r2, [pc, #200]	; (8000518 <getInput+0x248>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	015b      	lsls	r3, r3, #5
 8000452:	4413      	add	r3, r2
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4930      	ldr	r1, [pc, #192]	; (8000518 <getInput+0x248>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	015b      	lsls	r3, r3, #5
 800045c:	440b      	add	r3, r1
 800045e:	3304      	adds	r3, #4
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d14f      	bne.n	8000506 <getInput+0x236>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000466:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <getInput+0x248>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	015b      	lsls	r3, r3, #5
 800046c:	4413      	add	r3, r2
 800046e:	3304      	adds	r3, #4
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4929      	ldr	r1, [pc, #164]	; (8000518 <getInput+0x248>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	015b      	lsls	r3, r3, #5
 8000478:	440b      	add	r3, r1
 800047a:	3308      	adds	r3, #8
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	429a      	cmp	r2, r3
 8000480:	d141      	bne.n	8000506 <getInput+0x236>
			if (button[i].reg[2] == PRESSED_STATE) {
 8000482:	4a25      	ldr	r2, [pc, #148]	; (8000518 <getInput+0x248>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	015b      	lsls	r3, r3, #5
 8000488:	4413      	add	r3, r2
 800048a:	3308      	adds	r3, #8
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d124      	bne.n	80004dc <getInput+0x20c>
				button[i].is_pressed = 1;
 8000492:	4a21      	ldr	r2, [pc, #132]	; (8000518 <getInput+0x248>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	015b      	lsls	r3, r3, #5
 8000498:	4413      	add	r3, r2
 800049a:	330c      	adds	r3, #12
 800049c:	2201      	movs	r2, #1
 800049e:	601a      	str	r2, [r3, #0]
				if (button[i].timer > 0) {
 80004a0:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <getInput+0x248>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	015b      	lsls	r3, r3, #5
 80004a6:	4413      	add	r3, r2
 80004a8:	3314      	adds	r3, #20
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dd0d      	ble.n	80004cc <getInput+0x1fc>
					button[i].timer--;
 80004b0:	4a19      	ldr	r2, [pc, #100]	; (8000518 <getInput+0x248>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	015b      	lsls	r3, r3, #5
 80004b6:	4413      	add	r3, r2
 80004b8:	3314      	adds	r3, #20
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	1e5a      	subs	r2, r3, #1
 80004be:	4916      	ldr	r1, [pc, #88]	; (8000518 <getInput+0x248>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	015b      	lsls	r3, r3, #5
 80004c4:	440b      	add	r3, r1
 80004c6:	3314      	adds	r3, #20
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	e01c      	b.n	8000506 <getInput+0x236>
					button[i].is_long_pressed = 1;
 80004cc:	4a12      	ldr	r2, [pc, #72]	; (8000518 <getInput+0x248>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	015b      	lsls	r3, r3, #5
 80004d2:	4413      	add	r3, r2
 80004d4:	3310      	adds	r3, #16
 80004d6:	2201      	movs	r2, #1
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	e014      	b.n	8000506 <getInput+0x236>
				button[i].is_pressed = 0;
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <getInput+0x248>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	015b      	lsls	r3, r3, #5
 80004e2:	4413      	add	r3, r2
 80004e4:	330c      	adds	r3, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
				button[i].is_long_pressed = 0;
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <getInput+0x248>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	015b      	lsls	r3, r3, #5
 80004f0:	4413      	add	r3, r2
 80004f2:	3310      	adds	r3, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
				button[i].timer = 100;
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <getInput+0x248>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	015b      	lsls	r3, r3, #5
 80004fe:	4413      	add	r3, r2
 8000500:	3314      	adds	r3, #20
 8000502:	2264      	movs	r2, #100	; 0x64
 8000504:	601a      	str	r2, [r3, #0]
		getInput(i-1);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3b01      	subs	r3, #1
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fee0 	bl	80002d0 <getInput>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000011c 	.word	0x2000011c
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010

08000524 <getKeyInput>:
void getKeyInput(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	getInput(NUMBER_OF_BUTTON-1);
 8000528:	2003      	movs	r0, #3
 800052a:	f7ff fed1 	bl	80002d0 <getInput>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <fsm_automatic_run>:
 *      Author: MY PC
 */

#include "fsm_auto.h"

void fsm_automatic_run(int lane){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	if (timer[lane].count % 100 == 0){
 800053c:	4a77      	ldr	r2, [pc, #476]	; (800071c <fsm_automatic_run+0x1e8>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000544:	4b76      	ldr	r3, [pc, #472]	; (8000720 <fsm_automatic_run+0x1ec>)
 8000546:	fba3 1302 	umull	r1, r3, r3, r2
 800054a:	095b      	lsrs	r3, r3, #5
 800054c:	2164      	movs	r1, #100	; 0x64
 800054e:	fb01 f303 	mul.w	r3, r1, r3
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d126      	bne.n	80005a6 <fsm_automatic_run+0x72>
		int remaining_time = timer[lane].count / 100;
 8000558:	4a70      	ldr	r2, [pc, #448]	; (800071c <fsm_automatic_run+0x1e8>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000560:	4a6f      	ldr	r2, [pc, #444]	; (8000720 <fsm_automatic_run+0x1ec>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	095b      	lsrs	r3, r3, #5
 8000568:	60fb      	str	r3, [r7, #12]
		Display(remaining_time);
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f001 f844 	bl	80015f8 <Display>
		if(!lane && PEDESTRIAN_MODE && LED_STATE[0] == RED_STATE){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d117      	bne.n	80005a6 <fsm_automatic_run+0x72>
 8000576:	4b6b      	ldr	r3, [pc, #428]	; (8000724 <fsm_automatic_run+0x1f0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d013      	beq.n	80005a6 <fsm_automatic_run+0x72>
 800057e:	4b6a      	ldr	r3, [pc, #424]	; (8000728 <fsm_automatic_run+0x1f4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d10f      	bne.n	80005a6 <fsm_automatic_run+0x72>
			int freq= (RED_DURATION *100 - remaining_time) *10;
 8000586:	4b69      	ldr	r3, [pc, #420]	; (800072c <fsm_automatic_run+0x1f8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	fb02 f203 	mul.w	r2, r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	4613      	mov	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	60bb      	str	r3, [r7, #8]
			buzzer(freq);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fd0f 	bl	8000fc4 <buzzer>
		}
	}
	switch(LED_STATE[lane]){
 80005a6:	4a60      	ldr	r2, [pc, #384]	; (8000728 <fsm_automatic_run+0x1f4>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	f200 80a5 	bhi.w	8000700 <fsm_automatic_run+0x1cc>
 80005b6:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <fsm_automatic_run+0x88>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005cd 	.word	0x080005cd
 80005c0:	08000629 	.word	0x08000629
 80005c4:	08000671 	.word	0x08000671
 80005c8:	080006b9 	.word	0x080006b9
		case INIT_STATE:
			setTrafficLightDefault(lane);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 ff13 	bl	80013f8 <setTrafficLightDefault>
			if (lane == 0){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d117      	bne.n	8000608 <fsm_automatic_run+0xd4>
				LED_STATE[lane] = RED_STATE;
 80005d8:	4a53      	ldr	r2, [pc, #332]	; (8000728 <fsm_automatic_run+0x1f4>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2102      	movs	r1, #2
 80005de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4b51      	ldr	r3, [pc, #324]	; (800072c <fsm_automatic_run+0x1f8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2164      	movs	r1, #100	; 0x64
 80005ea:	fb01 f303 	mul.w	r3, r1, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f000 fe8d 	bl	8001310 <setTimer>
				if(PEDESTRIAN_MODE){
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <fsm_automatic_run+0x1f0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f000 8082 	beq.w	8000704 <fsm_automatic_run+0x1d0>
					setGreen(2);
 8000600:	2002      	movs	r0, #2
 8000602:	f000 ff47 	bl	8001494 <setGreen>
			}
			else{
				LED_STATE[lane] = GREEN_STATE;
				setTimer(lane, GREEN_DURATION*100);
			}
			break;
 8000606:	e07d      	b.n	8000704 <fsm_automatic_run+0x1d0>
				LED_STATE[lane] = GREEN_STATE;
 8000608:	4a47      	ldr	r2, [pc, #284]	; (8000728 <fsm_automatic_run+0x1f4>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2103      	movs	r1, #3
 800060e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4b46      	ldr	r3, [pc, #280]	; (8000730 <fsm_automatic_run+0x1fc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2164      	movs	r1, #100	; 0x64
 800061a:	fb01 f303 	mul.w	r3, r1, r3
 800061e:	4619      	mov	r1, r3
 8000620:	4610      	mov	r0, r2
 8000622:	f000 fe75 	bl	8001310 <setTimer>
			break;
 8000626:	e06d      	b.n	8000704 <fsm_automatic_run+0x1d0>
		case RED_STATE:
			setRed(lane);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 ff75 	bl	8001518 <setRed>
			if(isTimerOn(lane) == 1){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fed1 	bl	80013d8 <isTimerOn>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10e      	bne.n	800065a <fsm_automatic_run+0x126>
				LED_STATE[lane] = GREEN_STATE;
 800063c:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <fsm_automatic_run+0x1f4>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2103      	movs	r1, #3
 8000642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4b39      	ldr	r3, [pc, #228]	; (8000730 <fsm_automatic_run+0x1fc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2164      	movs	r1, #100	; 0x64
 800064e:	fb01 f303 	mul.w	r3, r1, r3
 8000652:	4619      	mov	r1, r3
 8000654:	4610      	mov	r0, r2
 8000656:	f000 fe5b 	bl	8001310 <setTimer>
			}

			if(lane ==0 && PEDESTRIAN_MODE){
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d153      	bne.n	8000708 <fsm_automatic_run+0x1d4>
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <fsm_automatic_run+0x1f0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d04f      	beq.n	8000708 <fsm_automatic_run+0x1d4>
				setGreen(2);
 8000668:	2002      	movs	r0, #2
 800066a:	f000 ff13 	bl	8001494 <setGreen>
			}
			break;
 800066e:	e04b      	b.n	8000708 <fsm_automatic_run+0x1d4>
		case GREEN_STATE:
			setGreen(lane);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 ff0f 	bl	8001494 <setGreen>
			if(isTimerOn(lane) == 1){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fead 	bl	80013d8 <isTimerOn>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10e      	bne.n	80006a2 <fsm_automatic_run+0x16e>
				LED_STATE[lane] = YELLOW_STATE;
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <fsm_automatic_run+0x1f4>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2104      	movs	r1, #4
 800068a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <fsm_automatic_run+0x200>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2164      	movs	r1, #100	; 0x64
 8000696:	fb01 f303 	mul.w	r3, r1, r3
 800069a:	4619      	mov	r1, r3
 800069c:	4610      	mov	r0, r2
 800069e:	f000 fe37 	bl	8001310 <setTimer>
			}

			if(lane == 0 && PEDESTRIAN_MODE){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d131      	bne.n	800070c <fsm_automatic_run+0x1d8>
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <fsm_automatic_run+0x1f0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d02d      	beq.n	800070c <fsm_automatic_run+0x1d8>
				setRed(2);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 ff31 	bl	8001518 <setRed>
			}
			break;
 80006b6:	e029      	b.n	800070c <fsm_automatic_run+0x1d8>
		case YELLOW_STATE:
			setAmber(lane);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 ff6f 	bl	800159c <setAmber>
			if(isTimerOn(lane) == 1){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe89 	bl	80013d8 <isTimerOn>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10e      	bne.n	80006ea <fsm_automatic_run+0x1b6>
				LED_STATE[lane] = RED_STATE;
 80006cc:	4a16      	ldr	r2, [pc, #88]	; (8000728 <fsm_automatic_run+0x1f4>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2102      	movs	r1, #2
 80006d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <fsm_automatic_run+0x1f8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2164      	movs	r1, #100	; 0x64
 80006de:	fb01 f303 	mul.w	r3, r1, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	4610      	mov	r0, r2
 80006e6:	f000 fe13 	bl	8001310 <setTimer>
			}

			if(lane ==0 && PEDESTRIAN_MODE){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10f      	bne.n	8000710 <fsm_automatic_run+0x1dc>
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <fsm_automatic_run+0x1f0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00b      	beq.n	8000710 <fsm_automatic_run+0x1dc>
				setRed(2);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f000 ff0d 	bl	8001518 <setRed>
			}
			break;
 80006fe:	e007      	b.n	8000710 <fsm_automatic_run+0x1dc>
		default:
			break;
 8000700:	bf00      	nop
 8000702:	e006      	b.n	8000712 <fsm_automatic_run+0x1de>
			break;
 8000704:	bf00      	nop
 8000706:	e004      	b.n	8000712 <fsm_automatic_run+0x1de>
			break;
 8000708:	bf00      	nop
 800070a:	e002      	b.n	8000712 <fsm_automatic_run+0x1de>
			break;
 800070c:	bf00      	nop
 800070e:	e000      	b.n	8000712 <fsm_automatic_run+0x1de>
			break;
 8000710:	bf00      	nop
	}


}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e0 	.word	0x200000e0
 8000720:	51eb851f 	.word	0x51eb851f
 8000724:	200000d0 	.word	0x200000d0
 8000728:	20000018 	.word	0x20000018
 800072c:	20000024 	.word	0x20000024
 8000730:	2000002c 	.word	0x2000002c
 8000734:	20000028 	.word	0x20000028

08000738 <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	setTrafficLightDefault(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fe59 	bl	80013f8 <setTrafficLightDefault>
	setTrafficLightDefault(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f000 fe56 	bl	80013f8 <setTrafficLightDefault>
	MODE = mode;
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <changeMode+0x2c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
	setTimer(2, 25);
 8000752:	2119      	movs	r1, #25
 8000754:	2002      	movs	r0, #2
 8000756:	f000 fddb 	bl	8001310 <setTimer>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000020 	.word	0x20000020

08000768 <displayDuration>:

void displayDuration(int mode, int duration){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
//	display7SEG(0, mode);
//	display7SEG(1, 0);
//	display7SEG(2, duration%10);
//	display7SEG(3, (int) (duration/10));
	Display(mode);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 ff40 	bl	80015f8 <Display>
	Display(duration);
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f000 ff3d 	bl	80015f8 <Display>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <fsm_manual_run>:
//handle manual setting
void fsm_manual_run(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

	switch(MODE){
 800078c:	4ba0      	ldr	r3, [pc, #640]	; (8000a10 <fsm_manual_run+0x288>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b0b      	subs	r3, #11
 8000792:	2b03      	cmp	r3, #3
 8000794:	f200 81e4 	bhi.w	8000b60 <fsm_manual_run+0x3d8>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <fsm_manual_run+0x18>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080008bd 	.word	0x080008bd
 80007a8:	08000969 	.word	0x08000969
 80007ac:	08000a41 	.word	0x08000a41
		case MODE_1:
			fsm_automatic_run(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff febf 	bl	8000534 <fsm_automatic_run>
			fsm_automatic_run(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff febc 	bl	8000534 <fsm_automatic_run>

			if (isButtonPressed(0) == 1){
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fd75 	bl	80002ac <isButtonPressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10d      	bne.n	80007e4 <fsm_manual_run+0x5c>
				tempDuration = RED_DURATION;
 80007c8:	4b92      	ldr	r3, [pc, #584]	; (8000a14 <fsm_manual_run+0x28c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a92      	ldr	r2, [pc, #584]	; (8000a18 <fsm_manual_run+0x290>)
 80007ce:	6013      	str	r3, [r2, #0]
				changeMode(MODE_2);
 80007d0:	200c      	movs	r0, #12
 80007d2:	f7ff ffb1 	bl	8000738 <changeMode>
				HAL_GPIO_TogglePin(LED2_GPIO_Port	, LED2_Pin);
 80007d6:	2120      	movs	r1, #32
 80007d8:	4890      	ldr	r0, [pc, #576]	; (8000a1c <fsm_manual_run+0x294>)
 80007da:	f001 fa84 	bl	8001ce6 <HAL_GPIO_TogglePin>
//				Turn off pedestrian mode
				PEDESTRIAN_MODE = 0;
 80007de:	4b90      	ldr	r3, [pc, #576]	; (8000a20 <fsm_manual_run+0x298>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
//				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, RESET);
			}
//			Change light on
			if(isButtonPressed(1) == 1){
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fd61 	bl	80002ac <isButtonPressed>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d14f      	bne.n	8000890 <fsm_manual_run+0x108>
				setTrafficLightDefault(0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fe01 	bl	80013f8 <setTrafficLightDefault>
				setTrafficLightDefault(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 fdfe 	bl	80013f8 <setTrafficLightDefault>
				if(LED_STATE[0] == GREEN_STATE || LED_STATE[0] == YELLOW_STATE){
 80007fc:	4b89      	ldr	r3, [pc, #548]	; (8000a24 <fsm_manual_run+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b03      	cmp	r3, #3
 8000802:	d003      	beq.n	800080c <fsm_manual_run+0x84>
 8000804:	4b87      	ldr	r3, [pc, #540]	; (8000a24 <fsm_manual_run+0x29c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b04      	cmp	r3, #4
 800080a:	d11e      	bne.n	800084a <fsm_manual_run+0xc2>
					LED_STATE[0]= RED_STATE;
 800080c:	4b85      	ldr	r3, [pc, #532]	; (8000a24 <fsm_manual_run+0x29c>)
 800080e:	2202      	movs	r2, #2
 8000810:	601a      	str	r2, [r3, #0]
					setTimer(0, RED_DURATION*100);
 8000812:	4b80      	ldr	r3, [pc, #512]	; (8000a14 <fsm_manual_run+0x28c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2264      	movs	r2, #100	; 0x64
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	4619      	mov	r1, r3
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fd76 	bl	8001310 <setTimer>
					LED_STATE[1]= GREEN_STATE;
 8000824:	4b7f      	ldr	r3, [pc, #508]	; (8000a24 <fsm_manual_run+0x29c>)
 8000826:	2203      	movs	r2, #3
 8000828:	605a      	str	r2, [r3, #4]
					setTimer(1, GREEN_DURATION*100);
 800082a:	4b7f      	ldr	r3, [pc, #508]	; (8000a28 <fsm_manual_run+0x2a0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2264      	movs	r2, #100	; 0x64
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	4619      	mov	r1, r3
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fd6a 	bl	8001310 <setTimer>
					if(PEDESTRIAN_MODE){
 800083c:	4b78      	ldr	r3, [pc, #480]	; (8000a20 <fsm_manual_run+0x298>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <fsm_manual_run+0xc2>
						setGreen(2);
 8000844:	2002      	movs	r0, #2
 8000846:	f000 fe25 	bl	8001494 <setGreen>
					}

				}
				if (LED_STATE[0] == RED_STATE){
 800084a:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <fsm_manual_run+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d11e      	bne.n	8000890 <fsm_manual_run+0x108>
					LED_STATE[0]= GREEN_STATE;
 8000852:	4b74      	ldr	r3, [pc, #464]	; (8000a24 <fsm_manual_run+0x29c>)
 8000854:	2203      	movs	r2, #3
 8000856:	601a      	str	r2, [r3, #0]
					setTimer(0, GREEN_DURATION*100);
 8000858:	4b73      	ldr	r3, [pc, #460]	; (8000a28 <fsm_manual_run+0x2a0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2264      	movs	r2, #100	; 0x64
 800085e:	fb02 f303 	mul.w	r3, r2, r3
 8000862:	4619      	mov	r1, r3
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fd53 	bl	8001310 <setTimer>
					LED_STATE[1]= RED_STATE;
 800086a:	4b6e      	ldr	r3, [pc, #440]	; (8000a24 <fsm_manual_run+0x29c>)
 800086c:	2202      	movs	r2, #2
 800086e:	605a      	str	r2, [r3, #4]
					setTimer(1, RED_DURATION*100);
 8000870:	4b68      	ldr	r3, [pc, #416]	; (8000a14 <fsm_manual_run+0x28c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2264      	movs	r2, #100	; 0x64
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	4619      	mov	r1, r3
 800087c:	2001      	movs	r0, #1
 800087e:	f000 fd47 	bl	8001310 <setTimer>
					if(PEDESTRIAN_MODE){
 8000882:	4b67      	ldr	r3, [pc, #412]	; (8000a20 <fsm_manual_run+0x298>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <fsm_manual_run+0x108>
						setRed(2);
 800088a:	2002      	movs	r0, #2
 800088c:	f000 fe44 	bl	8001518 <setRed>
					}
				}
			}
//			Active pedestrian
			if(isButtonPressed(3) == 1){
 8000890:	2003      	movs	r0, #3
 8000892:	f7ff fd0b 	bl	80002ac <isButtonPressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d10b      	bne.n	80008b4 <fsm_manual_run+0x12c>
				PEDESTRIAN_MODE = 1;
 800089c:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <fsm_manual_run+0x298>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
				setTimer(3, PEDESTRIAN_DURATION*100);
 80008a2:	4b62      	ldr	r3, [pc, #392]	; (8000a2c <fsm_manual_run+0x2a4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2264      	movs	r2, #100	; 0x64
 80008a8:	fb02 f303 	mul.w	r3, r2, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	2003      	movs	r0, #3
 80008b0:	f000 fd2e 	bl	8001310 <setTimer>
			//	Active Buzzer
//				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, SET);
			}
			if(isTimerOn(3)){
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 fd8f 	bl	80013d8 <isTimerOn>
//				PEDESTRIAN_MODE=0;
//				setTrafficLightDefault(2);
//				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, RESET);
			}
			break;
 80008ba:	e15a      	b.n	8000b72 <fsm_manual_run+0x3ea>
		case MODE_2:
			displayDuration(2, tempDuration);
 80008bc:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <fsm_manual_run+0x290>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff ff50 	bl	8000768 <displayDuration>
			if (isButtonPressed(0) == 1){
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fcef 	bl	80002ac <isButtonPressed>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d106      	bne.n	80008e2 <fsm_manual_run+0x15a>
				tempDuration = YELLOW_DURATION;
 80008d4:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <fsm_manual_run+0x2a8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a4f      	ldr	r2, [pc, #316]	; (8000a18 <fsm_manual_run+0x290>)
 80008da:	6013      	str	r3, [r2, #0]
				changeMode(MODE_3);
 80008dc:	200d      	movs	r0, #13
 80008de:	f7ff ff2b 	bl	8000738 <changeMode>
			}
			if (isButtonPressed(1) == 1){
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fce2 	bl	80002ac <isButtonPressed>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d112      	bne.n	8000914 <fsm_manual_run+0x18c>
				tempDuration++;
 80008ee:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <fsm_manual_run+0x290>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a48      	ldr	r2, [pc, #288]	; (8000a18 <fsm_manual_run+0x290>)
 80008f6:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 80008f8:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <fsm_manual_run+0x290>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <fsm_manual_run+0x2ac>)
 80008fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000902:	1159      	asrs	r1, r3, #5
 8000904:	17d3      	asrs	r3, r2, #31
 8000906:	1acb      	subs	r3, r1, r3
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <fsm_manual_run+0x290>)
 8000912:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(2) == 1){
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fcc9 	bl	80002ac <isButtonPressed>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d103      	bne.n	8000928 <fsm_manual_run+0x1a0>
				RED_DURATION = tempDuration;
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <fsm_manual_run+0x290>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a3b      	ldr	r2, [pc, #236]	; (8000a14 <fsm_manual_run+0x28c>)
 8000926:	6013      	str	r3, [r2, #0]
			}
			if (isTimerOn(2) == 1){
 8000928:	2002      	movs	r0, #2
 800092a:	f000 fd55 	bl	80013d8 <isTimerOn>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	f040 8119 	bne.w	8000b68 <fsm_manual_run+0x3e0>
//				HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
//				HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	483f      	ldr	r0, [pc, #252]	; (8000a38 <fsm_manual_run+0x2b0>)
 800093c:	f001 f9d3 	bl	8001ce6 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000946:	483c      	ldr	r0, [pc, #240]	; (8000a38 <fsm_manual_run+0x2b0>)
 8000948:	f001 f9b5 	bl	8001cb6 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 800094c:	2101      	movs	r1, #1
 800094e:	483b      	ldr	r0, [pc, #236]	; (8000a3c <fsm_manual_run+0x2b4>)
 8000950:	f001 f9c9 	bl	8001ce6 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2110      	movs	r1, #16
 8000958:	4830      	ldr	r0, [pc, #192]	; (8000a1c <fsm_manual_run+0x294>)
 800095a:	f001 f9ac 	bl	8001cb6 <HAL_GPIO_WritePin>
				setTimer(2, 10);
 800095e:	210a      	movs	r1, #10
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fcd5 	bl	8001310 <setTimer>
			}
			break;
 8000966:	e0ff      	b.n	8000b68 <fsm_manual_run+0x3e0>
		case MODE_3:
			displayDuration(3, tempDuration);
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <fsm_manual_run+0x290>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	2003      	movs	r0, #3
 8000970:	f7ff fefa 	bl	8000768 <displayDuration>
			if (isButtonPressed(0) == 1){
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fc99 	bl	80002ac <isButtonPressed>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d106      	bne.n	800098e <fsm_manual_run+0x206>
				tempDuration = GREEN_DURATION;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <fsm_manual_run+0x2a0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <fsm_manual_run+0x290>)
 8000986:	6013      	str	r3, [r2, #0]
				changeMode(MODE_4);
 8000988:	200e      	movs	r0, #14
 800098a:	f7ff fed5 	bl	8000738 <changeMode>
			}
			if (isButtonPressed(1) == 1){
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff fc8c 	bl	80002ac <isButtonPressed>
 8000994:	4603      	mov	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d112      	bne.n	80009c0 <fsm_manual_run+0x238>
				tempDuration++;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <fsm_manual_run+0x290>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <fsm_manual_run+0x290>)
 80009a2:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <fsm_manual_run+0x290>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <fsm_manual_run+0x2ac>)
 80009aa:	fb83 1302 	smull	r1, r3, r3, r2
 80009ae:	1159      	asrs	r1, r3, #5
 80009b0:	17d3      	asrs	r3, r2, #31
 80009b2:	1acb      	subs	r3, r1, r3
 80009b4:	2164      	movs	r1, #100	; 0x64
 80009b6:	fb01 f303 	mul.w	r3, r1, r3
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <fsm_manual_run+0x290>)
 80009be:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(2) == 1){
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff fc73 	bl	80002ac <isButtonPressed>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <fsm_manual_run+0x24c>
				YELLOW_DURATION = tempDuration;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <fsm_manual_run+0x290>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <fsm_manual_run+0x2a8>)
 80009d2:	6013      	str	r3, [r2, #0]
			}
			if (isTimerOn(2) == 1){
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 fcff 	bl	80013d8 <isTimerOn>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	f040 80c5 	bne.w	8000b6c <fsm_manual_run+0x3e4>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <fsm_manual_run+0x2b0>)
 80009e8:	f001 f97d 	bl	8001ce6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 80009ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <fsm_manual_run+0x2b0>)
 80009f2:	f001 f978 	bl	8001ce6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 80009f6:	2101      	movs	r1, #1
 80009f8:	4810      	ldr	r0, [pc, #64]	; (8000a3c <fsm_manual_run+0x2b4>)
 80009fa:	f001 f974 	bl	8001ce6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 80009fe:	2110      	movs	r1, #16
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <fsm_manual_run+0x294>)
 8000a02:	f001 f970 	bl	8001ce6 <HAL_GPIO_TogglePin>
				setTimer(2, 10);
 8000a06:	210a      	movs	r1, #10
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f000 fc81 	bl	8001310 <setTimer>
			}
			break;
 8000a0e:	e0ad      	b.n	8000b6c <fsm_manual_run+0x3e4>
 8000a10:	20000020 	.word	0x20000020
 8000a14:	20000024 	.word	0x20000024
 8000a18:	200000cc 	.word	0x200000cc
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	200000d0 	.word	0x200000d0
 8000a24:	20000018 	.word	0x20000018
 8000a28:	2000002c 	.word	0x2000002c
 8000a2c:	2000003c 	.word	0x2000003c
 8000a30:	20000028 	.word	0x20000028
 8000a34:	51eb851f 	.word	0x51eb851f
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	40010c00 	.word	0x40010c00
		case MODE_4:
			displayDuration(4, tempDuration);
 8000a40:	4b4e      	ldr	r3, [pc, #312]	; (8000b7c <fsm_manual_run+0x3f4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2004      	movs	r0, #4
 8000a48:	f7ff fe8e 	bl	8000768 <displayDuration>
			if (isButtonPressed(0) == 1){
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fc2d 	bl	80002ac <isButtonPressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d141      	bne.n	8000adc <fsm_manual_run+0x354>
				LED_STATE [0] = INIT_STATE;
 8000a58:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <fsm_manual_run+0x3f8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
				LED_STATE [1] = INIT_STATE;
 8000a5e:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <fsm_manual_run+0x3f8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
				if(RED_DURATION != YELLOW_DURATION + GREEN_DURATION || !RED_DURATION || !YELLOW_DURATION || !GREEN_DURATION){
 8000a64:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <fsm_manual_run+0x3fc>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <fsm_manual_run+0x400>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	441a      	add	r2, r3
 8000a6e:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <fsm_manual_run+0x404>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d10b      	bne.n	8000a8e <fsm_manual_run+0x306>
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <fsm_manual_run+0x404>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <fsm_manual_run+0x306>
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <fsm_manual_run+0x3fc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <fsm_manual_run+0x306>
 8000a86:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <fsm_manual_run+0x400>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10c      	bne.n	8000aa8 <fsm_manual_run+0x320>
					RED_DURATION =RED_INNIT;
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <fsm_manual_run+0x408>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a3e      	ldr	r2, [pc, #248]	; (8000b8c <fsm_manual_run+0x404>)
 8000a94:	6013      	str	r3, [r2, #0]
					YELLOW_DURATION= YELLOW_INNIT;
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <fsm_manual_run+0x40c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <fsm_manual_run+0x3fc>)
 8000a9c:	6013      	str	r3, [r2, #0]
					GREEN_DURATION = GREEN_INNIT;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <fsm_manual_run+0x410>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <fsm_manual_run+0x400>)
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e00b      	b.n	8000ac0 <fsm_manual_run+0x338>
				}
				else{
					RED_INNIT = RED_DURATION;
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <fsm_manual_run+0x404>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <fsm_manual_run+0x408>)
 8000aae:	6013      	str	r3, [r2, #0]
					YELLOW_INNIT = YELLOW_DURATION;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <fsm_manual_run+0x3fc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <fsm_manual_run+0x40c>)
 8000ab6:	6013      	str	r3, [r2, #0]
					GREEN_INNIT = GREEN_DURATION;
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <fsm_manual_run+0x400>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <fsm_manual_run+0x410>)
 8000abe:	6013      	str	r3, [r2, #0]
				}
				PEDESTRIAN_DURATION = 2 * (RED_DURATION + YELLOW_DURATION + GREEN_DURATION);
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <fsm_manual_run+0x404>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <fsm_manual_run+0x3fc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	441a      	add	r2, r3
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <fsm_manual_run+0x400>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <fsm_manual_run+0x414>)
 8000ad4:	6013      	str	r3, [r2, #0]
				changeMode(MODE_1);
 8000ad6:	200b      	movs	r0, #11
 8000ad8:	f7ff fe2e 	bl	8000738 <changeMode>
			}
			if (isButtonPressed(1) == 1){
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fbe5 	bl	80002ac <isButtonPressed>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d112      	bne.n	8000b0e <fsm_manual_run+0x386>
				tempDuration++;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <fsm_manual_run+0x3f4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <fsm_manual_run+0x3f4>)
 8000af0:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <fsm_manual_run+0x3f4>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <fsm_manual_run+0x418>)
 8000af8:	fb83 1302 	smull	r1, r3, r3, r2
 8000afc:	1159      	asrs	r1, r3, #5
 8000afe:	17d3      	asrs	r3, r2, #31
 8000b00:	1acb      	subs	r3, r1, r3
 8000b02:	2164      	movs	r1, #100	; 0x64
 8000b04:	fb01 f303 	mul.w	r3, r1, r3
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <fsm_manual_run+0x3f4>)
 8000b0c:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(2) == 1){
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fbcc 	bl	80002ac <isButtonPressed>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d103      	bne.n	8000b22 <fsm_manual_run+0x39a>
				GREEN_DURATION = tempDuration;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <fsm_manual_run+0x3f4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <fsm_manual_run+0x400>)
 8000b20:	6013      	str	r3, [r2, #0]
			}
			if (isTimerOn(2) == 1){
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 fc58 	bl	80013d8 <isTimerOn>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d120      	bne.n	8000b70 <fsm_manual_run+0x3e8>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <fsm_manual_run+0x41c>)
 8000b36:	f001 f8be 	bl	8001cb6 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 8000b3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3e:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <fsm_manual_run+0x41c>)
 8000b40:	f001 f8d1 	bl	8001ce6 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <fsm_manual_run+0x420>)
 8000b4a:	f001 f8b4 	bl	8001cb6 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4816      	ldr	r0, [pc, #88]	; (8000bac <fsm_manual_run+0x424>)
 8000b52:	f001 f8c8 	bl	8001ce6 <HAL_GPIO_TogglePin>
				setTimer(2, 10);
 8000b56:	210a      	movs	r1, #10
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f000 fbd9 	bl	8001310 <setTimer>
			}
			break;
 8000b5e:	e007      	b.n	8000b70 <fsm_manual_run+0x3e8>
		default:
			MODE=MODE_1;
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <fsm_manual_run+0x428>)
 8000b62:	220b      	movs	r2, #11
 8000b64:	601a      	str	r2, [r3, #0]
			break;
 8000b66:	e004      	b.n	8000b72 <fsm_manual_run+0x3ea>
			break;
 8000b68:	bf00      	nop
 8000b6a:	e002      	b.n	8000b72 <fsm_manual_run+0x3ea>
			break;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <fsm_manual_run+0x3ea>
			break;
 8000b70:	bf00      	nop
	}
	ped_run();
 8000b72:	f000 fa20 	bl	8000fb6 <ped_run>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000cc 	.word	0x200000cc
 8000b80:	20000018 	.word	0x20000018
 8000b84:	20000028 	.word	0x20000028
 8000b88:	2000002c 	.word	0x2000002c
 8000b8c:	20000024 	.word	0x20000024
 8000b90:	20000030 	.word	0x20000030
 8000b94:	20000034 	.word	0x20000034
 8000b98:	20000038 	.word	0x20000038
 8000b9c:	2000003c 	.word	0x2000003c
 8000ba0:	51eb851f 	.word	0x51eb851f
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	20000020 	.word	0x20000020

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fd72 	bl	80016a0 <HAL_Init>

  /* USER CODE BEGIN Init */
timerInnit();
 8000bbc:	f000 fba0 	bl	8001300 <timerInnit>
buttonInnit();
 8000bc0:	f7ff fb6c 	bl	800029c <buttonInnit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc4:	f000 f816 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc8:	f000 f946 	bl	8000e58 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bcc:	f000 f854 	bl	8000c78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bd0:	f000 f8a0 	bl	8000d14 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000bd4:	f000 f916 	bl	8000e04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <main+0x38>)
 8000bda:	f001 fcfb 	bl	80025d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <main+0x3c>)
 8000be2:	f001 fda1 	bl	8002728 <HAL_TIM_PWM_Start>
//	  if (index > 3) index =0;
//	  if(isTimerOn(0)){
//		  test(index++);
//		  setTimer(0, 50);
//	  }
	  fsm_manual_run();
 8000be6:	f7ff fdcf 	bl	8000788 <fsm_manual_run>
 8000bea:	e7fc      	b.n	8000be6 <main+0x32>
 8000bec:	20000240 	.word	0x20000240
 8000bf0:	2000019c 	.word	0x2000019c

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b090      	sub	sp, #64	; 0x40
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2228      	movs	r2, #40	; 0x28
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fdf6 	bl	80037f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c26:	2300      	movs	r3, #0
 8000c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c2a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 f86f 	bl	8001d18 <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c40:	f000 f9b4 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c44:	230f      	movs	r3, #15
 8000c46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fada 	bl	8002218 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c6a:	f000 f99f 	bl	8000fac <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	; 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000c9e:	f240 227f 	movw	r2, #639	; 0x27f
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cbe:	4814      	ldr	r0, [pc, #80]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000cc0:	f001 fc38 	bl	8002534 <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cca:	f000 f96f 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000cdc:	f001 ff90 	bl	8002c00 <HAL_TIM_ConfigClockSource>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ce6:	f000 f961 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_TIM2_Init+0x98>)
 8000cf8:	f002 fb12 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d02:	f000 f953 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000240 	.word	0x20000240

08000d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d46:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <MX_TIM3_Init+0xec>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d4c:	f240 227f 	movw	r2, #639	; 0x27f
 8000d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d6e:	f001 fbe1 	bl	8002534 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d78:	f000 f918 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d86:	4619      	mov	r1, r3
 8000d88:	481c      	ldr	r0, [pc, #112]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d8a:	f001 ff39 	bl	8002c00 <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d94:	f000 f90a 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d98:	4818      	ldr	r0, [pc, #96]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000d9a:	f001 fc6d 	bl	8002678 <HAL_TIM_PWM_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000da4:	f000 f902 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	4619      	mov	r1, r3
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000db8:	f002 fab2 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dc2:	f000 f8f3 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc6:	2360      	movs	r3, #96	; 0x60
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000dde:	f001 fe4d 	bl	8002a7c <HAL_TIM_PWM_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000de8:	f000 f8e0 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM3_Init+0xe8>)
 8000dee:	f000 f963 	bl	80010b8 <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3738      	adds	r7, #56	; 0x38
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000019c 	.word	0x2000019c
 8000e00:	40000400 	.word	0x40000400

08000e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <MX_USART1_UART_Init+0x50>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	f002 fae0 	bl	8003400 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e46:	f000 f8b1 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001e4 	.word	0x200001e4
 8000e54:	40013800 	.word	0x40013800

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a44      	ldr	r2, [pc, #272]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a38      	ldr	r2, [pc, #224]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_GPIO_Init+0x12c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRAFFIC_LIGHT_2_1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2130      	movs	r1, #48	; 0x30
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <MX_GPIO_Init+0x130>)
 8000ed2:	f000 fef0 	bl	8001cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRAFFIC_LIGHT_2_0_Pin|WALKER_LIGHT_1_Pin|WALKER_LIGHT_0_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f240 3101 	movw	r1, #769	; 0x301
 8000edc:	482b      	ldr	r0, [pc, #172]	; (8000f8c <MX_GPIO_Init+0x134>)
 8000ede:	f000 feea 	bl	8001cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRAFFIC_LIGHT_1_0_Pin|TRAFFIC_LIGHT_1_1_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ee8:	4829      	ldr	r0, [pc, #164]	; (8000f90 <MX_GPIO_Init+0x138>)
 8000eea:	f000 fee4 	bl	8001cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WALKER_BUTTON_Pin */
  GPIO_InitStruct.Pin = WALKER_BUTTON_Pin;
 8000eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WALKER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4823      	ldr	r0, [pc, #140]	; (8000f90 <MX_GPIO_Init+0x138>)
 8000f04:	f000 fd3c 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_1_Pin;
 8000f08:	f240 2306 	movw	r3, #518	; 0x206
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x130>)
 8000f1e:	f000 fd2f 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_2_1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_2_1_Pin|LED2_Pin;
 8000f22:	2330      	movs	r3, #48	; 0x30
 8000f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <MX_GPIO_Init+0x130>)
 8000f3a:	f000 fd21 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_2_0_Pin WALKER_LIGHT_1_Pin WALKER_LIGHT_0_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_2_0_Pin|WALKER_LIGHT_1_Pin|WALKER_LIGHT_0_Pin;
 8000f3e:	f240 3301 	movw	r3, #769	; 0x301
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_GPIO_Init+0x134>)
 8000f58:	f000 fd12 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_1_0_Pin TRAFFIC_LIGHT_1_1_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_1_0_Pin|TRAFFIC_LIGHT_1_1_Pin;
 8000f5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4619      	mov	r1, r3
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_GPIO_Init+0x138>)
 8000f76:	f000 fd03 	bl	8001980 <HAL_GPIO_Init>

}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40011000 	.word	0x40011000

08000f94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	  timerRun();
 8000f9c:	f000 fa14 	bl	80013c8 <timerRun>
	  getKeyInput();
 8000fa0:	f7ff fac0 	bl	8000524 <getKeyInput>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>

08000fb6 <ped_run>:
 *  Created on: Dec 5, 2023
 *      Author: MY PC
 */
#include "pedestrian.h"

void ped_run(){
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
//			HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin,
//					SET);
//		}
//	}

}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <buzzer>:

void buzzer(unsigned int freq){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, freq);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <buzzer+0x1c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000019c 	.word	0x2000019c

08000fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_MspInit+0x5c>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_MspInit+0x5c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_MspInit+0x5c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_MspInit+0x5c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_MspInit+0x60>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_MspInit+0x60>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000

08001048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001058:	d114      	bne.n	8001084 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_TIM_Base_MspInit+0x68>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_TIM_Base_MspInit+0x68>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_TIM_Base_MspInit+0x68>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	201c      	movs	r0, #28
 8001078:	f000 fc4b 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800107c:	201c      	movs	r0, #28
 800107e:	f000 fc64 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001082:	e010      	b.n	80010a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_TIM_Base_MspInit+0x6c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10b      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_TIM_Base_MspInit+0x68>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_TIM_Base_MspInit+0x68>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_TIM_Base_MspInit+0x68>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40000400 	.word	0x40000400

080010b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_TIM_MspPostInit+0x58>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d117      	bne.n	8001108 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_TIM_MspPostInit+0x5c>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_TIM_MspPostInit+0x5c>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_TIM_MspPostInit+0x5c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_TIM_MspPostInit+0x60>)
 8001104:	f000 fc3c 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40000400 	.word	0x40000400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800

0800111c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <HAL_UART_MspInit+0xa4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d13d      	bne.n	80011b8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0xac>)
 8001180:	f000 fbfe 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <HAL_UART_MspInit+0xac>)
 8001198:	f000 fbf2 	bl	8001980 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_UART_MspInit+0xb0>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_UART_MspInit+0xb0>)
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40010000 	.word	0x40010000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 fa89 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM2_IRQHandler+0x10>)
 8001226:	f001 fb21 	bl	800286c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000240 	.word	0x20000240

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f002 fa9c 	bl	80037a0 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20005000 	.word	0x20005000
 8001294:	00000400 	.word	0x00000400
 8001298:	200000d4 	.word	0x200000d4
 800129c:	200002a0 	.word	0x200002a0

080012a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <Innitial_Timer>:

//Timer 0: 1 sec for LED
//Timer 2: 500 ms
//Timer

void Innitial_Timer(int i){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	if(i == 0){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10b      	bne.n	80012d2 <Innitial_Timer+0x26>
		timer[i].count =0;
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <Innitial_Timer+0x50>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2100      	movs	r1, #0
 80012c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[i].flag =1;
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <Innitial_Timer+0x50>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	2201      	movs	r2, #1
 80012ce:	605a      	str	r2, [r3, #4]
	else{
		timer[i].count =0;
		timer[i].flag =1;
		Innitial_Timer(i-1);
	}
}
 80012d0:	e00f      	b.n	80012f2 <Innitial_Timer+0x46>
		timer[i].count =0;
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <Innitial_Timer+0x50>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2100      	movs	r1, #0
 80012d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[i].flag =1;
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <Innitial_Timer+0x50>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	2201      	movs	r2, #1
 80012e6:	605a      	str	r2, [r3, #4]
		Innitial_Timer(i-1);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffdd 	bl	80012ac <Innitial_Timer>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000e0 	.word	0x200000e0

08001300 <timerInnit>:

void timerInnit(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	Innitial_Timer(NUMBER_OF_TIMER-1);
 8001304:	2004      	movs	r0, #4
 8001306:	f7ff ffd1 	bl	80012ac <Innitial_Timer>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <setTimer>:

void setTimer( unsigned int index, unsigned int count){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	if(index >= NUMBER_OF_TIMER){
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d80b      	bhi.n	8001338 <setTimer+0x28>
		return;
	}
	timer[index].count=count;
 8001320:	4908      	ldr	r1, [pc, #32]	; (8001344 <setTimer+0x34>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[index].flag=0;
 800132a:	4a06      	ldr	r2, [pc, #24]	; (8001344 <setTimer+0x34>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	e000      	b.n	800133a <setTimer+0x2a>
		return;
 8001338:	bf00      	nop
}
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200000e0 	.word	0x200000e0

08001348 <RunTimer>:
void RunTimer(int index){
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(index ==0){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <RunTimer+0x3c>
		if(timer[index].count ==0){
 8001356:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <RunTimer+0x7c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <RunTimer+0x28>
			timer[index].flag=1;
 8001362:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <RunTimer+0x7c>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	2201      	movs	r2, #1
 800136c:	605a      	str	r2, [r3, #4]
		} else {
			timer[index].count--;
		}
		RunTimer(index-1);
	}
}
 800136e:	e024      	b.n	80013ba <RunTimer+0x72>
			timer[index].count--;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <RunTimer+0x7c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <RunTimer+0x7c>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8001382:	e01a      	b.n	80013ba <RunTimer+0x72>
		if (timer[index].count == 0) {
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <RunTimer+0x7c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d106      	bne.n	800139e <RunTimer+0x56>
			timer[index].flag = 1;
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <RunTimer+0x7c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	2201      	movs	r2, #1
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	e008      	b.n	80013b0 <RunTimer+0x68>
			timer[index].count--;
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <RunTimer+0x7c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	4906      	ldr	r1, [pc, #24]	; (80013c4 <RunTimer+0x7c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		RunTimer(index-1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ffc7 	bl	8001348 <RunTimer>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000e0 	.word	0x200000e0

080013c8 <timerRun>:

void timerRun(void){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	RunTimer(NUMBER_OF_TIMER-1);
 80013cc:	2004      	movs	r0, #4
 80013ce:	f7ff ffbb 	bl	8001348 <RunTimer>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <isTimerOn>:

int isTimerOn(unsigned index){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	return timer[index].flag;
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <isTimerOn+0x1c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	685b      	ldr	r3, [r3, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	200000e0 	.word	0x200000e0

080013f8 <setTrafficLightDefault>:


// Red mean light 0 off, light 1 off
// Green mean light 0 off, light 1 on
// Amber mean light 0 on, light 1 on
void setTrafficLightDefault(int lane){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	switch(lane){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d02d      	beq.n	8001462 <setTrafficLightDefault+0x6a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	dc37      	bgt.n	800147c <setTrafficLightDefault+0x84>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <setTrafficLightDefault+0x22>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d019      	beq.n	800144c <setTrafficLightDefault+0x54>
	case 2:
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		break;
	default:
		break;
 8001418:	e030      	b.n	800147c <setTrafficLightDefault+0x84>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001420:	4819      	ldr	r0, [pc, #100]	; (8001488 <setTrafficLightDefault+0x90>)
 8001422:	f000 fc48 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <setTrafficLightDefault+0x90>)
 800142e:	f000 fc42 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <setTrafficLightDefault+0x94>)
 800143a:	f000 fc3c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	4811      	ldr	r0, [pc, #68]	; (800148c <setTrafficLightDefault+0x94>)
 8001446:	f000 fc36 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 800144a:	e018      	b.n	800147e <setTrafficLightDefault+0x86>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2101      	movs	r1, #1
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <setTrafficLightDefault+0x94>)
 8001452:	f000 fc30 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2110      	movs	r1, #16
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <setTrafficLightDefault+0x98>)
 800145c:	f000 fc2b 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 8001460:	e00d      	b.n	800147e <setTrafficLightDefault+0x86>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <setTrafficLightDefault+0x94>)
 800146a:	f000 fc24 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <setTrafficLightDefault+0x94>)
 8001476:	f000 fc1e 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 800147a:	e000      	b.n	800147e <setTrafficLightDefault+0x86>
		break;
 800147c:	bf00      	nop
	}

}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40011000 	.word	0x40011000
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40010800 	.word	0x40010800

08001494 <setGreen>:

void setGreen(int lane){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	switch (lane) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d021      	beq.n	80014e6 <setGreen+0x52>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	dc2b      	bgt.n	8001500 <setGreen+0x6c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <setGreen+0x22>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00d      	beq.n	80014d0 <setGreen+0x3c>
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
//				RESET);
		break;
 80014b4:	e024      	b.n	8001500 <setGreen+0x6c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <setGreen+0x78>)
 80014be:	f000 fbfa 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <setGreen+0x78>)
 80014ca:	f000 fbf4 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 80014ce:	e018      	b.n	8001502 <setGreen+0x6e>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 80014d0:	2200      	movs	r2, #0
 80014d2:	2101      	movs	r1, #1
 80014d4:	480e      	ldr	r0, [pc, #56]	; (8001510 <setGreen+0x7c>)
 80014d6:	f000 fbee 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 80014da:	2201      	movs	r2, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <setGreen+0x80>)
 80014e0:	f000 fbe9 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 80014e4:	e00d      	b.n	8001502 <setGreen+0x6e>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <setGreen+0x7c>)
 80014ee:	f000 fbe2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <setGreen+0x7c>)
 80014fa:	f000 fbdc 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 80014fe:	e000      	b.n	8001502 <setGreen+0x6e>
		break;
 8001500:	bf00      	nop

	}
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40011000 	.word	0x40011000
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40010800 	.word	0x40010800

08001518 <setRed>:

void setRed(int lane){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d021      	beq.n	800156a <setRed+0x52>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	dc2b      	bgt.n	8001584 <setRed+0x6c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <setRed+0x22>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d00d      	beq.n	8001554 <setRed+0x3c>
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
//				RESET);
		break;
 8001538:	e024      	b.n	8001584 <setRed+0x6c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <setRed+0x78>)
 8001542:	f000 fbb8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154c:	4810      	ldr	r0, [pc, #64]	; (8001590 <setRed+0x78>)
 800154e:	f000 fbb2 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 8001552:	e018      	b.n	8001586 <setRed+0x6e>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001554:	2201      	movs	r2, #1
 8001556:	2101      	movs	r1, #1
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <setRed+0x7c>)
 800155a:	f000 fbac 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 800155e:	2200      	movs	r2, #0
 8001560:	2110      	movs	r1, #16
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <setRed+0x80>)
 8001564:	f000 fba7 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 8001568:	e00d      	b.n	8001586 <setRed+0x6e>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <setRed+0x7c>)
 8001572:	f000 fba0 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <setRed+0x7c>)
 800157e:	f000 fb9a 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 8001582:	e000      	b.n	8001586 <setRed+0x6e>
		break;
 8001584:	bf00      	nop

	}
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40011000 	.word	0x40011000
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40010800 	.word	0x40010800

0800159c <setAmber>:

void setAmber(int lane){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	switch (lane) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <setAmber+0x16>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d00d      	beq.n	80015cc <setAmber+0x30>
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
//				RESET);
//		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
//				RESET);
		break;
 80015b0:	e017      	b.n	80015e2 <setAmber+0x46>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <setAmber+0x50>)
 80015ba:	f000 fb7c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <setAmber+0x50>)
 80015c6:	f000 fb76 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 80015ca:	e00a      	b.n	80015e2 <setAmber+0x46>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 80015cc:	2201      	movs	r2, #1
 80015ce:	2101      	movs	r1, #1
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <setAmber+0x54>)
 80015d2:	f000 fb70 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 80015d6:	2201      	movs	r2, #1
 80015d8:	2110      	movs	r1, #16
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <setAmber+0x58>)
 80015dc:	f000 fb6b 	bl	8001cb6 <HAL_GPIO_WritePin>
		break;
 80015e0:	bf00      	nop

	}
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	40010800 	.word	0x40010800

080015f8 <Display>:
 *  Created on: Dec 8, 2023
 *      Author: MY PC
 */
#include "transfer.h"

void Display(int n){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(n < 10){
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b09      	cmp	r3, #9
 8001604:	dc0d      	bgt.n	8001622 <Display+0x2a>
		HAL_UART_Transmit(&huart1, ( void *) info1, sprintf(info1, "!7SEG:0%d#", n), 1000);
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	490e      	ldr	r1, [pc, #56]	; (8001644 <Display+0x4c>)
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <Display+0x50>)
 800160c:	f002 f8fa 	bl	8003804 <siprintf>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001618:	490b      	ldr	r1, [pc, #44]	; (8001648 <Display+0x50>)
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <Display+0x54>)
 800161c:	f001 ff40 	bl	80034a0 <HAL_UART_Transmit>
	}
	else{
		HAL_UART_Transmit(&huart1, ( void *) info1, sprintf(info1, "!7SEG:%d#", n), 1000);
	}
}
 8001620:	e00c      	b.n	800163c <Display+0x44>
		HAL_UART_Transmit(&huart1, ( void *) info1, sprintf(info1, "!7SEG:%d#", n), 1000);
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	490a      	ldr	r1, [pc, #40]	; (8001650 <Display+0x58>)
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <Display+0x50>)
 8001628:	f002 f8ec 	bl	8003804 <siprintf>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	4904      	ldr	r1, [pc, #16]	; (8001648 <Display+0x50>)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <Display+0x54>)
 8001638:	f001 ff32 	bl	80034a0 <HAL_UART_Transmit>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08004090 	.word	0x08004090
 8001648:	2000022c 	.word	0x2000022c
 800164c:	200001e4 	.word	0x200001e4
 8001650:	0800409c 	.word	0x0800409c

08001654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff fe24 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800165a:	490c      	ldr	r1, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001670:	4c09      	ldr	r4, [pc, #36]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f002 f895 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f7ff fa97 	bl	8000bb4 <main>
  bx lr
 8001686:	4770      	bx	lr
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001690:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 8001694:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001698:	2000029c 	.word	0x2000029c

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f923 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fc92 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f93b 	bl	8001966 <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f903 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000040 	.word	0x20000040
 8001724:	20000048 	.word	0x20000048
 8001728:	20000044 	.word	0x20000044

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_IncTick+0x20>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000048 	.word	0x20000048
 800174c:	20000288 	.word	0x20000288

08001750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_GetTick+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000288 	.word	0x20000288

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <__NVIC_EnableIRQ+0x34>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff90 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff2d 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff42 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff35 	bl	80017c8 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e169      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8158 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a9a      	ldr	r2, [pc, #616]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a96      	ldr	r2, [pc, #600]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a94      	ldr	r2, [pc, #592]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a90      	ldr	r2, [pc, #576]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a79      	ldr	r2, [pc, #484]	; (8001c34 <HAL_GPIO_Init+0x2b4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80b1 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1e8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7e:	492f      	ldr	r1, [pc, #188]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	492c      	ldr	r1, [pc, #176]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4928      	ldr	r1, [pc, #160]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	491e      	ldr	r1, [pc, #120]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4914      	ldr	r1, [pc, #80]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d021      	beq.n	8001c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e021      	b.n	8001c62 <HAL_GPIO_Init+0x2e2>
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400
 8001c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4909      	ldr	r1, [pc, #36]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae8e 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	372c      	adds	r7, #44	; 0x2c
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e001      	b.n	8001caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc6:	787b      	ldrb	r3, [r7, #1]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	041a      	lsls	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf8:	887a      	ldrh	r2, [r7, #2]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	400b      	ands	r3, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e26c      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d168      	bne.n	8001e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e246      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x76>
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7f      	ldr	r2, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbc>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fcac 	bl	8001750 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fca8 	bl	8001750 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1fa      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe4>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc98 	bl	8001750 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fc94 	bl	8001750 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1e6      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x10c>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1ba      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fc4d 	bl	8001750 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fc49 	bl	8001750 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e19b      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc2c 	bl	8001750 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff fc28 	bl	8001750 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e17a      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fc0c 	bl	8001750 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc08 	bl	8001750 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e15a      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 facc 	bl	80024f8 <RCC_Delay>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fbf2 	bl	8001750 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff fbee 	bl	8001750 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e140      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b9e      	ldr	r3, [pc, #632]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a6 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b97      	ldr	r3, [pc, #604]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b94      	ldr	r3, [pc, #592]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a93      	ldr	r2, [pc, #588]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b91      	ldr	r3, [pc, #580]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a8a      	ldr	r2, [pc, #552]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fbaf 	bl	8001750 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7ff fbab 	bl	8001750 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0fd      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 800201c:	4b7b      	ldr	r3, [pc, #492]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a7a      	ldr	r2, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x334>
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x356>
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a6c      	ldr	r2, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a63      	ldr	r2, [pc, #396]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff fb5f 	bl	8001750 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fb5b 	bl	8001750 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0ab      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b57      	ldr	r3, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x37e>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff fb49 	bl	8001750 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fb45 	bl	8001750 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e095      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b48      	ldr	r3, [pc, #288]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a47      	ldr	r2, [pc, #284]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8081 	beq.w	8002202 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b42      	ldr	r3, [pc, #264]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d061      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d146      	bne.n	80021a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <HAL_RCC_OscConfig+0x4fc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fb19 	bl	8001750 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fb15 	bl	8001750 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e067      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214a:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	492d      	ldr	r1, [pc, #180]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a19      	ldr	r1, [r3, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	430b      	orrs	r3, r1
 800216e:	4927      	ldr	r1, [pc, #156]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x4fc>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fae9 	bl	8001750 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff fae5 	bl	8001750 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e037      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
 80021a0:	e02f      	b.n	8002202 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_RCC_OscConfig+0x4fc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fad2 	bl	8001750 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff face 	bl	8001750 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e020      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x498>
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060

08002218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0d0      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b67      	ldr	r3, [pc, #412]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4965      	ldr	r1, [pc, #404]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0b8      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a52      	ldr	r2, [pc, #328]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	494d      	ldr	r1, [pc, #308]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d040      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d115      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e07f      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e073      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06b      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4936      	ldr	r1, [pc, #216]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7ff fa22 	bl	8001750 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff fa1e 	bl	8001750 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e053      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d210      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4922      	ldr	r1, [pc, #136]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e032      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4916      	ldr	r1, [pc, #88]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	490e      	ldr	r1, [pc, #56]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a6:	f000 f821 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	490a      	ldr	r1, [pc, #40]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	5ccb      	ldrb	r3, [r1, r3]
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1cc>)
 80023c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1d0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f980 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080040a8 	.word	0x080040a8
 80023e4:	20000040 	.word	0x20000040
 80023e8:	20000044 	.word	0x20000044

080023ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_RCC_GetSysClockFreq+0x94>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x30>
 8002416:	2b08      	cmp	r3, #8
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x36>
 800241a:	e027      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_GetSysClockFreq+0x98>)
 800241e:	613b      	str	r3, [r7, #16]
      break;
 8002420:	e027      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	0c9b      	lsrs	r3, r3, #18
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_RCC_GetSysClockFreq+0x9c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d010      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_RCC_GetSysClockFreq+0x94>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0c5b      	lsrs	r3, r3, #17
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_RCC_GetSysClockFreq+0x98>)
 800244e:	fb02 f203 	mul.w	r2, r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e004      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	613b      	str	r3, [r7, #16]
      break;
 800246a:	e002      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetSysClockFreq+0x98>)
 800246e:	613b      	str	r3, [r7, #16]
      break;
 8002470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002472:	693b      	ldr	r3, [r7, #16]
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	007a1200 	.word	0x007a1200
 8002488:	080040c0 	.word	0x080040c0
 800248c:	080040d0 	.word	0x080040d0
 8002490:	003d0900 	.word	0x003d0900

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	20000040 	.word	0x20000040

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff2 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080040b8 	.word	0x080040b8

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffde 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	0adb      	lsrs	r3, r3, #11
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	080040b8 	.word	0x080040b8

080024f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <RCC_Delay+0x34>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <RCC_Delay+0x38>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0a5b      	lsrs	r3, r3, #9
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002514:	bf00      	nop
  }
  while (Delay --);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e5a      	subs	r2, r3, #1
 800251a:	60fa      	str	r2, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f9      	bne.n	8002514 <RCC_Delay+0x1c>
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000040 	.word	0x20000040
 8002530:	10624dd3 	.word	0x10624dd3

08002534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e041      	b.n	80025ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fd74 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3304      	adds	r3, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f000 fc30 	bl	8002dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d001      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e03a      	b.n	8002662 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_TIM_Base_Start_IT+0x98>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x58>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002616:	d009      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x58>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <HAL_TIM_Base_Start_IT+0x9c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x58>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <HAL_TIM_Base_Start_IT+0xa0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d010      	beq.n	8002660 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	e007      	b.n	8002660 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800

08002678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e041      	b.n	800270e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f839 	bl	8002716 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 fb8e 	bl	8002dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_TIM_PWM_Start+0x24>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e022      	b.n	8002792 <HAL_TIM_PWM_Start+0x6a>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d109      	bne.n	8002766 <HAL_TIM_PWM_Start+0x3e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	bf14      	ite	ne
 800275e:	2301      	movne	r3, #1
 8002760:	2300      	moveq	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e015      	b.n	8002792 <HAL_TIM_PWM_Start+0x6a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d109      	bne.n	8002780 <HAL_TIM_PWM_Start+0x58>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e008      	b.n	8002792 <HAL_TIM_PWM_Start+0x6a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e05e      	b.n	8002858 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0x82>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a8:	e013      	b.n	80027d2 <HAL_TIM_PWM_Start+0xaa>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_PWM_Start+0x92>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b8:	e00b      	b.n	80027d2 <HAL_TIM_PWM_Start+0xaa>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d104      	bne.n	80027ca <HAL_TIM_PWM_Start+0xa2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c8:	e003      	b.n	80027d2 <HAL_TIM_PWM_Start+0xaa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2201      	movs	r2, #1
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fd7c 	bl	80032d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_TIM_PWM_Start+0x138>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d107      	bne.n	80027fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_TIM_PWM_Start+0x138>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_TIM_PWM_Start+0xfa>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d009      	beq.n	8002822 <HAL_TIM_PWM_Start+0xfa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_TIM_PWM_Start+0x13c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_TIM_PWM_Start+0xfa>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_TIM_PWM_Start+0x140>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d111      	bne.n	8002846 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d010      	beq.n	8002856 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	e007      	b.n	8002856 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40012c00 	.word	0x40012c00
 8002864:	40000400 	.word	0x40000400
 8002868:	40000800 	.word	0x40000800

0800286c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0202 	mvn.w	r2, #2
 8002898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa76 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa69 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fa78 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0204 	mvn.w	r2, #4
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa4c 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa3f 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa4e 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b08      	cmp	r3, #8
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b08      	cmp	r3, #8
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0208 	mvn.w	r2, #8
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2204      	movs	r2, #4
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa22 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa15 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fa24 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b10      	cmp	r3, #16
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b10      	cmp	r3, #16
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0210 	mvn.w	r2, #16
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2208      	movs	r2, #8
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f9f8 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f9eb 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f9fa 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d107      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0201 	mvn.w	r2, #1
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fad2 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d10e      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d107      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fce9 	bl	80033ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d107      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9be 	bl	8002dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d10e      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d107      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0220 	mvn.w	r2, #32
 8002a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fcb4 	bl	80033dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0ae      	b.n	8002bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	f200 809f 	bhi.w	8002be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ae5 	.word	0x08002ae5
 8002ab4:	08002be9 	.word	0x08002be9
 8002ab8:	08002be9 	.word	0x08002be9
 8002abc:	08002be9 	.word	0x08002be9
 8002ac0:	08002b25 	.word	0x08002b25
 8002ac4:	08002be9 	.word	0x08002be9
 8002ac8:	08002be9 	.word	0x08002be9
 8002acc:	08002be9 	.word	0x08002be9
 8002ad0:	08002b67 	.word	0x08002b67
 8002ad4:	08002be9 	.word	0x08002be9
 8002ad8:	08002be9 	.word	0x08002be9
 8002adc:	08002be9 	.word	0x08002be9
 8002ae0:	08002ba7 	.word	0x08002ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f9d6 	bl	8002e9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0208 	orr.w	r2, r2, #8
 8002afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6999      	ldr	r1, [r3, #24]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	619a      	str	r2, [r3, #24]
      break;
 8002b22:	e064      	b.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fa1c 	bl	8002f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	021a      	lsls	r2, r3, #8
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	619a      	str	r2, [r3, #24]
      break;
 8002b64:	e043      	b.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fa65 	bl	800303c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0208 	orr.w	r2, r2, #8
 8002b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69d9      	ldr	r1, [r3, #28]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
      break;
 8002ba4:	e023      	b.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 faaf 	bl	8003110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69d9      	ldr	r1, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	61da      	str	r2, [r3, #28]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	75fb      	strb	r3, [r7, #23]
      break;
 8002bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_ConfigClockSource+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0b4      	b.n	8002d86 <HAL_TIM_ConfigClockSource+0x186>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c54:	d03e      	beq.n	8002cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5a:	f200 8087 	bhi.w	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	f000 8086 	beq.w	8002d72 <HAL_TIM_ConfigClockSource+0x172>
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	d87f      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b70      	cmp	r3, #112	; 0x70
 8002c6e:	d01a      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8002c70:	2b70      	cmp	r3, #112	; 0x70
 8002c72:	d87b      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b60      	cmp	r3, #96	; 0x60
 8002c76:	d050      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x11a>
 8002c78:	2b60      	cmp	r3, #96	; 0x60
 8002c7a:	d877      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b50      	cmp	r3, #80	; 0x50
 8002c7e:	d03c      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0xfa>
 8002c80:	2b50      	cmp	r3, #80	; 0x50
 8002c82:	d873      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d058      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x13a>
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d86f      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b30      	cmp	r3, #48	; 0x30
 8002c8e:	d064      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x15a>
 8002c90:	2b30      	cmp	r3, #48	; 0x30
 8002c92:	d86b      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d060      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d867      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d05c      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d05a      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ca4:	e062      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f000 faf0 	bl	800329a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	609a      	str	r2, [r3, #8]
      break;
 8002cd2:	e04f      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f000 fad9 	bl	800329a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cf6:	609a      	str	r2, [r3, #8]
      break;
 8002cf8:	e03c      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f000 fa50 	bl	80031ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2150      	movs	r1, #80	; 0x50
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 faa7 	bl	8003266 <TIM_ITRx_SetConfig>
      break;
 8002d18:	e02c      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f000 fa6e 	bl	8003208 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2160      	movs	r1, #96	; 0x60
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fa97 	bl	8003266 <TIM_ITRx_SetConfig>
      break;
 8002d38:	e01c      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f000 fa30 	bl	80031ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2140      	movs	r1, #64	; 0x40
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fa87 	bl	8003266 <TIM_ITRx_SetConfig>
      break;
 8002d58:	e00c      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f000 fa7e 	bl	8003266 <TIM_ITRx_SetConfig>
      break;
 8002d6a:	e003      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e000      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
	...

08002dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <TIM_Base_SetConfig+0xb8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0x30>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x30>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <TIM_Base_SetConfig+0xbc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x30>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <TIM_Base_SetConfig+0xc0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <TIM_Base_SetConfig+0xb8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <TIM_Base_SetConfig+0x62>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d007      	beq.n	8002e3a <TIM_Base_SetConfig+0x62>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <TIM_Base_SetConfig+0xbc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_Base_SetConfig+0x62>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <TIM_Base_SetConfig+0xc0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <TIM_Base_SetConfig+0xb8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d103      	bne.n	8002e80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	615a      	str	r2, [r3, #20]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800

08002e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f023 0201 	bic.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 0302 	bic.w	r3, r3, #2
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <TIM_OC1_SetConfig+0xc8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10c      	bne.n	8002f12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0308 	bic.w	r3, r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <TIM_OC1_SetConfig+0xc8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d111      	bne.n	8002f3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	621a      	str	r2, [r3, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00

08002f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0210 	bic.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0320 	bic.w	r3, r3, #32
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <TIM_OC2_SetConfig+0xd0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10d      	bne.n	8002fe4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a14      	ldr	r2, [pc, #80]	; (8003038 <TIM_OC2_SetConfig+0xd0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d113      	bne.n	8003014 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00

0800303c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <TIM_OC3_SetConfig+0xd0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10d      	bne.n	80030b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <TIM_OC3_SetConfig+0xd0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00

08003110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <TIM_OC4_SetConfig+0x98>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d109      	bne.n	8003184 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	621a      	str	r2, [r3, #32]
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40012c00 	.word	0x40012c00

080031ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f023 0201 	bic.w	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 030a 	bic.w	r3, r3, #10
 80031e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0210 	bic.w	r2, r3, #16
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	031b      	lsls	r3, r3, #12
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003244:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	621a      	str	r2, [r3, #32]
}
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	f043 0307 	orr.w	r3, r3, #7
 8003288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800329a:	b480      	push	{r7}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	021a      	lsls	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	431a      	orrs	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	609a      	str	r2, [r3, #8]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2201      	movs	r2, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	431a      	orrs	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e046      	b.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d009      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10c      	bne.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800

080033dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e042      	b.n	8003498 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fe78 	bl	800111c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f91d 	bl	8003684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d16d      	bne.n	800359c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Transmit+0x2c>
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e066      	b.n	800359e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034de:	f7fe f937 	bl	8001750 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d108      	bne.n	800350c <HAL_UART_Transmit+0x6c>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e003      	b.n	8003514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003514:	e02a      	b.n	800356c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	2180      	movs	r1, #128	; 0x80
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f840 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e036      	b.n	800359e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3302      	adds	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e007      	b.n	800355e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	3301      	adds	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1cf      	bne.n	8003516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f810 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e006      	b.n	800359e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b090      	sub	sp, #64	; 0x40
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	e050      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d04c      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c6:	f7fe f8c3 	bl	8001750 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d241      	bcs.n	800365a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f6:	637a      	str	r2, [r7, #52]	; 0x34
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	613b      	str	r3, [r7, #16]
   return(result);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3314      	adds	r3, #20
 8003628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362a:	623a      	str	r2, [r7, #32]
 800362c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	69f9      	ldr	r1, [r7, #28]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	61bb      	str	r3, [r7, #24]
   return(result);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d09f      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3740      	adds	r7, #64	; 0x40
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036be:	f023 030c 	bic.w	r3, r3, #12
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <UART_SetConfig+0x114>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d103      	bne.n	80036f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7fe fef0 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	e002      	b.n	80036fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fed8 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80036f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <UART_SetConfig+0x118>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	0119      	lsls	r1, r3, #4
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <UART_SetConfig+0x118>)
 8003732:	fba3 0302 	umull	r0, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2064      	movs	r0, #100	; 0x64
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	3332      	adds	r3, #50	; 0x32
 8003744:	4a15      	ldr	r2, [pc, #84]	; (800379c <UART_SetConfig+0x118>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003750:	4419      	add	r1, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f2f3 	udiv	r2, r2, r3
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <UART_SetConfig+0x118>)
 800376a:	fba3 0302 	umull	r0, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2064      	movs	r0, #100	; 0x64
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <UART_SetConfig+0x118>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	440a      	add	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40013800 	.word	0x40013800
 800379c:	51eb851f 	.word	0x51eb851f

080037a0 <__errno>:
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <__errno+0x8>)
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	2000004c 	.word	0x2000004c

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	2600      	movs	r6, #0
 80037b0:	4d0c      	ldr	r5, [pc, #48]	; (80037e4 <__libc_init_array+0x38>)
 80037b2:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b4:	1b64      	subs	r4, r4, r5
 80037b6:	10a4      	asrs	r4, r4, #2
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	f000 fc5c 	bl	8004078 <_init>
 80037c0:	2600      	movs	r6, #0
 80037c2:	4d0a      	ldr	r5, [pc, #40]	; (80037ec <__libc_init_array+0x40>)
 80037c4:	4c0a      	ldr	r4, [pc, #40]	; (80037f0 <__libc_init_array+0x44>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f855 3b04 	ldr.w	r3, [r5], #4
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	08004108 	.word	0x08004108
 80037e8:	08004108 	.word	0x08004108
 80037ec:	08004108 	.word	0x08004108
 80037f0:	0800410c 	.word	0x0800410c

080037f4 <memset>:
 80037f4:	4603      	mov	r3, r0
 80037f6:	4402      	add	r2, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <siprintf>:
 8003804:	b40e      	push	{r1, r2, r3}
 8003806:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800380a:	b500      	push	{lr}
 800380c:	b09c      	sub	sp, #112	; 0x70
 800380e:	ab1d      	add	r3, sp, #116	; 0x74
 8003810:	9002      	str	r0, [sp, #8]
 8003812:	9006      	str	r0, [sp, #24]
 8003814:	9107      	str	r1, [sp, #28]
 8003816:	9104      	str	r1, [sp, #16]
 8003818:	4808      	ldr	r0, [pc, #32]	; (800383c <siprintf+0x38>)
 800381a:	4909      	ldr	r1, [pc, #36]	; (8003840 <siprintf+0x3c>)
 800381c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003820:	9105      	str	r1, [sp, #20]
 8003822:	6800      	ldr	r0, [r0, #0]
 8003824:	a902      	add	r1, sp, #8
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	f000 f868 	bl	80038fc <_svfiprintf_r>
 800382c:	2200      	movs	r2, #0
 800382e:	9b02      	ldr	r3, [sp, #8]
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	b01c      	add	sp, #112	; 0x70
 8003834:	f85d eb04 	ldr.w	lr, [sp], #4
 8003838:	b003      	add	sp, #12
 800383a:	4770      	bx	lr
 800383c:	2000004c 	.word	0x2000004c
 8003840:	ffff0208 	.word	0xffff0208

08003844 <__ssputs_r>:
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	688e      	ldr	r6, [r1, #8]
 800384a:	4682      	mov	sl, r0
 800384c:	429e      	cmp	r6, r3
 800384e:	460c      	mov	r4, r1
 8003850:	4690      	mov	r8, r2
 8003852:	461f      	mov	r7, r3
 8003854:	d838      	bhi.n	80038c8 <__ssputs_r+0x84>
 8003856:	898a      	ldrh	r2, [r1, #12]
 8003858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800385c:	d032      	beq.n	80038c4 <__ssputs_r+0x80>
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	6909      	ldr	r1, [r1, #16]
 8003862:	3301      	adds	r3, #1
 8003864:	eba5 0901 	sub.w	r9, r5, r1
 8003868:	6965      	ldr	r5, [r4, #20]
 800386a:	444b      	add	r3, r9
 800386c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003870:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003874:	106d      	asrs	r5, r5, #1
 8003876:	429d      	cmp	r5, r3
 8003878:	bf38      	it	cc
 800387a:	461d      	movcc	r5, r3
 800387c:	0553      	lsls	r3, r2, #21
 800387e:	d531      	bpl.n	80038e4 <__ssputs_r+0xa0>
 8003880:	4629      	mov	r1, r5
 8003882:	f000 fb53 	bl	8003f2c <_malloc_r>
 8003886:	4606      	mov	r6, r0
 8003888:	b950      	cbnz	r0, 80038a0 <__ssputs_r+0x5c>
 800388a:	230c      	movs	r3, #12
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f8ca 3000 	str.w	r3, [sl]
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a0:	464a      	mov	r2, r9
 80038a2:	6921      	ldr	r1, [r4, #16]
 80038a4:	f000 face 	bl	8003e44 <memcpy>
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	6126      	str	r6, [r4, #16]
 80038b6:	444e      	add	r6, r9
 80038b8:	6026      	str	r6, [r4, #0]
 80038ba:	463e      	mov	r6, r7
 80038bc:	6165      	str	r5, [r4, #20]
 80038be:	eba5 0509 	sub.w	r5, r5, r9
 80038c2:	60a5      	str	r5, [r4, #8]
 80038c4:	42be      	cmp	r6, r7
 80038c6:	d900      	bls.n	80038ca <__ssputs_r+0x86>
 80038c8:	463e      	mov	r6, r7
 80038ca:	4632      	mov	r2, r6
 80038cc:	4641      	mov	r1, r8
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	f000 fac6 	bl	8003e60 <memmove>
 80038d4:	68a3      	ldr	r3, [r4, #8]
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	1b9b      	subs	r3, r3, r6
 80038da:	4432      	add	r2, r6
 80038dc:	2000      	movs	r0, #0
 80038de:	60a3      	str	r3, [r4, #8]
 80038e0:	6022      	str	r2, [r4, #0]
 80038e2:	e7db      	b.n	800389c <__ssputs_r+0x58>
 80038e4:	462a      	mov	r2, r5
 80038e6:	f000 fb7b 	bl	8003fe0 <_realloc_r>
 80038ea:	4606      	mov	r6, r0
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1e1      	bne.n	80038b4 <__ssputs_r+0x70>
 80038f0:	4650      	mov	r0, sl
 80038f2:	6921      	ldr	r1, [r4, #16]
 80038f4:	f000 face 	bl	8003e94 <_free_r>
 80038f8:	e7c7      	b.n	800388a <__ssputs_r+0x46>
	...

080038fc <_svfiprintf_r>:
 80038fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003900:	4698      	mov	r8, r3
 8003902:	898b      	ldrh	r3, [r1, #12]
 8003904:	4607      	mov	r7, r0
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	460d      	mov	r5, r1
 800390a:	4614      	mov	r4, r2
 800390c:	b09d      	sub	sp, #116	; 0x74
 800390e:	d50e      	bpl.n	800392e <_svfiprintf_r+0x32>
 8003910:	690b      	ldr	r3, [r1, #16]
 8003912:	b963      	cbnz	r3, 800392e <_svfiprintf_r+0x32>
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	f000 fb09 	bl	8003f2c <_malloc_r>
 800391a:	6028      	str	r0, [r5, #0]
 800391c:	6128      	str	r0, [r5, #16]
 800391e:	b920      	cbnz	r0, 800392a <_svfiprintf_r+0x2e>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e0d1      	b.n	8003ace <_svfiprintf_r+0x1d2>
 800392a:	2340      	movs	r3, #64	; 0x40
 800392c:	616b      	str	r3, [r5, #20]
 800392e:	2300      	movs	r3, #0
 8003930:	9309      	str	r3, [sp, #36]	; 0x24
 8003932:	2320      	movs	r3, #32
 8003934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003938:	2330      	movs	r3, #48	; 0x30
 800393a:	f04f 0901 	mov.w	r9, #1
 800393e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003942:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ae8 <_svfiprintf_r+0x1ec>
 8003946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800394a:	4623      	mov	r3, r4
 800394c:	469a      	mov	sl, r3
 800394e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003952:	b10a      	cbz	r2, 8003958 <_svfiprintf_r+0x5c>
 8003954:	2a25      	cmp	r2, #37	; 0x25
 8003956:	d1f9      	bne.n	800394c <_svfiprintf_r+0x50>
 8003958:	ebba 0b04 	subs.w	fp, sl, r4
 800395c:	d00b      	beq.n	8003976 <_svfiprintf_r+0x7a>
 800395e:	465b      	mov	r3, fp
 8003960:	4622      	mov	r2, r4
 8003962:	4629      	mov	r1, r5
 8003964:	4638      	mov	r0, r7
 8003966:	f7ff ff6d 	bl	8003844 <__ssputs_r>
 800396a:	3001      	adds	r0, #1
 800396c:	f000 80aa 	beq.w	8003ac4 <_svfiprintf_r+0x1c8>
 8003970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003972:	445a      	add	r2, fp
 8003974:	9209      	str	r2, [sp, #36]	; 0x24
 8003976:	f89a 3000 	ldrb.w	r3, [sl]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a2 	beq.w	8003ac4 <_svfiprintf_r+0x1c8>
 8003980:	2300      	movs	r3, #0
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800398a:	f10a 0a01 	add.w	sl, sl, #1
 800398e:	9304      	str	r3, [sp, #16]
 8003990:	9307      	str	r3, [sp, #28]
 8003992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003996:	931a      	str	r3, [sp, #104]	; 0x68
 8003998:	4654      	mov	r4, sl
 800399a:	2205      	movs	r2, #5
 800399c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a0:	4851      	ldr	r0, [pc, #324]	; (8003ae8 <_svfiprintf_r+0x1ec>)
 80039a2:	f000 fa41 	bl	8003e28 <memchr>
 80039a6:	9a04      	ldr	r2, [sp, #16]
 80039a8:	b9d8      	cbnz	r0, 80039e2 <_svfiprintf_r+0xe6>
 80039aa:	06d0      	lsls	r0, r2, #27
 80039ac:	bf44      	itt	mi
 80039ae:	2320      	movmi	r3, #32
 80039b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b4:	0711      	lsls	r1, r2, #28
 80039b6:	bf44      	itt	mi
 80039b8:	232b      	movmi	r3, #43	; 0x2b
 80039ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039be:	f89a 3000 	ldrb.w	r3, [sl]
 80039c2:	2b2a      	cmp	r3, #42	; 0x2a
 80039c4:	d015      	beq.n	80039f2 <_svfiprintf_r+0xf6>
 80039c6:	4654      	mov	r4, sl
 80039c8:	2000      	movs	r0, #0
 80039ca:	f04f 0c0a 	mov.w	ip, #10
 80039ce:	9a07      	ldr	r2, [sp, #28]
 80039d0:	4621      	mov	r1, r4
 80039d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d6:	3b30      	subs	r3, #48	; 0x30
 80039d8:	2b09      	cmp	r3, #9
 80039da:	d94e      	bls.n	8003a7a <_svfiprintf_r+0x17e>
 80039dc:	b1b0      	cbz	r0, 8003a0c <_svfiprintf_r+0x110>
 80039de:	9207      	str	r2, [sp, #28]
 80039e0:	e014      	b.n	8003a0c <_svfiprintf_r+0x110>
 80039e2:	eba0 0308 	sub.w	r3, r0, r8
 80039e6:	fa09 f303 	lsl.w	r3, r9, r3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	46a2      	mov	sl, r4
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	e7d2      	b.n	8003998 <_svfiprintf_r+0x9c>
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	1d19      	adds	r1, r3, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	9103      	str	r1, [sp, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bfbb      	ittet	lt
 80039fe:	425b      	neglt	r3, r3
 8003a00:	f042 0202 	orrlt.w	r2, r2, #2
 8003a04:	9307      	strge	r3, [sp, #28]
 8003a06:	9307      	strlt	r3, [sp, #28]
 8003a08:	bfb8      	it	lt
 8003a0a:	9204      	strlt	r2, [sp, #16]
 8003a0c:	7823      	ldrb	r3, [r4, #0]
 8003a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a10:	d10c      	bne.n	8003a2c <_svfiprintf_r+0x130>
 8003a12:	7863      	ldrb	r3, [r4, #1]
 8003a14:	2b2a      	cmp	r3, #42	; 0x2a
 8003a16:	d135      	bne.n	8003a84 <_svfiprintf_r+0x188>
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	3402      	adds	r4, #2
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	9203      	str	r2, [sp, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfb8      	it	lt
 8003a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a2a:	9305      	str	r3, [sp, #20]
 8003a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003af8 <_svfiprintf_r+0x1fc>
 8003a30:	2203      	movs	r2, #3
 8003a32:	4650      	mov	r0, sl
 8003a34:	7821      	ldrb	r1, [r4, #0]
 8003a36:	f000 f9f7 	bl	8003e28 <memchr>
 8003a3a:	b140      	cbz	r0, 8003a4e <_svfiprintf_r+0x152>
 8003a3c:	2340      	movs	r3, #64	; 0x40
 8003a3e:	eba0 000a 	sub.w	r0, r0, sl
 8003a42:	fa03 f000 	lsl.w	r0, r3, r0
 8003a46:	9b04      	ldr	r3, [sp, #16]
 8003a48:	3401      	adds	r4, #1
 8003a4a:	4303      	orrs	r3, r0
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a52:	2206      	movs	r2, #6
 8003a54:	4825      	ldr	r0, [pc, #148]	; (8003aec <_svfiprintf_r+0x1f0>)
 8003a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a5a:	f000 f9e5 	bl	8003e28 <memchr>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d038      	beq.n	8003ad4 <_svfiprintf_r+0x1d8>
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <_svfiprintf_r+0x1f4>)
 8003a64:	bb1b      	cbnz	r3, 8003aae <_svfiprintf_r+0x1b2>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	3307      	adds	r3, #7
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	3308      	adds	r3, #8
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a74:	4433      	add	r3, r6
 8003a76:	9309      	str	r3, [sp, #36]	; 0x24
 8003a78:	e767      	b.n	800394a <_svfiprintf_r+0x4e>
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a82:	e7a5      	b.n	80039d0 <_svfiprintf_r+0xd4>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f04f 0c0a 	mov.w	ip, #10
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	3401      	adds	r4, #1
 8003a8e:	9305      	str	r3, [sp, #20]
 8003a90:	4620      	mov	r0, r4
 8003a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a96:	3a30      	subs	r2, #48	; 0x30
 8003a98:	2a09      	cmp	r2, #9
 8003a9a:	d903      	bls.n	8003aa4 <_svfiprintf_r+0x1a8>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0c5      	beq.n	8003a2c <_svfiprintf_r+0x130>
 8003aa0:	9105      	str	r1, [sp, #20]
 8003aa2:	e7c3      	b.n	8003a2c <_svfiprintf_r+0x130>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aac:	e7f0      	b.n	8003a90 <_svfiprintf_r+0x194>
 8003aae:	ab03      	add	r3, sp, #12
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	462a      	mov	r2, r5
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <_svfiprintf_r+0x1f8>)
 8003ab8:	a904      	add	r1, sp, #16
 8003aba:	f3af 8000 	nop.w
 8003abe:	1c42      	adds	r2, r0, #1
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	d1d6      	bne.n	8003a72 <_svfiprintf_r+0x176>
 8003ac4:	89ab      	ldrh	r3, [r5, #12]
 8003ac6:	065b      	lsls	r3, r3, #25
 8003ac8:	f53f af2c 	bmi.w	8003924 <_svfiprintf_r+0x28>
 8003acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ace:	b01d      	add	sp, #116	; 0x74
 8003ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad4:	ab03      	add	r3, sp, #12
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4638      	mov	r0, r7
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <_svfiprintf_r+0x1f8>)
 8003ade:	a904      	add	r1, sp, #16
 8003ae0:	f000 f87c 	bl	8003bdc <_printf_i>
 8003ae4:	e7eb      	b.n	8003abe <_svfiprintf_r+0x1c2>
 8003ae6:	bf00      	nop
 8003ae8:	080040d2 	.word	0x080040d2
 8003aec:	080040dc 	.word	0x080040dc
 8003af0:	00000000 	.word	0x00000000
 8003af4:	08003845 	.word	0x08003845
 8003af8:	080040d8 	.word	0x080040d8

08003afc <_printf_common>:
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	4616      	mov	r6, r2
 8003b02:	4699      	mov	r9, r3
 8003b04:	688a      	ldr	r2, [r1, #8]
 8003b06:	690b      	ldr	r3, [r1, #16]
 8003b08:	4607      	mov	r7, r0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bfb8      	it	lt
 8003b0e:	4613      	movlt	r3, r2
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b16:	460c      	mov	r4, r1
 8003b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b1c:	b10a      	cbz	r2, 8003b22 <_printf_common+0x26>
 8003b1e:	3301      	adds	r3, #1
 8003b20:	6033      	str	r3, [r6, #0]
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	0699      	lsls	r1, r3, #26
 8003b26:	bf42      	ittt	mi
 8003b28:	6833      	ldrmi	r3, [r6, #0]
 8003b2a:	3302      	addmi	r3, #2
 8003b2c:	6033      	strmi	r3, [r6, #0]
 8003b2e:	6825      	ldr	r5, [r4, #0]
 8003b30:	f015 0506 	ands.w	r5, r5, #6
 8003b34:	d106      	bne.n	8003b44 <_printf_common+0x48>
 8003b36:	f104 0a19 	add.w	sl, r4, #25
 8003b3a:	68e3      	ldr	r3, [r4, #12]
 8003b3c:	6832      	ldr	r2, [r6, #0]
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	42ab      	cmp	r3, r5
 8003b42:	dc28      	bgt.n	8003b96 <_printf_common+0x9a>
 8003b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b48:	1e13      	subs	r3, r2, #0
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	bf18      	it	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	0692      	lsls	r2, r2, #26
 8003b52:	d42d      	bmi.n	8003bb0 <_printf_common+0xb4>
 8003b54:	4649      	mov	r1, r9
 8003b56:	4638      	mov	r0, r7
 8003b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b5c:	47c0      	blx	r8
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d020      	beq.n	8003ba4 <_printf_common+0xa8>
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	68e5      	ldr	r5, [r4, #12]
 8003b66:	f003 0306 	and.w	r3, r3, #6
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	bf18      	it	ne
 8003b6e:	2500      	movne	r5, #0
 8003b70:	6832      	ldr	r2, [r6, #0]
 8003b72:	f04f 0600 	mov.w	r6, #0
 8003b76:	68a3      	ldr	r3, [r4, #8]
 8003b78:	bf08      	it	eq
 8003b7a:	1aad      	subeq	r5, r5, r2
 8003b7c:	6922      	ldr	r2, [r4, #16]
 8003b7e:	bf08      	it	eq
 8003b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bfc4      	itt	gt
 8003b88:	1a9b      	subgt	r3, r3, r2
 8003b8a:	18ed      	addgt	r5, r5, r3
 8003b8c:	341a      	adds	r4, #26
 8003b8e:	42b5      	cmp	r5, r6
 8003b90:	d11a      	bne.n	8003bc8 <_printf_common+0xcc>
 8003b92:	2000      	movs	r0, #0
 8003b94:	e008      	b.n	8003ba8 <_printf_common+0xac>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4652      	mov	r2, sl
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	47c0      	blx	r8
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d103      	bne.n	8003bac <_printf_common+0xb0>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bac:	3501      	adds	r5, #1
 8003bae:	e7c4      	b.n	8003b3a <_printf_common+0x3e>
 8003bb0:	2030      	movs	r0, #48	; 0x30
 8003bb2:	18e1      	adds	r1, r4, r3
 8003bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bbe:	4422      	add	r2, r4
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bc6:	e7c5      	b.n	8003b54 <_printf_common+0x58>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4622      	mov	r2, r4
 8003bcc:	4649      	mov	r1, r9
 8003bce:	4638      	mov	r0, r7
 8003bd0:	47c0      	blx	r8
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d0e6      	beq.n	8003ba4 <_printf_common+0xa8>
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7d9      	b.n	8003b8e <_printf_common+0x92>
	...

08003bdc <_printf_i>:
 8003bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	460c      	mov	r4, r1
 8003be2:	7e27      	ldrb	r7, [r4, #24]
 8003be4:	4691      	mov	r9, r2
 8003be6:	2f78      	cmp	r7, #120	; 0x78
 8003be8:	4680      	mov	r8, r0
 8003bea:	469a      	mov	sl, r3
 8003bec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf2:	d807      	bhi.n	8003c04 <_printf_i+0x28>
 8003bf4:	2f62      	cmp	r7, #98	; 0x62
 8003bf6:	d80a      	bhi.n	8003c0e <_printf_i+0x32>
 8003bf8:	2f00      	cmp	r7, #0
 8003bfa:	f000 80d9 	beq.w	8003db0 <_printf_i+0x1d4>
 8003bfe:	2f58      	cmp	r7, #88	; 0x58
 8003c00:	f000 80a4 	beq.w	8003d4c <_printf_i+0x170>
 8003c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c0c:	e03a      	b.n	8003c84 <_printf_i+0xa8>
 8003c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c12:	2b15      	cmp	r3, #21
 8003c14:	d8f6      	bhi.n	8003c04 <_printf_i+0x28>
 8003c16:	a001      	add	r0, pc, #4	; (adr r0, 8003c1c <_printf_i+0x40>)
 8003c18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c89 	.word	0x08003c89
 8003c24:	08003c05 	.word	0x08003c05
 8003c28:	08003c05 	.word	0x08003c05
 8003c2c:	08003c05 	.word	0x08003c05
 8003c30:	08003c05 	.word	0x08003c05
 8003c34:	08003c89 	.word	0x08003c89
 8003c38:	08003c05 	.word	0x08003c05
 8003c3c:	08003c05 	.word	0x08003c05
 8003c40:	08003c05 	.word	0x08003c05
 8003c44:	08003c05 	.word	0x08003c05
 8003c48:	08003d97 	.word	0x08003d97
 8003c4c:	08003cb9 	.word	0x08003cb9
 8003c50:	08003d79 	.word	0x08003d79
 8003c54:	08003c05 	.word	0x08003c05
 8003c58:	08003c05 	.word	0x08003c05
 8003c5c:	08003db9 	.word	0x08003db9
 8003c60:	08003c05 	.word	0x08003c05
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003c05 	.word	0x08003c05
 8003c6c:	08003c05 	.word	0x08003c05
 8003c70:	08003d81 	.word	0x08003d81
 8003c74:	680b      	ldr	r3, [r1, #0]
 8003c76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	600a      	str	r2, [r1, #0]
 8003c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0a4      	b.n	8003dd2 <_printf_i+0x1f6>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	6808      	ldr	r0, [r1, #0]
 8003c8c:	062e      	lsls	r6, r5, #24
 8003c8e:	f100 0304 	add.w	r3, r0, #4
 8003c92:	d50a      	bpl.n	8003caa <_printf_i+0xce>
 8003c94:	6805      	ldr	r5, [r0, #0]
 8003c96:	600b      	str	r3, [r1, #0]
 8003c98:	2d00      	cmp	r5, #0
 8003c9a:	da03      	bge.n	8003ca4 <_printf_i+0xc8>
 8003c9c:	232d      	movs	r3, #45	; 0x2d
 8003c9e:	426d      	negs	r5, r5
 8003ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ca4:	230a      	movs	r3, #10
 8003ca6:	485e      	ldr	r0, [pc, #376]	; (8003e20 <_printf_i+0x244>)
 8003ca8:	e019      	b.n	8003cde <_printf_i+0x102>
 8003caa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cae:	6805      	ldr	r5, [r0, #0]
 8003cb0:	600b      	str	r3, [r1, #0]
 8003cb2:	bf18      	it	ne
 8003cb4:	b22d      	sxthne	r5, r5
 8003cb6:	e7ef      	b.n	8003c98 <_printf_i+0xbc>
 8003cb8:	680b      	ldr	r3, [r1, #0]
 8003cba:	6825      	ldr	r5, [r4, #0]
 8003cbc:	1d18      	adds	r0, r3, #4
 8003cbe:	6008      	str	r0, [r1, #0]
 8003cc0:	0628      	lsls	r0, r5, #24
 8003cc2:	d501      	bpl.n	8003cc8 <_printf_i+0xec>
 8003cc4:	681d      	ldr	r5, [r3, #0]
 8003cc6:	e002      	b.n	8003cce <_printf_i+0xf2>
 8003cc8:	0669      	lsls	r1, r5, #25
 8003cca:	d5fb      	bpl.n	8003cc4 <_printf_i+0xe8>
 8003ccc:	881d      	ldrh	r5, [r3, #0]
 8003cce:	2f6f      	cmp	r7, #111	; 0x6f
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2308      	moveq	r3, #8
 8003cd4:	230a      	movne	r3, #10
 8003cd6:	4852      	ldr	r0, [pc, #328]	; (8003e20 <_printf_i+0x244>)
 8003cd8:	2100      	movs	r1, #0
 8003cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cde:	6866      	ldr	r6, [r4, #4]
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	bfa8      	it	ge
 8003ce4:	6821      	ldrge	r1, [r4, #0]
 8003ce6:	60a6      	str	r6, [r4, #8]
 8003ce8:	bfa4      	itt	ge
 8003cea:	f021 0104 	bicge.w	r1, r1, #4
 8003cee:	6021      	strge	r1, [r4, #0]
 8003cf0:	b90d      	cbnz	r5, 8003cf6 <_printf_i+0x11a>
 8003cf2:	2e00      	cmp	r6, #0
 8003cf4:	d04d      	beq.n	8003d92 <_printf_i+0x1b6>
 8003cf6:	4616      	mov	r6, r2
 8003cf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cfc:	fb03 5711 	mls	r7, r3, r1, r5
 8003d00:	5dc7      	ldrb	r7, [r0, r7]
 8003d02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d06:	462f      	mov	r7, r5
 8003d08:	42bb      	cmp	r3, r7
 8003d0a:	460d      	mov	r5, r1
 8003d0c:	d9f4      	bls.n	8003cf8 <_printf_i+0x11c>
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d10b      	bne.n	8003d2a <_printf_i+0x14e>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	07df      	lsls	r7, r3, #31
 8003d16:	d508      	bpl.n	8003d2a <_printf_i+0x14e>
 8003d18:	6923      	ldr	r3, [r4, #16]
 8003d1a:	6861      	ldr	r1, [r4, #4]
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	bfde      	ittt	le
 8003d20:	2330      	movle	r3, #48	; 0x30
 8003d22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d2a:	1b92      	subs	r2, r2, r6
 8003d2c:	6122      	str	r2, [r4, #16]
 8003d2e:	464b      	mov	r3, r9
 8003d30:	4621      	mov	r1, r4
 8003d32:	4640      	mov	r0, r8
 8003d34:	f8cd a000 	str.w	sl, [sp]
 8003d38:	aa03      	add	r2, sp, #12
 8003d3a:	f7ff fedf 	bl	8003afc <_printf_common>
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d14c      	bne.n	8003ddc <_printf_i+0x200>
 8003d42:	f04f 30ff 	mov.w	r0, #4294967295
 8003d46:	b004      	add	sp, #16
 8003d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4c:	4834      	ldr	r0, [pc, #208]	; (8003e20 <_printf_i+0x244>)
 8003d4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d52:	680e      	ldr	r6, [r1, #0]
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d5a:	061f      	lsls	r7, r3, #24
 8003d5c:	600e      	str	r6, [r1, #0]
 8003d5e:	d514      	bpl.n	8003d8a <_printf_i+0x1ae>
 8003d60:	07d9      	lsls	r1, r3, #31
 8003d62:	bf44      	itt	mi
 8003d64:	f043 0320 	orrmi.w	r3, r3, #32
 8003d68:	6023      	strmi	r3, [r4, #0]
 8003d6a:	b91d      	cbnz	r5, 8003d74 <_printf_i+0x198>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	f023 0320 	bic.w	r3, r3, #32
 8003d72:	6023      	str	r3, [r4, #0]
 8003d74:	2310      	movs	r3, #16
 8003d76:	e7af      	b.n	8003cd8 <_printf_i+0xfc>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	f043 0320 	orr.w	r3, r3, #32
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	2378      	movs	r3, #120	; 0x78
 8003d82:	4828      	ldr	r0, [pc, #160]	; (8003e24 <_printf_i+0x248>)
 8003d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d88:	e7e3      	b.n	8003d52 <_printf_i+0x176>
 8003d8a:	065e      	lsls	r6, r3, #25
 8003d8c:	bf48      	it	mi
 8003d8e:	b2ad      	uxthmi	r5, r5
 8003d90:	e7e6      	b.n	8003d60 <_printf_i+0x184>
 8003d92:	4616      	mov	r6, r2
 8003d94:	e7bb      	b.n	8003d0e <_printf_i+0x132>
 8003d96:	680b      	ldr	r3, [r1, #0]
 8003d98:	6826      	ldr	r6, [r4, #0]
 8003d9a:	1d1d      	adds	r5, r3, #4
 8003d9c:	6960      	ldr	r0, [r4, #20]
 8003d9e:	600d      	str	r5, [r1, #0]
 8003da0:	0635      	lsls	r5, r6, #24
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	d501      	bpl.n	8003daa <_printf_i+0x1ce>
 8003da6:	6018      	str	r0, [r3, #0]
 8003da8:	e002      	b.n	8003db0 <_printf_i+0x1d4>
 8003daa:	0671      	lsls	r1, r6, #25
 8003dac:	d5fb      	bpl.n	8003da6 <_printf_i+0x1ca>
 8003dae:	8018      	strh	r0, [r3, #0]
 8003db0:	2300      	movs	r3, #0
 8003db2:	4616      	mov	r6, r2
 8003db4:	6123      	str	r3, [r4, #16]
 8003db6:	e7ba      	b.n	8003d2e <_printf_i+0x152>
 8003db8:	680b      	ldr	r3, [r1, #0]
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	600a      	str	r2, [r1, #0]
 8003dbe:	681e      	ldr	r6, [r3, #0]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	6862      	ldr	r2, [r4, #4]
 8003dc6:	f000 f82f 	bl	8003e28 <memchr>
 8003dca:	b108      	cbz	r0, 8003dd0 <_printf_i+0x1f4>
 8003dcc:	1b80      	subs	r0, r0, r6
 8003dce:	6060      	str	r0, [r4, #4]
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	6123      	str	r3, [r4, #16]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dda:	e7a8      	b.n	8003d2e <_printf_i+0x152>
 8003ddc:	4632      	mov	r2, r6
 8003dde:	4649      	mov	r1, r9
 8003de0:	4640      	mov	r0, r8
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	47d0      	blx	sl
 8003de6:	3001      	adds	r0, #1
 8003de8:	d0ab      	beq.n	8003d42 <_printf_i+0x166>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	079b      	lsls	r3, r3, #30
 8003dee:	d413      	bmi.n	8003e18 <_printf_i+0x23c>
 8003df0:	68e0      	ldr	r0, [r4, #12]
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	4298      	cmp	r0, r3
 8003df6:	bfb8      	it	lt
 8003df8:	4618      	movlt	r0, r3
 8003dfa:	e7a4      	b.n	8003d46 <_printf_i+0x16a>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4632      	mov	r2, r6
 8003e00:	4649      	mov	r1, r9
 8003e02:	4640      	mov	r0, r8
 8003e04:	47d0      	blx	sl
 8003e06:	3001      	adds	r0, #1
 8003e08:	d09b      	beq.n	8003d42 <_printf_i+0x166>
 8003e0a:	3501      	adds	r5, #1
 8003e0c:	68e3      	ldr	r3, [r4, #12]
 8003e0e:	9903      	ldr	r1, [sp, #12]
 8003e10:	1a5b      	subs	r3, r3, r1
 8003e12:	42ab      	cmp	r3, r5
 8003e14:	dcf2      	bgt.n	8003dfc <_printf_i+0x220>
 8003e16:	e7eb      	b.n	8003df0 <_printf_i+0x214>
 8003e18:	2500      	movs	r5, #0
 8003e1a:	f104 0619 	add.w	r6, r4, #25
 8003e1e:	e7f5      	b.n	8003e0c <_printf_i+0x230>
 8003e20:	080040e3 	.word	0x080040e3
 8003e24:	080040f4 	.word	0x080040f4

08003e28 <memchr>:
 8003e28:	4603      	mov	r3, r0
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	b2c9      	uxtb	r1, r1
 8003e2e:	4402      	add	r2, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	d101      	bne.n	8003e3a <memchr+0x12>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e003      	b.n	8003e42 <memchr+0x1a>
 8003e3a:	7804      	ldrb	r4, [r0, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	428c      	cmp	r4, r1
 8003e40:	d1f6      	bne.n	8003e30 <memchr+0x8>
 8003e42:	bd10      	pop	{r4, pc}

08003e44 <memcpy>:
 8003e44:	440a      	add	r2, r1
 8003e46:	4291      	cmp	r1, r2
 8003e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e4c:	d100      	bne.n	8003e50 <memcpy+0xc>
 8003e4e:	4770      	bx	lr
 8003e50:	b510      	push	{r4, lr}
 8003e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e56:	4291      	cmp	r1, r2
 8003e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e5c:	d1f9      	bne.n	8003e52 <memcpy+0xe>
 8003e5e:	bd10      	pop	{r4, pc}

08003e60 <memmove>:
 8003e60:	4288      	cmp	r0, r1
 8003e62:	b510      	push	{r4, lr}
 8003e64:	eb01 0402 	add.w	r4, r1, r2
 8003e68:	d902      	bls.n	8003e70 <memmove+0x10>
 8003e6a:	4284      	cmp	r4, r0
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	d807      	bhi.n	8003e80 <memmove+0x20>
 8003e70:	1e43      	subs	r3, r0, #1
 8003e72:	42a1      	cmp	r1, r4
 8003e74:	d008      	beq.n	8003e88 <memmove+0x28>
 8003e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e7e:	e7f8      	b.n	8003e72 <memmove+0x12>
 8003e80:	4601      	mov	r1, r0
 8003e82:	4402      	add	r2, r0
 8003e84:	428a      	cmp	r2, r1
 8003e86:	d100      	bne.n	8003e8a <memmove+0x2a>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e92:	e7f7      	b.n	8003e84 <memmove+0x24>

08003e94 <_free_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4605      	mov	r5, r0
 8003e98:	2900      	cmp	r1, #0
 8003e9a:	d043      	beq.n	8003f24 <_free_r+0x90>
 8003e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ea0:	1f0c      	subs	r4, r1, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfb8      	it	lt
 8003ea6:	18e4      	addlt	r4, r4, r3
 8003ea8:	f000 f8d0 	bl	800404c <__malloc_lock>
 8003eac:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <_free_r+0x94>)
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	b933      	cbnz	r3, 8003ec2 <_free_r+0x2e>
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	6014      	str	r4, [r2, #0]
 8003eb8:	4628      	mov	r0, r5
 8003eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ebe:	f000 b8cb 	b.w	8004058 <__malloc_unlock>
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	d90a      	bls.n	8003edc <_free_r+0x48>
 8003ec6:	6821      	ldr	r1, [r4, #0]
 8003ec8:	1862      	adds	r2, r4, r1
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	bf01      	itttt	eq
 8003ece:	681a      	ldreq	r2, [r3, #0]
 8003ed0:	685b      	ldreq	r3, [r3, #4]
 8003ed2:	1852      	addeq	r2, r2, r1
 8003ed4:	6022      	streq	r2, [r4, #0]
 8003ed6:	6063      	str	r3, [r4, #4]
 8003ed8:	6004      	str	r4, [r0, #0]
 8003eda:	e7ed      	b.n	8003eb8 <_free_r+0x24>
 8003edc:	461a      	mov	r2, r3
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	b10b      	cbz	r3, 8003ee6 <_free_r+0x52>
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	d9fa      	bls.n	8003edc <_free_r+0x48>
 8003ee6:	6811      	ldr	r1, [r2, #0]
 8003ee8:	1850      	adds	r0, r2, r1
 8003eea:	42a0      	cmp	r0, r4
 8003eec:	d10b      	bne.n	8003f06 <_free_r+0x72>
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	4401      	add	r1, r0
 8003ef2:	1850      	adds	r0, r2, r1
 8003ef4:	4283      	cmp	r3, r0
 8003ef6:	6011      	str	r1, [r2, #0]
 8003ef8:	d1de      	bne.n	8003eb8 <_free_r+0x24>
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4401      	add	r1, r0
 8003f00:	6011      	str	r1, [r2, #0]
 8003f02:	6053      	str	r3, [r2, #4]
 8003f04:	e7d8      	b.n	8003eb8 <_free_r+0x24>
 8003f06:	d902      	bls.n	8003f0e <_free_r+0x7a>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	602b      	str	r3, [r5, #0]
 8003f0c:	e7d4      	b.n	8003eb8 <_free_r+0x24>
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	1821      	adds	r1, r4, r0
 8003f12:	428b      	cmp	r3, r1
 8003f14:	bf01      	itttt	eq
 8003f16:	6819      	ldreq	r1, [r3, #0]
 8003f18:	685b      	ldreq	r3, [r3, #4]
 8003f1a:	1809      	addeq	r1, r1, r0
 8003f1c:	6021      	streq	r1, [r4, #0]
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	6054      	str	r4, [r2, #4]
 8003f22:	e7c9      	b.n	8003eb8 <_free_r+0x24>
 8003f24:	bd38      	pop	{r3, r4, r5, pc}
 8003f26:	bf00      	nop
 8003f28:	200000d8 	.word	0x200000d8

08003f2c <_malloc_r>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	1ccd      	adds	r5, r1, #3
 8003f30:	f025 0503 	bic.w	r5, r5, #3
 8003f34:	3508      	adds	r5, #8
 8003f36:	2d0c      	cmp	r5, #12
 8003f38:	bf38      	it	cc
 8003f3a:	250c      	movcc	r5, #12
 8003f3c:	2d00      	cmp	r5, #0
 8003f3e:	4606      	mov	r6, r0
 8003f40:	db01      	blt.n	8003f46 <_malloc_r+0x1a>
 8003f42:	42a9      	cmp	r1, r5
 8003f44:	d903      	bls.n	8003f4e <_malloc_r+0x22>
 8003f46:	230c      	movs	r3, #12
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4e:	f000 f87d 	bl	800404c <__malloc_lock>
 8003f52:	4921      	ldr	r1, [pc, #132]	; (8003fd8 <_malloc_r+0xac>)
 8003f54:	680a      	ldr	r2, [r1, #0]
 8003f56:	4614      	mov	r4, r2
 8003f58:	b99c      	cbnz	r4, 8003f82 <_malloc_r+0x56>
 8003f5a:	4f20      	ldr	r7, [pc, #128]	; (8003fdc <_malloc_r+0xb0>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	b923      	cbnz	r3, 8003f6a <_malloc_r+0x3e>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4630      	mov	r0, r6
 8003f64:	f000 f862 	bl	800402c <_sbrk_r>
 8003f68:	6038      	str	r0, [r7, #0]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f000 f85d 	bl	800402c <_sbrk_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d123      	bne.n	8003fbe <_malloc_r+0x92>
 8003f76:	230c      	movs	r3, #12
 8003f78:	4630      	mov	r0, r6
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	f000 f86c 	bl	8004058 <__malloc_unlock>
 8003f80:	e7e3      	b.n	8003f4a <_malloc_r+0x1e>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	1b5b      	subs	r3, r3, r5
 8003f86:	d417      	bmi.n	8003fb8 <_malloc_r+0x8c>
 8003f88:	2b0b      	cmp	r3, #11
 8003f8a:	d903      	bls.n	8003f94 <_malloc_r+0x68>
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	441c      	add	r4, r3
 8003f90:	6025      	str	r5, [r4, #0]
 8003f92:	e004      	b.n	8003f9e <_malloc_r+0x72>
 8003f94:	6863      	ldr	r3, [r4, #4]
 8003f96:	42a2      	cmp	r2, r4
 8003f98:	bf0c      	ite	eq
 8003f9a:	600b      	streq	r3, [r1, #0]
 8003f9c:	6053      	strne	r3, [r2, #4]
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f000 f85a 	bl	8004058 <__malloc_unlock>
 8003fa4:	f104 000b 	add.w	r0, r4, #11
 8003fa8:	1d23      	adds	r3, r4, #4
 8003faa:	f020 0007 	bic.w	r0, r0, #7
 8003fae:	1ac2      	subs	r2, r0, r3
 8003fb0:	d0cc      	beq.n	8003f4c <_malloc_r+0x20>
 8003fb2:	1a1b      	subs	r3, r3, r0
 8003fb4:	50a3      	str	r3, [r4, r2]
 8003fb6:	e7c9      	b.n	8003f4c <_malloc_r+0x20>
 8003fb8:	4622      	mov	r2, r4
 8003fba:	6864      	ldr	r4, [r4, #4]
 8003fbc:	e7cc      	b.n	8003f58 <_malloc_r+0x2c>
 8003fbe:	1cc4      	adds	r4, r0, #3
 8003fc0:	f024 0403 	bic.w	r4, r4, #3
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d0e3      	beq.n	8003f90 <_malloc_r+0x64>
 8003fc8:	1a21      	subs	r1, r4, r0
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f000 f82e 	bl	800402c <_sbrk_r>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d1dd      	bne.n	8003f90 <_malloc_r+0x64>
 8003fd4:	e7cf      	b.n	8003f76 <_malloc_r+0x4a>
 8003fd6:	bf00      	nop
 8003fd8:	200000d8 	.word	0x200000d8
 8003fdc:	200000dc 	.word	0x200000dc

08003fe0 <_realloc_r>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	4607      	mov	r7, r0
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	460e      	mov	r6, r1
 8003fe8:	b921      	cbnz	r1, 8003ff4 <_realloc_r+0x14>
 8003fea:	4611      	mov	r1, r2
 8003fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ff0:	f7ff bf9c 	b.w	8003f2c <_malloc_r>
 8003ff4:	b922      	cbnz	r2, 8004000 <_realloc_r+0x20>
 8003ff6:	f7ff ff4d 	bl	8003e94 <_free_r>
 8003ffa:	4625      	mov	r5, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004000:	f000 f830 	bl	8004064 <_malloc_usable_size_r>
 8004004:	42a0      	cmp	r0, r4
 8004006:	d20f      	bcs.n	8004028 <_realloc_r+0x48>
 8004008:	4621      	mov	r1, r4
 800400a:	4638      	mov	r0, r7
 800400c:	f7ff ff8e 	bl	8003f2c <_malloc_r>
 8004010:	4605      	mov	r5, r0
 8004012:	2800      	cmp	r0, #0
 8004014:	d0f2      	beq.n	8003ffc <_realloc_r+0x1c>
 8004016:	4631      	mov	r1, r6
 8004018:	4622      	mov	r2, r4
 800401a:	f7ff ff13 	bl	8003e44 <memcpy>
 800401e:	4631      	mov	r1, r6
 8004020:	4638      	mov	r0, r7
 8004022:	f7ff ff37 	bl	8003e94 <_free_r>
 8004026:	e7e9      	b.n	8003ffc <_realloc_r+0x1c>
 8004028:	4635      	mov	r5, r6
 800402a:	e7e7      	b.n	8003ffc <_realloc_r+0x1c>

0800402c <_sbrk_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	2300      	movs	r3, #0
 8004030:	4d05      	ldr	r5, [pc, #20]	; (8004048 <_sbrk_r+0x1c>)
 8004032:	4604      	mov	r4, r0
 8004034:	4608      	mov	r0, r1
 8004036:	602b      	str	r3, [r5, #0]
 8004038:	f7fd f8fc 	bl	8001234 <_sbrk>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_sbrk_r+0x1a>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_sbrk_r+0x1a>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	2000028c 	.word	0x2000028c

0800404c <__malloc_lock>:
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <__malloc_lock+0x8>)
 800404e:	f000 b811 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8004052:	bf00      	nop
 8004054:	20000294 	.word	0x20000294

08004058 <__malloc_unlock>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__malloc_unlock+0x8>)
 800405a:	f000 b80c 	b.w	8004076 <__retarget_lock_release_recursive>
 800405e:	bf00      	nop
 8004060:	20000294 	.word	0x20000294

08004064 <_malloc_usable_size_r>:
 8004064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004068:	1f18      	subs	r0, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	bfbc      	itt	lt
 800406e:	580b      	ldrlt	r3, [r1, r0]
 8004070:	18c0      	addlt	r0, r0, r3
 8004072:	4770      	bx	lr

08004074 <__retarget_lock_acquire_recursive>:
 8004074:	4770      	bx	lr

08004076 <__retarget_lock_release_recursive>:
 8004076:	4770      	bx	lr

08004078 <_init>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr

08004084 <_fini>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr
