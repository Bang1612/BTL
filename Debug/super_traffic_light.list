
super_traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000391c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa0  08003aa0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa0  08003aa0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa0  08003aa0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000098  08003b40  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003b40  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176ef  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1e  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0003a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0003afa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dc6  00000000  00000000  0003bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e10  00000000  00000000  00055926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0ae  00000000  00000000  00067736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f27e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  000f2838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a10 	.word	0x08003a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003a10 	.word	0x08003a10

0800014c <isButtonPressed>:
int BtnRegistor1 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int BtnRegistor2 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int BtnRegistor3 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress [4] = {500, 500, 500, 500};

int isButtonPressed(int button){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[button] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000b4 	.word	0x200000b4

08000180 <fsm_automatic_run>:
 *      Author: MY PC
 */

#include "fsm_auto.h"

void fsm_automatic_run(int lane){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (timer[lane].count % 100 == 0){
 8000188:	4a61      	ldr	r2, [pc, #388]	; (8000310 <fsm_automatic_run+0x190>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000190:	4b60      	ldr	r3, [pc, #384]	; (8000314 <fsm_automatic_run+0x194>)
 8000192:	fba3 1302 	umull	r1, r3, r3, r2
 8000196:	095b      	lsrs	r3, r3, #5
 8000198:	2164      	movs	r1, #100	; 0x64
 800019a:	fb01 f303 	mul.w	r3, r1, r3
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d122      	bne.n	80001ea <fsm_automatic_run+0x6a>
		int remaining_time = timer[lane].count / 100;
 80001a4:	4a5a      	ldr	r2, [pc, #360]	; (8000310 <fsm_automatic_run+0x190>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80001ac:	4a59      	ldr	r2, [pc, #356]	; (8000314 <fsm_automatic_run+0x194>)
 80001ae:	fba2 2303 	umull	r2, r3, r2, r3
 80001b2:	095b      	lsrs	r3, r3, #5
 80001b4:	60fb      	str	r3, [r7, #12]
		Display(remaining_time);
 80001b6:	68f8      	ldr	r0, [r7, #12]
 80001b8:	f000 ffc0 	bl	800113c <Display>
		if(!lane && PEDESTRIAN_MODE){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d113      	bne.n	80001ea <fsm_automatic_run+0x6a>
 80001c2:	4b55      	ldr	r3, [pc, #340]	; (8000318 <fsm_automatic_run+0x198>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d00f      	beq.n	80001ea <fsm_automatic_run+0x6a>
			int freq= (RED_DURATION *100 - remaining_time) *10;
 80001ca:	4b54      	ldr	r3, [pc, #336]	; (800031c <fsm_automatic_run+0x19c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2264      	movs	r2, #100	; 0x64
 80001d0:	fb02 f203 	mul.w	r2, r2, r3
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	1ad2      	subs	r2, r2, r3
 80001d8:	4613      	mov	r3, r2
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	4413      	add	r3, r2
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	60bb      	str	r3, [r7, #8]
			buzzer(freq);
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fcbf 	bl	8000b68 <buzzer>
		}
	}
	switch(LED_STATE[lane]){
 80001ea:	4a4d      	ldr	r2, [pc, #308]	; (8000320 <fsm_automatic_run+0x1a0>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	d87f      	bhi.n	80002f8 <fsm_automatic_run+0x178>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <fsm_automatic_run+0x80>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	08000211 	.word	0x08000211
 8000204:	0800025d 	.word	0x0800025d
 8000208:	08000291 	.word	0x08000291
 800020c:	080002c5 	.word	0x080002c5
		case INIT_STATE:
			setTrafficLightDefault(lane);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 fe95 	bl	8000f40 <setTrafficLightDefault>
			if (lane == 0){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d10f      	bne.n	800023c <fsm_automatic_run+0xbc>
				LED_STATE[lane] = RED_STATE;
 800021c:	4a40      	ldr	r2, [pc, #256]	; (8000320 <fsm_automatic_run+0x1a0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2102      	movs	r1, #2
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4b3c      	ldr	r3, [pc, #240]	; (800031c <fsm_automatic_run+0x19c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2164      	movs	r1, #100	; 0x64
 800022e:	fb01 f303 	mul.w	r3, r1, r3
 8000232:	4619      	mov	r1, r3
 8000234:	4610      	mov	r0, r2
 8000236:	f000 fe0f 	bl	8000e58 <setTimer>
			}
			else{
				LED_STATE[lane] = GREEN_STATE;
				setTimer(lane, GREEN_DURATION*100);
			}
			break;
 800023a:	e064      	b.n	8000306 <fsm_automatic_run+0x186>
				LED_STATE[lane] = GREEN_STATE;
 800023c:	4a38      	ldr	r2, [pc, #224]	; (8000320 <fsm_automatic_run+0x1a0>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2103      	movs	r1, #3
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	4b36      	ldr	r3, [pc, #216]	; (8000324 <fsm_automatic_run+0x1a4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2164      	movs	r1, #100	; 0x64
 800024e:	fb01 f303 	mul.w	r3, r1, r3
 8000252:	4619      	mov	r1, r3
 8000254:	4610      	mov	r0, r2
 8000256:	f000 fdff 	bl	8000e58 <setTimer>
			break;
 800025a:	e054      	b.n	8000306 <fsm_automatic_run+0x186>
		case RED_STATE:
			setRed(lane);
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 fead 	bl	8000fbc <setRed>
			if(isTimerOn(lane) == 1){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fe5b 	bl	8000f20 <isTimerOn>
 800026a:	4603      	mov	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	d145      	bne.n	80002fc <fsm_automatic_run+0x17c>
				LED_STATE[lane] = GREEN_STATE;
 8000270:	4a2b      	ldr	r2, [pc, #172]	; (8000320 <fsm_automatic_run+0x1a0>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2103      	movs	r1, #3
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4b29      	ldr	r3, [pc, #164]	; (8000324 <fsm_automatic_run+0x1a4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2164      	movs	r1, #100	; 0x64
 8000282:	fb01 f303 	mul.w	r3, r1, r3
 8000286:	4619      	mov	r1, r3
 8000288:	4610      	mov	r0, r2
 800028a:	f000 fde5 	bl	8000e58 <setTimer>
			}
			break;
 800028e:	e035      	b.n	80002fc <fsm_automatic_run+0x17c>
		case GREEN_STATE:
			setGreen(lane);
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f000 fed3 	bl	800103c <setGreen>
			if(isTimerOn(lane) == 1){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fe41 	bl	8000f20 <isTimerOn>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d12d      	bne.n	8000300 <fsm_automatic_run+0x180>
				LED_STATE[lane] = YELLOW_STATE;
 80002a4:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <fsm_automatic_run+0x1a0>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2104      	movs	r1, #4
 80002aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <fsm_automatic_run+0x1a8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2164      	movs	r1, #100	; 0x64
 80002b6:	fb01 f303 	mul.w	r3, r1, r3
 80002ba:	4619      	mov	r1, r3
 80002bc:	4610      	mov	r0, r2
 80002be:	f000 fdcb 	bl	8000e58 <setTimer>
			}
			break;
 80002c2:	e01d      	b.n	8000300 <fsm_automatic_run+0x180>
		case YELLOW_STATE:
			setAmber(lane);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 fef9 	bl	80010bc <setAmber>
			if(isTimerOn(lane) == 1){
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fe27 	bl	8000f20 <isTimerOn>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d115      	bne.n	8000304 <fsm_automatic_run+0x184>
				LED_STATE[lane] = RED_STATE;
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <fsm_automatic_run+0x1a0>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2102      	movs	r1, #2
 80002de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <fsm_automatic_run+0x19c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2164      	movs	r1, #100	; 0x64
 80002ea:	fb01 f303 	mul.w	r3, r1, r3
 80002ee:	4619      	mov	r1, r3
 80002f0:	4610      	mov	r0, r2
 80002f2:	f000 fdb1 	bl	8000e58 <setTimer>
			}
			break;
 80002f6:	e005      	b.n	8000304 <fsm_automatic_run+0x184>
		default:
			break;
 80002f8:	bf00      	nop
 80002fa:	e004      	b.n	8000306 <fsm_automatic_run+0x186>
			break;
 80002fc:	bf00      	nop
 80002fe:	e002      	b.n	8000306 <fsm_automatic_run+0x186>
			break;
 8000300:	bf00      	nop
 8000302:	e000      	b.n	8000306 <fsm_automatic_run+0x186>
			break;
 8000304:	bf00      	nop
	}


}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000e0 	.word	0x200000e0
 8000314:	51eb851f 	.word	0x51eb851f
 8000318:	200000c8 	.word	0x200000c8
 800031c:	2000000c 	.word	0x2000000c
 8000320:	20000000 	.word	0x20000000
 8000324:	20000014 	.word	0x20000014
 8000328:	20000010 	.word	0x20000010

0800032c <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	setTrafficLightDefault(0);
 8000334:	2000      	movs	r0, #0
 8000336:	f000 fe03 	bl	8000f40 <setTrafficLightDefault>
	setTrafficLightDefault(1);
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fe00 	bl	8000f40 <setTrafficLightDefault>
	MODE = mode;
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <changeMode+0x2c>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6013      	str	r3, [r2, #0]
	setTimer(2, 25);
 8000346:	2119      	movs	r1, #25
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fd85 	bl	8000e58 <setTimer>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000008 	.word	0x20000008

0800035c <displayDuration>:

void displayDuration(int mode, int duration){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
//	display7SEG(0, mode);
//	display7SEG(1, 0);
//	display7SEG(2, duration%10);
//	display7SEG(3, (int) (duration/10));
	Display(mode);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 fee8 	bl	800113c <Display>
	Display(duration);
 800036c:	6838      	ldr	r0, [r7, #0]
 800036e:	f000 fee5 	bl	800113c <Display>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <fsm_manual_run>:
//handle manual setting
void fsm_manual_run(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

	switch(MODE){
 8000380:	4bac      	ldr	r3, [pc, #688]	; (8000634 <fsm_manual_run+0x2b8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b0b      	subs	r3, #11
 8000386:	2b03      	cmp	r3, #3
 8000388:	f200 81cb 	bhi.w	8000722 <fsm_manual_run+0x3a6>
 800038c:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <fsm_manual_run+0x18>)
 800038e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000392:	bf00      	nop
 8000394:	080003a5 	.word	0x080003a5
 8000398:	08000479 	.word	0x08000479
 800039c:	08000525 	.word	0x08000525
 80003a0:	080005cb 	.word	0x080005cb
		case MODE_1:
			fsm_automatic_run(0);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff feeb 	bl	8000180 <fsm_automatic_run>
			fsm_automatic_run(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f7ff fee8 	bl	8000180 <fsm_automatic_run>
			ped_run();
 80003b0:	f000 fb98 	bl	8000ae4 <ped_run>
			if (isButtonPressed(0) == 1){
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff fec9 	bl	800014c <isButtonPressed>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d10e      	bne.n	80003de <fsm_manual_run+0x62>
				tempDuration = RED_DURATION;
 80003c0:	4b9d      	ldr	r3, [pc, #628]	; (8000638 <fsm_manual_run+0x2bc>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a9d      	ldr	r2, [pc, #628]	; (800063c <fsm_manual_run+0x2c0>)
 80003c6:	6013      	str	r3, [r2, #0]
				changeMode(MODE_2);
 80003c8:	200c      	movs	r0, #12
 80003ca:	f7ff ffaf 	bl	800032c <changeMode>
//				Turn off pedestrian mode
				PEDESTRIAN_MODE = 0;
 80003ce:	4b9c      	ldr	r3, [pc, #624]	; (8000640 <fsm_manual_run+0x2c4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	489a      	ldr	r0, [pc, #616]	; (8000644 <fsm_manual_run+0x2c8>)
 80003da:	f001 f9fd 	bl	80017d8 <HAL_GPIO_WritePin>
			}
//			Change light on
			if(isButtonPressed(1) == 1){
 80003de:	2001      	movs	r0, #1
 80003e0:	f7ff feb4 	bl	800014c <isButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d11f      	bne.n	800042a <fsm_manual_run+0xae>
				if(LED_STATE[0] == GREEN_STATE || LED_STATE[0] == YELLOW_STATE){
 80003ea:	4b97      	ldr	r3, [pc, #604]	; (8000648 <fsm_manual_run+0x2cc>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d003      	beq.n	80003fa <fsm_manual_run+0x7e>
 80003f2:	4b95      	ldr	r3, [pc, #596]	; (8000648 <fsm_manual_run+0x2cc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d105      	bne.n	8000406 <fsm_manual_run+0x8a>
					LED_STATE[0]= RED_STATE;
 80003fa:	4b93      	ldr	r3, [pc, #588]	; (8000648 <fsm_manual_run+0x2cc>)
 80003fc:	2202      	movs	r2, #2
 80003fe:	601a      	str	r2, [r3, #0]
					LED_STATE[1]= GREEN_STATE;
 8000400:	4b91      	ldr	r3, [pc, #580]	; (8000648 <fsm_manual_run+0x2cc>)
 8000402:	2203      	movs	r2, #3
 8000404:	605a      	str	r2, [r3, #4]

				}
				if (LED_STATE[0] == RED_STATE){
 8000406:	4b90      	ldr	r3, [pc, #576]	; (8000648 <fsm_manual_run+0x2cc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b02      	cmp	r3, #2
 800040c:	d105      	bne.n	800041a <fsm_manual_run+0x9e>
					LED_STATE[0]= GREEN_STATE;
 800040e:	4b8e      	ldr	r3, [pc, #568]	; (8000648 <fsm_manual_run+0x2cc>)
 8000410:	2203      	movs	r2, #3
 8000412:	601a      	str	r2, [r3, #0]
					LED_STATE[1]= RED_STATE;
 8000414:	4b8c      	ldr	r3, [pc, #560]	; (8000648 <fsm_manual_run+0x2cc>)
 8000416:	2202      	movs	r2, #2
 8000418:	605a      	str	r2, [r3, #4]
				}
				ped_run();
 800041a:	f000 fb63 	bl	8000ae4 <ped_run>
				fsm_automatic_run(0);
 800041e:	2000      	movs	r0, #0
 8000420:	f7ff feae 	bl	8000180 <fsm_automatic_run>
				fsm_automatic_run(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f7ff feab 	bl	8000180 <fsm_automatic_run>
			}
//			Active pedestrian
			if(isButtonPressed(3) == 1){
 800042a:	2003      	movs	r0, #3
 800042c:	f7ff fe8e 	bl	800014c <isButtonPressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b01      	cmp	r3, #1
 8000434:	d110      	bne.n	8000458 <fsm_manual_run+0xdc>
				PEDESTRIAN_MODE = 1;
 8000436:	4b82      	ldr	r3, [pc, #520]	; (8000640 <fsm_manual_run+0x2c4>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
				setTimer(3, PEDESTRIAN_DURATION*100);
 800043c:	4b83      	ldr	r3, [pc, #524]	; (800064c <fsm_manual_run+0x2d0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2264      	movs	r2, #100	; 0x64
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	4619      	mov	r1, r3
 8000448:	2003      	movs	r0, #3
 800044a:	f000 fd05 	bl	8000e58 <setTimer>
			//	Active Buzzer
				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	487c      	ldr	r0, [pc, #496]	; (8000644 <fsm_manual_run+0x2c8>)
 8000454:	f001 f9c0 	bl	80017d8 <HAL_GPIO_WritePin>
			}
			if(isTimerOn(3)){
 8000458:	2003      	movs	r0, #3
 800045a:	f000 fd61 	bl	8000f20 <isTimerOn>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	f000 8162 	beq.w	800072a <fsm_manual_run+0x3ae>
				PEDESTRIAN_MODE=0;
 8000466:	4b76      	ldr	r3, [pc, #472]	; (8000640 <fsm_manual_run+0x2c4>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(WALKER_BUZZER_GPIO_Port, WALKER_BUZZER_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	4874      	ldr	r0, [pc, #464]	; (8000644 <fsm_manual_run+0x2c8>)
 8000472:	f001 f9b1 	bl	80017d8 <HAL_GPIO_WritePin>
			}
			break;
 8000476:	e158      	b.n	800072a <fsm_manual_run+0x3ae>
		case MODE_2:
			displayDuration(2, tempDuration);
 8000478:	4b70      	ldr	r3, [pc, #448]	; (800063c <fsm_manual_run+0x2c0>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	2002      	movs	r0, #2
 8000480:	f7ff ff6c 	bl	800035c <displayDuration>
			if (isButtonPressed(0) == 1){
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fe61 	bl	800014c <isButtonPressed>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d106      	bne.n	800049e <fsm_manual_run+0x122>
				tempDuration = YELLOW_DURATION;
 8000490:	4b6f      	ldr	r3, [pc, #444]	; (8000650 <fsm_manual_run+0x2d4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a69      	ldr	r2, [pc, #420]	; (800063c <fsm_manual_run+0x2c0>)
 8000496:	6013      	str	r3, [r2, #0]
				changeMode(MODE_3);
 8000498:	200d      	movs	r0, #13
 800049a:	f7ff ff47 	bl	800032c <changeMode>
			}
			if (isButtonPressed(1) == 1){
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff fe54 	bl	800014c <isButtonPressed>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d112      	bne.n	80004d0 <fsm_manual_run+0x154>
				tempDuration++;
 80004aa:	4b64      	ldr	r3, [pc, #400]	; (800063c <fsm_manual_run+0x2c0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	4a62      	ldr	r2, [pc, #392]	; (800063c <fsm_manual_run+0x2c0>)
 80004b2:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 80004b4:	4b61      	ldr	r3, [pc, #388]	; (800063c <fsm_manual_run+0x2c0>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b66      	ldr	r3, [pc, #408]	; (8000654 <fsm_manual_run+0x2d8>)
 80004ba:	fb83 1302 	smull	r1, r3, r3, r2
 80004be:	1159      	asrs	r1, r3, #5
 80004c0:	17d3      	asrs	r3, r2, #31
 80004c2:	1acb      	subs	r3, r1, r3
 80004c4:	2164      	movs	r1, #100	; 0x64
 80004c6:	fb01 f303 	mul.w	r3, r1, r3
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	4a5b      	ldr	r2, [pc, #364]	; (800063c <fsm_manual_run+0x2c0>)
 80004ce:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(2) == 1){
 80004d0:	2002      	movs	r0, #2
 80004d2:	f7ff fe3b 	bl	800014c <isButtonPressed>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d103      	bne.n	80004e4 <fsm_manual_run+0x168>
				RED_DURATION = tempDuration;
 80004dc:	4b57      	ldr	r3, [pc, #348]	; (800063c <fsm_manual_run+0x2c0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a55      	ldr	r2, [pc, #340]	; (8000638 <fsm_manual_run+0x2bc>)
 80004e2:	6013      	str	r3, [r2, #0]
			}
			if (isTimerOn(2) == 1){
 80004e4:	2002      	movs	r0, #2
 80004e6:	f000 fd1b 	bl	8000f20 <isTimerOn>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	f040 811e 	bne.w	800072e <fsm_manual_run+0x3b2>
//				HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
//				HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 80004f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f6:	4853      	ldr	r0, [pc, #332]	; (8000644 <fsm_manual_run+0x2c8>)
 80004f8:	f001 f986 	bl	8001808 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	4855      	ldr	r0, [pc, #340]	; (8000658 <fsm_manual_run+0x2dc>)
 8000502:	f001 f969 	bl	80017d8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_GPIO_Port);
 8000506:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800050a:	4853      	ldr	r0, [pc, #332]	; (8000658 <fsm_manual_run+0x2dc>)
 800050c:	f001 f97c 	bl	8001808 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4850      	ldr	r0, [pc, #320]	; (8000658 <fsm_manual_run+0x2dc>)
 8000516:	f001 f95f 	bl	80017d8 <HAL_GPIO_WritePin>
				setTimer(2, 25);
 800051a:	2119      	movs	r1, #25
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fc9b 	bl	8000e58 <setTimer>
			}
			break;
 8000522:	e104      	b.n	800072e <fsm_manual_run+0x3b2>
		case MODE_3:
			displayDuration(3, tempDuration);
 8000524:	4b45      	ldr	r3, [pc, #276]	; (800063c <fsm_manual_run+0x2c0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	2003      	movs	r0, #3
 800052c:	f7ff ff16 	bl	800035c <displayDuration>
			if (isButtonPressed(0) == 1){
 8000530:	2000      	movs	r0, #0
 8000532:	f7ff fe0b 	bl	800014c <isButtonPressed>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <fsm_manual_run+0x1ce>
				tempDuration = GREEN_DURATION;
 800053c:	4b47      	ldr	r3, [pc, #284]	; (800065c <fsm_manual_run+0x2e0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a3e      	ldr	r2, [pc, #248]	; (800063c <fsm_manual_run+0x2c0>)
 8000542:	6013      	str	r3, [r2, #0]
				changeMode(MODE_4);
 8000544:	200e      	movs	r0, #14
 8000546:	f7ff fef1 	bl	800032c <changeMode>
			}
			if (isButtonPressed(1) == 1){
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff fdfe 	bl	800014c <isButtonPressed>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	d112      	bne.n	800057c <fsm_manual_run+0x200>
				tempDuration++;
 8000556:	4b39      	ldr	r3, [pc, #228]	; (800063c <fsm_manual_run+0x2c0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	4a37      	ldr	r2, [pc, #220]	; (800063c <fsm_manual_run+0x2c0>)
 800055e:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <fsm_manual_run+0x2c0>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b3b      	ldr	r3, [pc, #236]	; (8000654 <fsm_manual_run+0x2d8>)
 8000566:	fb83 1302 	smull	r1, r3, r3, r2
 800056a:	1159      	asrs	r1, r3, #5
 800056c:	17d3      	asrs	r3, r2, #31
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	2164      	movs	r1, #100	; 0x64
 8000572:	fb01 f303 	mul.w	r3, r1, r3
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	4a30      	ldr	r2, [pc, #192]	; (800063c <fsm_manual_run+0x2c0>)
 800057a:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(2) == 1){
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff fde5 	bl	800014c <isButtonPressed>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d103      	bne.n	8000590 <fsm_manual_run+0x214>
				YELLOW_DURATION = tempDuration;
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <fsm_manual_run+0x2c0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a30      	ldr	r2, [pc, #192]	; (8000650 <fsm_manual_run+0x2d4>)
 800058e:	6013      	str	r3, [r2, #0]
			}
			if (isTimerOn(2) == 1){
 8000590:	2002      	movs	r0, #2
 8000592:	f000 fcc5 	bl	8000f20 <isTimerOn>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	f040 80ca 	bne.w	8000732 <fsm_manual_run+0x3b6>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <fsm_manual_run+0x2c8>)
 80005a4:	f001 f930 	bl	8001808 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 80005a8:	2108      	movs	r1, #8
 80005aa:	482b      	ldr	r0, [pc, #172]	; (8000658 <fsm_manual_run+0x2dc>)
 80005ac:	f001 f92c 	bl	8001808 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 80005b0:	2120      	movs	r1, #32
 80005b2:	4829      	ldr	r0, [pc, #164]	; (8000658 <fsm_manual_run+0x2dc>)
 80005b4:	f001 f928 	bl	8001808 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 80005b8:	2110      	movs	r1, #16
 80005ba:	4827      	ldr	r0, [pc, #156]	; (8000658 <fsm_manual_run+0x2dc>)
 80005bc:	f001 f924 	bl	8001808 <HAL_GPIO_TogglePin>
				setTimer(2, 25);
 80005c0:	2119      	movs	r1, #25
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 fc48 	bl	8000e58 <setTimer>
			}
			break;
 80005c8:	e0b3      	b.n	8000732 <fsm_manual_run+0x3b6>
		case MODE_4:
			displayDuration(4, tempDuration);
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <fsm_manual_run+0x2c0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	2004      	movs	r0, #4
 80005d2:	f7ff fec3 	bl	800035c <displayDuration>
			if (isButtonPressed(0) == 1){
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fdb8 	bl	800014c <isButtonPressed>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d15e      	bne.n	80006a0 <fsm_manual_run+0x324>
				LED_STATE [0] = INIT_STATE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <fsm_manual_run+0x2cc>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
				LED_STATE [1] = INIT_STATE;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <fsm_manual_run+0x2cc>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
				if(RED_DURATION != YELLOW_DURATION + GREEN_DURATION || !RED_DURATION || !YELLOW_DURATION || !GREEN_DURATION){
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <fsm_manual_run+0x2d4>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <fsm_manual_run+0x2e0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	441a      	add	r2, r3
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <fsm_manual_run+0x2bc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d10b      	bne.n	8000618 <fsm_manual_run+0x29c>
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <fsm_manual_run+0x2bc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d007      	beq.n	8000618 <fsm_manual_run+0x29c>
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <fsm_manual_run+0x2d4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <fsm_manual_run+0x29c>
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <fsm_manual_run+0x2e0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d129      	bne.n	800066c <fsm_manual_run+0x2f0>
					RED_DURATION =RED_INNIT;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <fsm_manual_run+0x2e4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <fsm_manual_run+0x2bc>)
 800061e:	6013      	str	r3, [r2, #0]
					YELLOW_DURATION= YELLOW_INNIT;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <fsm_manual_run+0x2e8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <fsm_manual_run+0x2d4>)
 8000626:	6013      	str	r3, [r2, #0]
					GREEN_DURATION = GREEN_INNIT;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <fsm_manual_run+0x2ec>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <fsm_manual_run+0x2e0>)
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	e028      	b.n	8000684 <fsm_manual_run+0x308>
 8000632:	bf00      	nop
 8000634:	20000008 	.word	0x20000008
 8000638:	2000000c 	.word	0x2000000c
 800063c:	200000c4 	.word	0x200000c4
 8000640:	200000c8 	.word	0x200000c8
 8000644:	40010800 	.word	0x40010800
 8000648:	20000000 	.word	0x20000000
 800064c:	20000024 	.word	0x20000024
 8000650:	20000010 	.word	0x20000010
 8000654:	51eb851f 	.word	0x51eb851f
 8000658:	40010c00 	.word	0x40010c00
 800065c:	20000014 	.word	0x20000014
 8000660:	20000018 	.word	0x20000018
 8000664:	2000001c 	.word	0x2000001c
 8000668:	20000020 	.word	0x20000020
				}
				else{
					RED_INNIT = RED_DURATION;
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <fsm_manual_run+0x3c4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a34      	ldr	r2, [pc, #208]	; (8000744 <fsm_manual_run+0x3c8>)
 8000672:	6013      	str	r3, [r2, #0]
					YELLOW_INNIT = YELLOW_DURATION;
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <fsm_manual_run+0x3cc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a34      	ldr	r2, [pc, #208]	; (800074c <fsm_manual_run+0x3d0>)
 800067a:	6013      	str	r3, [r2, #0]
					GREEN_INNIT = GREEN_DURATION;
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <fsm_manual_run+0x3d4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a34      	ldr	r2, [pc, #208]	; (8000754 <fsm_manual_run+0x3d8>)
 8000682:	6013      	str	r3, [r2, #0]
				}
				PEDESTRIAN_DURATION = 2 * (RED_DURATION + YELLOW_DURATION + GREEN_DURATION);
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <fsm_manual_run+0x3c4>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <fsm_manual_run+0x3cc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	441a      	add	r2, r3
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <fsm_manual_run+0x3d4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <fsm_manual_run+0x3dc>)
 8000698:	6013      	str	r3, [r2, #0]
				changeMode(MODE_1);
 800069a:	200b      	movs	r0, #11
 800069c:	f7ff fe46 	bl	800032c <changeMode>
			}
			if (isButtonPressed(1) == 1){
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff fd53 	bl	800014c <isButtonPressed>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d112      	bne.n	80006d2 <fsm_manual_run+0x356>
				tempDuration++;
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <fsm_manual_run+0x3e0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <fsm_manual_run+0x3e0>)
 80006b4:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <fsm_manual_run+0x3e0>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <fsm_manual_run+0x3e4>)
 80006bc:	fb83 1302 	smull	r1, r3, r3, r2
 80006c0:	1159      	asrs	r1, r3, #5
 80006c2:	17d3      	asrs	r3, r2, #31
 80006c4:	1acb      	subs	r3, r1, r3
 80006c6:	2164      	movs	r1, #100	; 0x64
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <fsm_manual_run+0x3e0>)
 80006d0:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(2) == 1){
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff fd3a 	bl	800014c <isButtonPressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d103      	bne.n	80006e6 <fsm_manual_run+0x36a>
				GREEN_DURATION = tempDuration;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <fsm_manual_run+0x3e0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <fsm_manual_run+0x3d4>)
 80006e4:	6013      	str	r3, [r2, #0]
			}
			if (isTimerOn(2) == 1){
 80006e6:	2002      	movs	r0, #2
 80006e8:	f000 fc1a 	bl	8000f20 <isTimerOn>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d121      	bne.n	8000736 <fsm_manual_run+0x3ba>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f8:	481a      	ldr	r0, [pc, #104]	; (8000764 <fsm_manual_run+0x3e8>)
 80006fa:	f001 f86d 	bl	80017d8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 80006fe:	2108      	movs	r1, #8
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <fsm_manual_run+0x3ec>)
 8000702:	f001 f881 	bl	8001808 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2120      	movs	r1, #32
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <fsm_manual_run+0x3ec>)
 800070c:	f001 f864 	bl	80017d8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 8000710:	2110      	movs	r1, #16
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <fsm_manual_run+0x3ec>)
 8000714:	f001 f878 	bl	8001808 <HAL_GPIO_TogglePin>
				setTimer(2, 25);
 8000718:	2119      	movs	r1, #25
 800071a:	2002      	movs	r0, #2
 800071c:	f000 fb9c 	bl	8000e58 <setTimer>
			}
			break;
 8000720:	e009      	b.n	8000736 <fsm_manual_run+0x3ba>
		default:
			MODE=MODE_1;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <fsm_manual_run+0x3f0>)
 8000724:	220b      	movs	r2, #11
 8000726:	601a      	str	r2, [r3, #0]
			break;
 8000728:	e006      	b.n	8000738 <fsm_manual_run+0x3bc>
			break;
 800072a:	bf00      	nop
 800072c:	e004      	b.n	8000738 <fsm_manual_run+0x3bc>
			break;
 800072e:	bf00      	nop
 8000730:	e002      	b.n	8000738 <fsm_manual_run+0x3bc>
			break;
 8000732:	bf00      	nop
 8000734:	e000      	b.n	8000738 <fsm_manual_run+0x3bc>
			break;
 8000736:	bf00      	nop
	}
	ped_run();
 8000738:	f000 f9d4 	bl	8000ae4 <ped_run>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000000c 	.word	0x2000000c
 8000744:	20000018 	.word	0x20000018
 8000748:	20000010 	.word	0x20000010
 800074c:	2000001c 	.word	0x2000001c
 8000750:	20000014 	.word	0x20000014
 8000754:	20000020 	.word	0x20000020
 8000758:	20000024 	.word	0x20000024
 800075c:	200000c4 	.word	0x200000c4
 8000760:	51eb851f 	.word	0x51eb851f
 8000764:	40010800 	.word	0x40010800
 8000768:	40010c00 	.word	0x40010c00
 800076c:	20000008 	.word	0x20000008

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fd3c 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f810 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f940 	bl	8000a00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000780:	f000 f84e 	bl	8000820 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000784:	f000 f89a 	bl	80008bc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000788:	f000 f910 	bl	80009ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <main+0x28>)
 800078e:	f001 fcb3 	bl	80020f8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 8000792:	f7ff fdf3 	bl	800037c <fsm_manual_run>
 8000796:	e7fc      	b.n	8000792 <main+0x22>
 8000798:	20000178 	.word	0x20000178

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2228      	movs	r2, #40	; 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fcee 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c6:	2310      	movs	r3, #16
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f82d 	bl	800183c <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007e8:	f000 f976 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fa98 	bl	8001d3c <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000812:	f000 f961 	bl	8000ad8 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3740      	adds	r7, #64	; 0x40
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM2_Init+0x98>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000846:	f240 227f 	movw	r2, #639	; 0x27f
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_TIM2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_TIM2_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000866:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000868:	f001 fbf6 	bl	8002058 <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 f931 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0x98>)
 8000884:	f001 feac 	bl	80025e0 <HAL_TIM_ConfigClockSource>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800088e:	f000 f923 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM2_Init+0x98>)
 80008a0:	f002 fa0a 	bl	8002cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f915 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000178 	.word	0x20000178

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	; 0x38
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_TIM3_Init+0xe8>)
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <MX_TIM3_Init+0xec>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_TIM3_Init+0xe8>)
 80008f4:	f240 227f 	movw	r2, #639	; 0x27f
 80008f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_TIM3_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000906:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_TIM3_Init+0xe8>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000914:	4823      	ldr	r0, [pc, #140]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000916:	f001 fb9f 	bl	8002058 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000920:	f000 f8da 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092e:	4619      	mov	r1, r3
 8000930:	481c      	ldr	r0, [pc, #112]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000932:	f001 fe55 	bl	80025e0 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800093c:	f000 f8cc 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000940:	4818      	ldr	r0, [pc, #96]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000942:	f001 fc2b 	bl	800219c <HAL_TIM_PWM_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800094c:	f000 f8c4 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4619      	mov	r1, r3
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000960:	f002 f9aa 	bl	8002cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800096a:	f000 f8b5 	bl	8000ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	; 0x60
 8000970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000986:	f001 fd69 	bl	800245c <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000990:	f000 f8a2 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <MX_TIM3_Init+0xe8>)
 8000996:	f000 f961 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 800099a:	bf00      	nop
 800099c:	3738      	adds	r7, #56	; 0x38
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000011c 	.word	0x2000011c
 80009a8:	40000400 	.word	0x40000400

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART2_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f002 f9d8 	bl	8002d98 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 f873 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001c0 	.word	0x200001c0
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WALKER_BUTTON_Pin|BUTTON_1_Pin|BUTTON_2_Pin|WALKER_BUZZER_Pin
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f240 5153 	movw	r1, #1363	; 0x553
 8000a62:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_GPIO_Init+0xbc>)
 8000a64:	f000 feb8 	bl	80017d8 <HAL_GPIO_WritePin>
                          |WALKER_LIGHT_1_Pin|TRAFFIC_LIGHT_1_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUTTON_3_Pin|WALKER_LIGHT_0_Pin|TRAFFIC_LIGHT_1_1_Pin|TRAFFIC_LIGHT_2_1_Pin
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f240 4139 	movw	r1, #1081	; 0x439
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0xc0>)
 8000a70:	f000 feb2 	bl	80017d8 <HAL_GPIO_WritePin>
                          |TRAFFIC_LIGHT_2_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : WALKER_BUTTON_Pin BUTTON_1_Pin BUTTON_2_Pin WALKER_BUZZER_Pin
                           WALKER_LIGHT_1_Pin TRAFFIC_LIGHT_1_0_Pin */
  GPIO_InitStruct.Pin = WALKER_BUTTON_Pin|BUTTON_1_Pin|BUTTON_2_Pin|WALKER_BUZZER_Pin
 8000a74:	f240 5353 	movw	r3, #1363	; 0x553
 8000a78:	613b      	str	r3, [r7, #16]
                          |WALKER_LIGHT_1_Pin|TRAFFIC_LIGHT_1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xbc>)
 8000a8e:	f000 fd1f 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin WALKER_LIGHT_0_Pin TRAFFIC_LIGHT_1_1_Pin TRAFFIC_LIGHT_2_1_Pin
                           TRAFFIC_LIGHT_2_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|WALKER_LIGHT_0_Pin|TRAFFIC_LIGHT_1_1_Pin|TRAFFIC_LIGHT_2_1_Pin
 8000a92:	f240 4339 	movw	r3, #1081	; 0x439
 8000a96:	613b      	str	r3, [r7, #16]
                          |TRAFFIC_LIGHT_2_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0xc0>)
 8000aac:	f000 fd10 	bl	80014d0 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	  timerRun();
 8000acc:	f000 fa20 	bl	8000f10 <timerRun>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <ped_run>:
 *  Created on: Dec 5, 2023
 *      Author: MY PC
 */
#include "pedestrian.h"

void ped_run(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

	if (PEDESTRIAN_MODE) {
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <ped_run+0x74>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d031      	beq.n	8000b54 <ped_run+0x70>
		if (LED_STATE[0] == GREEN_STATE || LED_STATE[0] == YELLOW_STATE) {
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <ped_run+0x78>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d003      	beq.n	8000b00 <ped_run+0x1c>
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <ped_run+0x78>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d10c      	bne.n	8000b1a <ped_run+0x36>
			HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin,
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b06:	4816      	ldr	r0, [pc, #88]	; (8000b60 <ped_run+0x7c>)
 8000b08:	f000 fe66 	bl	80017d8 <HAL_GPIO_WritePin>
					RESET);
			HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin,
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <ped_run+0x80>)
 8000b14:	f000 fe60 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin,
					SET);
		}
	}

}
 8000b18:	e01c      	b.n	8000b54 <ped_run+0x70>
		} else if (LED_STATE[0] == RED_STATE) {
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <ped_run+0x78>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d10c      	bne.n	8000b3c <ped_run+0x58>
			HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin,
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <ped_run+0x7c>)
 8000b2a:	f000 fe55 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin,
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <ped_run+0x80>)
 8000b36:	f000 fe4f 	bl	80017d8 <HAL_GPIO_WritePin>
}
 8000b3a:	e00b      	b.n	8000b54 <ped_run+0x70>
			HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin,
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <ped_run+0x7c>)
 8000b44:	f000 fe48 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin,
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <ped_run+0x80>)
 8000b50:	f000 fe42 	bl	80017d8 <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000c8 	.word	0x200000c8
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	40010800 	.word	0x40010800

08000b68 <buzzer>:

void buzzer(unsigned int freq){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, freq);
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <buzzer+0x1c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	2000011c 	.word	0x2000011c

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_MspInit+0x5c>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <HAL_MspInit+0x5c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_MspInit+0x5c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x5c>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x5c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x5c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_MspInit+0x60>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_MspInit+0x60>)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000

08000bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bfc:	d114      	bne.n	8000c28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_TIM_Base_MspInit+0x68>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_TIM_Base_MspInit+0x68>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_TIM_Base_MspInit+0x68>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	201c      	movs	r0, #28
 8000c1c:	f000 fc21 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c20:	201c      	movs	r0, #28
 8000c22:	f000 fc3a 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c26:	e010      	b.n	8000c4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_TIM_Base_MspInit+0x6c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d10b      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_TIM_Base_MspInit+0x68>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_TIM_Base_MspInit+0x68>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_TIM_Base_MspInit+0x68>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40000400 	.word	0x40000400

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_TIM_MspPostInit+0x7c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d129      	bne.n	8000cd0 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_TIM_MspPostInit+0x80>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_TIM_MspPostInit+0x80>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_TIM_MspPostInit+0x80>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <HAL_TIM_MspPostInit+0x84>)
 8000ca8:	f000 fc12 	bl	80014d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_TIM_MspPostInit+0x88>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_TIM_MspPostInit+0x88>)
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d12f      	bne.n	8000d68 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d12:	61d3      	str	r3, [r2, #28]
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_UART_MspInit+0x90>)
 8000d4c:	f000 fbc0 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d50:	2308      	movs	r3, #8
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_UART_MspInit+0x90>)
 8000d64:	f000 fbb4 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 fa5b 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM2_IRQHandler+0x10>)
 8000dd2:	f001 fa3b 	bl	800224c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000178 	.word	0x20000178

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f002 f992 	bl	8003138 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20005000 	.word	0x20005000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200000d4 	.word	0x200000d4
 8000e48:	20000220 	.word	0x20000220

08000e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <setTimer>:
		timer[index].flag=1;
		timerInnit(index--);
	}
}

void setTimer( unsigned int index, unsigned int count){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	if(index >= NUMBER_OF_TIMER){
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d80b      	bhi.n	8000e80 <setTimer+0x28>
		return;
	}
	timer[index].count=count;
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <setTimer+0x34>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[index].flag=0;
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <setTimer+0x34>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	e000      	b.n	8000e82 <setTimer+0x2a>
		return;
 8000e80:	bf00      	nop
}
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000e0 	.word	0x200000e0

08000e90 <RunTimer>:
void RunTimer(int index){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	if(index ==0){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <RunTimer+0x3c>
		if(timer[index].count ==0){
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <RunTimer+0x7c>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <RunTimer+0x28>
			timer[index].flag=1;
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <RunTimer+0x7c>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
		} else {
			timer[index].count--;
		}
		RunTimer(index--);
	}
}
 8000eb6:	e025      	b.n	8000f04 <RunTimer+0x74>
			timer[index].count--;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <RunTimer+0x7c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	4912      	ldr	r1, [pc, #72]	; (8000f0c <RunTimer+0x7c>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8000eca:	e01b      	b.n	8000f04 <RunTimer+0x74>
		if (timer[index].count == 0) {
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <RunTimer+0x7c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <RunTimer+0x56>
			timer[index].flag = 1;
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <RunTimer+0x7c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4413      	add	r3, r2
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	e008      	b.n	8000ef8 <RunTimer+0x68>
			timer[index].count--;
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <RunTimer+0x7c>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	4906      	ldr	r1, [pc, #24]	; (8000f0c <RunTimer+0x7c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		RunTimer(index--);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	1e5a      	subs	r2, r3, #1
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ffc6 	bl	8000e90 <RunTimer>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000e0 	.word	0x200000e0

08000f10 <timerRun>:

void timerRun(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	RunTimer(NUMBER_OF_TIMER);
 8000f14:	2005      	movs	r0, #5
 8000f16:	f7ff ffbb 	bl	8000e90 <RunTimer>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <isTimerOn>:

int isTimerOn(unsigned index){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	return timer[index].flag;
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <isTimerOn+0x1c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4413      	add	r3, r2
 8000f30:	685b      	ldr	r3, [r3, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	200000e0 	.word	0x200000e0

08000f40 <setTrafficLightDefault>:


// Red mean light 0 on, light 1 off
// Green mean light 0 off, light 1 on
// Amber mean light 0 on, light 1 on
void setTrafficLightDefault(int lane){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	switch(lane){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <setTrafficLightDefault+0x16>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d012      	beq.n	8000f7a <setTrafficLightDefault+0x3a>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, SET);
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, SET);
		break;
	default:
		break;
 8000f54:	e022      	b.n	8000f9c <setTrafficLightDefault+0x5c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <setTrafficLightDefault+0x70>)
 8000f5e:	f000 fc3b 	bl	80017d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2108      	movs	r1, #8
 8000f66:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <setTrafficLightDefault+0x74>)
 8000f68:	f000 fc36 	bl	80017d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <setTrafficLightDefault+0x74>)
 8000f74:	f000 fc30 	bl	80017d8 <HAL_GPIO_WritePin>
		break;
 8000f78:	e010      	b.n	8000f9c <setTrafficLightDefault+0x5c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <setTrafficLightDefault+0x74>)
 8000f80:	f000 fc2a 	bl	80017d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <setTrafficLightDefault+0x74>)
 8000f8a:	f000 fc25 	bl	80017d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <setTrafficLightDefault+0x70>)
 8000f96:	f000 fc1f 	bl	80017d8 <HAL_GPIO_WritePin>
		break;
 8000f9a:	bf00      	nop
	}
	COUNTER[lane]= 0;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <setTrafficLightDefault+0x78>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	200000cc 	.word	0x200000cc

08000fbc <setRed>:

void setRed(int lane){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <setRed+0x16>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d00c      	beq.n	8000fea <setRed+0x2e>
 8000fd0:	e016      	b.n	8001000 <setRed+0x44>
	case 0:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <setRed+0x78>)
 8000fda:	f000 fbfd 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <setRed+0x7c>)
 8000fe4:	f000 fbf8 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		break;
 8000fe8:	e020      	b.n	800102c <setRed+0x70>
	case 1:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <setRed+0x7c>)
 8000ff0:	f000 fbf2 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <setRed+0x7c>)
 8000ffa:	f000 fbed 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		break;
 8000ffe:	e015      	b.n	800102c <setRed+0x70>
	default:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <setRed+0x78>)
 8001008:	f000 fbe6 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 800100c:	2201      	movs	r2, #1
 800100e:	2108      	movs	r1, #8
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <setRed+0x7c>)
 8001012:	f000 fbe1 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001016:	2201      	movs	r2, #1
 8001018:	2120      	movs	r1, #32
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <setRed+0x7c>)
 800101c:	f000 fbdc 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8001020:	2201      	movs	r2, #1
 8001022:	2110      	movs	r1, #16
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <setRed+0x7c>)
 8001026:	f000 fbd7 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		break;
 800102a:	bf00      	nop

	}
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010800 	.word	0x40010800
 8001038:	40010c00 	.word	0x40010c00

0800103c <setGreen>:

void setGreen(int lane){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <setGreen+0x16>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d00c      	beq.n	800106a <setGreen+0x2e>
 8001050:	e016      	b.n	8001080 <setGreen+0x44>
	case 0:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001058:	4816      	ldr	r0, [pc, #88]	; (80010b4 <setGreen+0x78>)
 800105a:	f000 fbbd 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 800105e:	2200      	movs	r2, #0
 8001060:	2108      	movs	r1, #8
 8001062:	4815      	ldr	r0, [pc, #84]	; (80010b8 <setGreen+0x7c>)
 8001064:	f000 fbb8 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		break;
 8001068:	e020      	b.n	80010ac <setGreen+0x70>
	case 1:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 800106a:	2201      	movs	r2, #1
 800106c:	2120      	movs	r1, #32
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <setGreen+0x7c>)
 8001070:	f000 fbb2 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <setGreen+0x7c>)
 800107a:	f000 fbad 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		break;
 800107e:	e015      	b.n	80010ac <setGreen+0x70>
	default:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <setGreen+0x78>)
 8001088:	f000 fba6 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 800108c:	2201      	movs	r2, #1
 800108e:	2108      	movs	r1, #8
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <setGreen+0x7c>)
 8001092:	f000 fba1 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001096:	2201      	movs	r2, #1
 8001098:	2120      	movs	r1, #32
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <setGreen+0x7c>)
 800109c:	f000 fb9c 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 80010a0:	2201      	movs	r2, #1
 80010a2:	2110      	movs	r1, #16
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <setGreen+0x7c>)
 80010a6:	f000 fb97 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		break;
 80010aa:	bf00      	nop

	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40010800 	.word	0x40010800
 80010b8:	40010c00 	.word	0x40010c00

080010bc <setAmber>:

void setAmber(int lane){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	switch (lane) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <setAmber+0x16>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d00c      	beq.n	80010ea <setAmber+0x2e>
 80010d0:	e016      	b.n	8001100 <setAmber+0x44>
	case 0:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <setAmber+0x78>)
 80010da:	f000 fb7d 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 80010de:	2200      	movs	r2, #0
 80010e0:	2108      	movs	r1, #8
 80010e2:	4815      	ldr	r0, [pc, #84]	; (8001138 <setAmber+0x7c>)
 80010e4:	f000 fb78 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		break;
 80010e8:	e020      	b.n	800112c <setAmber+0x70>
	case 1:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 80010ea:	2200      	movs	r2, #0
 80010ec:	2120      	movs	r1, #32
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <setAmber+0x7c>)
 80010f0:	f000 fb72 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 80010f4:	2200      	movs	r2, #0
 80010f6:	2110      	movs	r1, #16
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <setAmber+0x7c>)
 80010fa:	f000 fb6d 	bl	80017d8 <HAL_GPIO_WritePin>
				RESET);
		break;
 80010fe:	e015      	b.n	800112c <setAmber+0x70>
	default:
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <setAmber+0x78>)
 8001108:	f000 fb66 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 800110c:	2201      	movs	r2, #1
 800110e:	2108      	movs	r1, #8
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <setAmber+0x7c>)
 8001112:	f000 fb61 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001116:	2201      	movs	r2, #1
 8001118:	2120      	movs	r1, #32
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <setAmber+0x7c>)
 800111c:	f000 fb5c 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <setAmber+0x7c>)
 8001126:	f000 fb57 	bl	80017d8 <HAL_GPIO_WritePin>
				SET);
		break;
 800112a:	bf00      	nop

	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010800 	.word	0x40010800
 8001138:	40010c00 	.word	0x40010c00

0800113c <Display>:
 *  Created on: Dec 8, 2023
 *      Author: MY PC
 */
#include "transfer.h"

void Display(int n){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(n < 10){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b09      	cmp	r3, #9
 8001148:	dc0f      	bgt.n	800116a <Display+0x2e>
		HAL_UART_Transmit(&huart2, ( void *) info1, sprintf(info1, "!7SEG:0%d#", COUNTER[0]), 1000);
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <Display+0x54>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4910      	ldr	r1, [pc, #64]	; (8001194 <Display+0x58>)
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <Display+0x5c>)
 8001154:	f002 f822 	bl	800319c <siprintf>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	490d      	ldr	r1, [pc, #52]	; (8001198 <Display+0x5c>)
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <Display+0x60>)
 8001164:	f001 fe68 	bl	8002e38 <HAL_UART_Transmit>
	}
	else{
		HAL_UART_Transmit(&huart2, ( void *) info1, sprintf(info1, "!7SEG:%d#", COUNTER[0]), 1000);
	}
}
 8001168:	e00e      	b.n	8001188 <Display+0x4c>
		HAL_UART_Transmit(&huart2, ( void *) info1, sprintf(info1, "!7SEG:%d#", COUNTER[0]), 1000);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <Display+0x54>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	490b      	ldr	r1, [pc, #44]	; (80011a0 <Display+0x64>)
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <Display+0x5c>)
 8001174:	f002 f812 	bl	800319c <siprintf>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	4905      	ldr	r1, [pc, #20]	; (8001198 <Display+0x5c>)
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <Display+0x60>)
 8001184:	f001 fe58 	bl	8002e38 <HAL_UART_Transmit>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000cc 	.word	0x200000cc
 8001194:	08003a28 	.word	0x08003a28
 8001198:	20000164 	.word	0x20000164
 800119c:	200001c0 	.word	0x200001c0
 80011a0:	08003a34 	.word	0x08003a34

080011a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a4:	f7ff fe52 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011aa:	490c      	ldr	r1, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c0:	4c09      	ldr	r4, [pc, #36]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f001 ffb9 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d2:	f7ff facd 	bl	8000770 <main>
  bx lr
 80011d6:	4770      	bx	lr
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80011e0:	08003aa8 	.word	0x08003aa8
  ldr r2, =_sbss
 80011e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80011e8:	2000021c 	.word	0x2000021c

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x28>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x28>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f923 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fcbc 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f93b 	bl	80014b6 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f903 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000028 	.word	0x20000028
 8001274:	20000030 	.word	0x20000030
 8001278:	2000002c 	.word	0x2000002c

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <HAL_IncTick+0x20>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	20000030 	.word	0x20000030
 800129c:	20000208 	.word	0x20000208

080012a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_GetTick+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000208 	.word	0x20000208

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <__NVIC_EnableIRQ+0x34>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff90 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff2d 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff42 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff35 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b08b      	sub	sp, #44	; 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e169      	b.n	80017b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e4:	2201      	movs	r2, #1
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8158 	bne.w	80017b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a9a      	ldr	r2, [pc, #616]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d05e      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800150c:	4a98      	ldr	r2, [pc, #608]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d875      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001512:	4a98      	ldr	r2, [pc, #608]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d058      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001518:	4a96      	ldr	r2, [pc, #600]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d86f      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800151e:	4a96      	ldr	r2, [pc, #600]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d052      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001524:	4a94      	ldr	r2, [pc, #592]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d869      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800152a:	4a94      	ldr	r2, [pc, #592]	; (800177c <HAL_GPIO_Init+0x2ac>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04c      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001530:	4a92      	ldr	r2, [pc, #584]	; (800177c <HAL_GPIO_Init+0x2ac>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d863      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001536:	4a92      	ldr	r2, [pc, #584]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d046      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800153c:	4a90      	ldr	r2, [pc, #576]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d85d      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d82a      	bhi.n	800159c <HAL_GPIO_Init+0xcc>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d859      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <HAL_GPIO_Init+0x80>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080015b7 	.word	0x080015b7
 800155c:	080015f9 	.word	0x080015f9
 8001560:	080015ff 	.word	0x080015ff
 8001564:	080015ff 	.word	0x080015ff
 8001568:	080015ff 	.word	0x080015ff
 800156c:	080015ff 	.word	0x080015ff
 8001570:	080015ff 	.word	0x080015ff
 8001574:	080015ff 	.word	0x080015ff
 8001578:	080015ff 	.word	0x080015ff
 800157c:	080015ff 	.word	0x080015ff
 8001580:	080015ff 	.word	0x080015ff
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015ff 	.word	0x080015ff
 800158c:	080015ff 	.word	0x080015ff
 8001590:	080015ff 	.word	0x080015ff
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c1 	.word	0x080015c1
 800159c:	4a79      	ldr	r2, [pc, #484]	; (8001784 <HAL_GPIO_Init+0x2b4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a2:	e02c      	b.n	80015fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e029      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	3304      	adds	r3, #4
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e024      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	3308      	adds	r3, #8
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e01f      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	330c      	adds	r3, #12
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e01a      	b.n	8001600 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d2:	2304      	movs	r3, #4
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e013      	b.n	8001600 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	611a      	str	r2, [r3, #16]
          break;
 80015ea:	e009      	b.n	8001600 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	615a      	str	r2, [r3, #20]
          break;
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x130>
          break;
 80015fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d801      	bhi.n	800160a <HAL_GPIO_Init+0x13a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e001      	b.n	800160e <HAL_GPIO_Init+0x13e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d802      	bhi.n	800161c <HAL_GPIO_Init+0x14c>
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x152>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3b08      	subs	r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	210f      	movs	r1, #15
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80b1 	beq.w	80017b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2bc>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a40      	ldr	r2, [pc, #256]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1ec>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_GPIO_Init+0x2c4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1e8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <HAL_GPIO_Init+0x2cc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016bc:	2300      	movs	r3, #0
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ce:	492f      	ldr	r1, [pc, #188]	; (800178c <HAL_GPIO_Init+0x2bc>)
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	492c      	ldr	r1, [pc, #176]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4928      	ldr	r1, [pc, #160]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001700:	4013      	ands	r3, r2
 8001702:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4922      	ldr	r1, [pc, #136]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	491e      	ldr	r1, [pc, #120]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4918      	ldr	r1, [pc, #96]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4914      	ldr	r1, [pc, #80]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d021      	beq.n	80017a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e021      	b.n	80017b2 <HAL_GPIO_Init+0x2e2>
 800176e:	bf00      	nop
 8001770:	10320000 	.word	0x10320000
 8001774:	10310000 	.word	0x10310000
 8001778:	10220000 	.word	0x10220000
 800177c:	10210000 	.word	0x10210000
 8001780:	10120000 	.word	0x10120000
 8001784:	10110000 	.word	0x10110000
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000
 8001790:	40010800 	.word	0x40010800
 8001794:	40010c00 	.word	0x40010c00
 8001798:	40011000 	.word	0x40011000
 800179c:	40011400 	.word	0x40011400
 80017a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4909      	ldr	r1, [pc, #36]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae8e 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	372c      	adds	r7, #44	; 0x2c
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43d9      	mvns	r1, r3
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	400b      	ands	r3, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
	...

0800183c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e26c      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8087 	beq.w	800196a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b04      	cmp	r3, #4
 8001866:	d00c      	beq.n	8001882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001868:	4b8f      	ldr	r3, [pc, #572]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d112      	bne.n	800189a <HAL_RCC_OscConfig+0x5e>
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d10b      	bne.n	800189a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	4b89      	ldr	r3, [pc, #548]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d06c      	beq.n	8001968 <HAL_RCC_OscConfig+0x12c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d168      	bne.n	8001968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e246      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x76>
 80018a4:	4b80      	ldr	r3, [pc, #512]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a7f      	ldr	r2, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e02e      	b.n	8001910 <HAL_RCC_OscConfig+0xd4>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x98>
 80018ba:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a77      	ldr	r2, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xd4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0xbc>
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a71      	ldr	r2, [pc, #452]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xd4>
 80018f8:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6a      	ldr	r2, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a67      	ldr	r2, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fcc2 	bl	80012a0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fcbe 	bl	80012a0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1fa      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xe4>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fcae 	bl	80012a0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fcaa 	bl	80012a0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1e6      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x10c>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d063      	beq.n	8001a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x18c>
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x176>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1ba      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4939      	ldr	r1, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e03a      	b.n	8001a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <HAL_RCC_OscConfig+0x270>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fc63 	bl	80012a0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff fc5f 	bl	80012a0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e19b      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4927      	ldr	r1, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x270>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fc42 	bl	80012a0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff fc3e 	bl	80012a0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e17a      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d03a      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d019      	beq.n	8001a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fc22 	bl	80012a0 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff fc1e 	bl	80012a0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e15a      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f000 facc 	bl	800201c <RCC_Delay>
 8001a84:	e01c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fc08 	bl	80012a0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fc04 	bl	80012a0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e140      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	42420000 	.word	0x42420000
 8001ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b9e      	ldr	r3, [pc, #632]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e9      	bne.n	8001a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80a6 	beq.w	8001c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b97      	ldr	r3, [pc, #604]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10d      	bne.n	8001afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b94      	ldr	r3, [pc, #592]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a93      	ldr	r2, [pc, #588]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b91      	ldr	r3, [pc, #580]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b8e      	ldr	r3, [pc, #568]	; (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a8a      	ldr	r2, [pc, #552]	; (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff fbc5 	bl	80012a0 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff fbc1 	bl	80012a0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0fd      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	4b81      	ldr	r3, [pc, #516]	; (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x312>
 8001b40:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_OscConfig+0x36e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x334>
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a75      	ldr	r2, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a72      	ldr	r2, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	e01c      	b.n	8001baa <HAL_RCC_OscConfig+0x36e>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x356>
 8001b78:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a6c      	ldr	r2, [pc, #432]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a69      	ldr	r2, [pc, #420]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	e00b      	b.n	8001baa <HAL_RCC_OscConfig+0x36e>
 8001b92:	4b67      	ldr	r3, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a66      	ldr	r2, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a63      	ldr	r2, [pc, #396]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d015      	beq.n	8001bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fb75 	bl	80012a0 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff fb71 	bl	80012a0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0ab      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ee      	beq.n	8001bba <HAL_RCC_OscConfig+0x37e>
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fb5f 	bl	80012a0 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff fb5b 	bl	80012a0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e095      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8081 	beq.w	8001d26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d061      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d146      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <HAL_RCC_OscConfig+0x4fc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fb2f 	bl	80012a0 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fb2b 	bl	80012a0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e067      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d108      	bne.n	8001c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c6e:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	492d      	ldr	r1, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a19      	ldr	r1, [r3, #32]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	430b      	orrs	r3, r1
 8001c92:	4927      	ldr	r1, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_OscConfig+0x4fc>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff faff 	bl	80012a0 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff fafb 	bl	80012a0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e037      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x46a>
 8001cc4:	e02f      	b.n	8001d26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCC_OscConfig+0x4fc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fae8 	bl	80012a0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff fae4 	bl	80012a0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e020      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x498>
 8001cf2:	e018      	b.n	8001d26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e013      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
 8001d38:	42420060 	.word	0x42420060

08001d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0d0      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d910      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4965      	ldr	r1, [pc, #404]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b8      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	494d      	ldr	r1, [pc, #308]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d040      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e073      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e06b      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4936      	ldr	r1, [pc, #216]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fa38 	bl	80012a0 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff fa34 	bl	80012a0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e053      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d210      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	4922      	ldr	r1, [pc, #136]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e032      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4916      	ldr	r1, [pc, #88]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490e      	ldr	r1, [pc, #56]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eca:	f000 f821 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490a      	ldr	r1, [pc, #40]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f996 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08003a40 	.word	0x08003a40
 8001f08:	20000028 	.word	0x20000028
 8001f0c:	2000002c 	.word	0x2000002c

08001f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x30>
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x36>
 8001f3e:	e027      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f42:	613b      	str	r3, [r7, #16]
      break;
 8001f44:	e027      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0c9b      	lsrs	r3, r3, #18
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	0c5b      	lsrs	r3, r3, #17
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f72:	fb02 f203 	mul.w	r2, r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e004      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	613b      	str	r3, [r7, #16]
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f92:	613b      	str	r3, [r7, #16]
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	693b      	ldr	r3, [r7, #16]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	08003a58 	.word	0x08003a58
 8001fb0:	08003a68 	.word	0x08003a68
 8001fb4:	003d0900 	.word	0x003d0900

08001fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000028 	.word	0x20000028

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd0:	f7ff fff2 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08003a50 	.word	0x08003a50

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	f7ff ffde 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0adb      	lsrs	r3, r3, #11
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08003a50 	.word	0x08003a50

0800201c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <RCC_Delay+0x34>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <RCC_Delay+0x38>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a5b      	lsrs	r3, r3, #9
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002038:	bf00      	nop
  }
  while (Delay --);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	60fa      	str	r2, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f9      	bne.n	8002038 <RCC_Delay+0x1c>
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000028 	.word	0x20000028
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e041      	b.n	80020ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fdb4 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f000 fb8e 	bl	80027b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d001      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e03a      	b.n	8002186 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_TIM_Base_Start_IT+0x98>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0x58>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d009      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0x58>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_TIM_Base_Start_IT+0x9c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0x58>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_TIM_Base_Start_IT+0xa0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d111      	bne.n	8002174 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d010      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002172:	e007      	b.n	8002184 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800

0800219c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e041      	b.n	8002232 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f839 	bl	800223a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f000 faec 	bl	80027b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b02      	cmp	r3, #2
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0202 	mvn.w	r2, #2
 8002278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa76 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fa69 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fa78 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0204 	mvn.w	r2, #4
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fa4c 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fa3f 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fa4e 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b08      	cmp	r3, #8
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b08      	cmp	r3, #8
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0208 	mvn.w	r2, #8
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2204      	movs	r2, #4
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa22 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa15 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fa24 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b10      	cmp	r3, #16
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b10      	cmp	r3, #16
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0210 	mvn.w	r2, #16
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2208      	movs	r2, #8
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f9f8 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9eb 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f9fa 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0201 	mvn.w	r2, #1
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fb7a 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b80      	cmp	r3, #128	; 0x80
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fcc5 	bl	8002d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f9be 	bl	80027a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b20      	cmp	r3, #32
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b20      	cmp	r3, #32
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0220 	mvn.w	r2, #32
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fc90 	bl	8002d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e0ae      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	f200 809f 	bhi.w	80025c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024c5 	.word	0x080024c5
 8002494:	080025c9 	.word	0x080025c9
 8002498:	080025c9 	.word	0x080025c9
 800249c:	080025c9 	.word	0x080025c9
 80024a0:	08002505 	.word	0x08002505
 80024a4:	080025c9 	.word	0x080025c9
 80024a8:	080025c9 	.word	0x080025c9
 80024ac:	080025c9 	.word	0x080025c9
 80024b0:	08002547 	.word	0x08002547
 80024b4:	080025c9 	.word	0x080025c9
 80024b8:	080025c9 	.word	0x080025c9
 80024bc:	080025c9 	.word	0x080025c9
 80024c0:	08002587 	.word	0x08002587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f9d6 	bl	800287c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0208 	orr.w	r2, r2, #8
 80024de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0204 	bic.w	r2, r2, #4
 80024ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6999      	ldr	r1, [r3, #24]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	619a      	str	r2, [r3, #24]
      break;
 8002502:	e064      	b.n	80025ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fa1c 	bl	8002948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6999      	ldr	r1, [r3, #24]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	021a      	lsls	r2, r3, #8
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	619a      	str	r2, [r3, #24]
      break;
 8002544:	e043      	b.n	80025ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fa65 	bl	8002a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0208 	orr.w	r2, r2, #8
 8002560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0204 	bic.w	r2, r2, #4
 8002570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69d9      	ldr	r1, [r3, #28]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	61da      	str	r2, [r3, #28]
      break;
 8002584:	e023      	b.n	80025ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 faaf 	bl	8002af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69d9      	ldr	r1, [r3, #28]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	61da      	str	r2, [r3, #28]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
      break;
 80025cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0b4      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x186>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002634:	d03e      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	f200 8087 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	f000 8086 	beq.w	8002752 <HAL_TIM_ConfigClockSource+0x172>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	d87f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d01a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0xa6>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d87b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 8002654:	2b60      	cmp	r3, #96	; 0x60
 8002656:	d050      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0x11a>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d877      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800265c:	2b50      	cmp	r3, #80	; 0x50
 800265e:	d03c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xfa>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d873      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d058      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x13a>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d86f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800266c:	2b30      	cmp	r3, #48	; 0x30
 800266e:	d064      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d86b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 8002674:	2b20      	cmp	r3, #32
 8002676:	d060      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d867      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002680:	2b10      	cmp	r3, #16
 8002682:	d05a      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x15a>
 8002684:	e062      	b.n	800274c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f000 faf0 	bl	8002c7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	609a      	str	r2, [r3, #8]
      break;
 80026b2:	e04f      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f000 fad9 	bl	8002c7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e03c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f000 fa50 	bl	8002b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2150      	movs	r1, #80	; 0x50
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 faa7 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 80026f8:	e02c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f000 fa6e 	bl	8002be8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2160      	movs	r1, #96	; 0x60
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa97 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002718:	e01c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 fa30 	bl	8002b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2140      	movs	r1, #64	; 0x40
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fa87 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002738:	e00c      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 fa7e 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 800274a:	e003      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e000      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a29      	ldr	r2, [pc, #164]	; (8002870 <TIM_Base_SetConfig+0xb8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <TIM_Base_SetConfig+0x30>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d6:	d007      	beq.n	80027e8 <TIM_Base_SetConfig+0x30>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a26      	ldr	r2, [pc, #152]	; (8002874 <TIM_Base_SetConfig+0xbc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0x30>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a25      	ldr	r2, [pc, #148]	; (8002878 <TIM_Base_SetConfig+0xc0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d108      	bne.n	80027fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <TIM_Base_SetConfig+0xb8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00b      	beq.n	800281a <TIM_Base_SetConfig+0x62>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x62>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <TIM_Base_SetConfig+0xbc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <TIM_Base_SetConfig+0xc0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <TIM_Base_SetConfig+0xb8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40000400 	.word	0x40000400
 8002878:	40000800 	.word	0x40000800

0800287c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f023 0201 	bic.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f023 0302 	bic.w	r3, r3, #2
 80028c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <TIM_OC1_SetConfig+0xc8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d10c      	bne.n	80028f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f023 0308 	bic.w	r3, r3, #8
 80028de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <TIM_OC1_SetConfig+0xc8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40012c00 	.word	0x40012c00

08002948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f023 0210 	bic.w	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0320 	bic.w	r3, r3, #32
 8002992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <TIM_OC2_SetConfig+0xd0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10d      	bne.n	80029c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <TIM_OC2_SetConfig+0xd0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d113      	bne.n	80029f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00

08002a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <TIM_OC3_SetConfig+0xd0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10d      	bne.n	8002a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <TIM_OC3_SetConfig+0xd0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d113      	bne.n	8002ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	621a      	str	r2, [r3, #32]
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40012c00 	.word	0x40012c00

08002af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	031b      	lsls	r3, r3, #12
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <TIM_OC4_SetConfig+0x98>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d109      	bne.n	8002b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f023 0201 	bic.w	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 030a 	bic.w	r3, r3, #10
 8002bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f023 0210 	bic.w	r2, r3, #16
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	031b      	lsls	r3, r3, #12
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f043 0307 	orr.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	021a      	lsls	r2, r3, #8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e046      	b.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d009      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10c      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800

08002d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e042      	b.n	8002e30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd ff92 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f91d 	bl	800301c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d16d      	bne.n	8002f34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Transmit+0x2c>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e066      	b.n	8002f36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2221      	movs	r2, #33	; 0x21
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fa13 	bl	80012a0 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d108      	bne.n	8002ea4 <HAL_UART_Transmit+0x6c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eac:	e02a      	b.n	8002f04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f840 	bl	8002f3e <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e036      	b.n	8002f36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e007      	b.n	8002ef6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1cf      	bne.n	8002eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f810 	bl	8002f3e <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e006      	b.n	8002f36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b090      	sub	sp, #64	; 0x40
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4e:	e050      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d04c      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f5e:	f7fe f99f 	bl	80012a0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d241      	bcs.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc2:	623a      	str	r2, [r7, #32]
 8002fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e00f      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d09f      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3740      	adds	r7, #64	; 0x40
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003056:	f023 030c 	bic.w	r3, r3, #12
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	430b      	orrs	r3, r1
 8003062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <UART_SetConfig+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d103      	bne.n	800308c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7fe ffb6 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	e002      	b.n	8003092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7fe ff9e 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8003090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009a      	lsls	r2, r3, #2
 800309c:	441a      	add	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <UART_SetConfig+0x118>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	0119      	lsls	r1, r3, #4
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <UART_SetConfig+0x118>)
 80030ca:	fba3 0302 	umull	r0, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2064      	movs	r0, #100	; 0x64
 80030d2:	fb00 f303 	mul.w	r3, r0, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	3332      	adds	r3, #50	; 0x32
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <UART_SetConfig+0x118>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e8:	4419      	add	r1, r3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <UART_SetConfig+0x118>)
 8003102:	fba3 0302 	umull	r0, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2064      	movs	r0, #100	; 0x64
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	3332      	adds	r3, #50	; 0x32
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <UART_SetConfig+0x118>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	440a      	add	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40013800 	.word	0x40013800
 8003134:	51eb851f 	.word	0x51eb851f

08003138 <__errno>:
 8003138:	4b01      	ldr	r3, [pc, #4]	; (8003140 <__errno+0x8>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000034 	.word	0x20000034

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	2600      	movs	r6, #0
 8003148:	4d0c      	ldr	r5, [pc, #48]	; (800317c <__libc_init_array+0x38>)
 800314a:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314c:	1b64      	subs	r4, r4, r5
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	f000 fc5c 	bl	8003a10 <_init>
 8003158:	2600      	movs	r6, #0
 800315a:	4d0a      	ldr	r5, [pc, #40]	; (8003184 <__libc_init_array+0x40>)
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <__libc_init_array+0x44>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	08003aa0 	.word	0x08003aa0
 8003180:	08003aa0 	.word	0x08003aa0
 8003184:	08003aa0 	.word	0x08003aa0
 8003188:	08003aa4 	.word	0x08003aa4

0800318c <memset>:
 800318c:	4603      	mov	r3, r0
 800318e:	4402      	add	r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <siprintf>:
 800319c:	b40e      	push	{r1, r2, r3}
 800319e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031a2:	b500      	push	{lr}
 80031a4:	b09c      	sub	sp, #112	; 0x70
 80031a6:	ab1d      	add	r3, sp, #116	; 0x74
 80031a8:	9002      	str	r0, [sp, #8]
 80031aa:	9006      	str	r0, [sp, #24]
 80031ac:	9107      	str	r1, [sp, #28]
 80031ae:	9104      	str	r1, [sp, #16]
 80031b0:	4808      	ldr	r0, [pc, #32]	; (80031d4 <siprintf+0x38>)
 80031b2:	4909      	ldr	r1, [pc, #36]	; (80031d8 <siprintf+0x3c>)
 80031b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031b8:	9105      	str	r1, [sp, #20]
 80031ba:	6800      	ldr	r0, [r0, #0]
 80031bc:	a902      	add	r1, sp, #8
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	f000 f868 	bl	8003294 <_svfiprintf_r>
 80031c4:	2200      	movs	r2, #0
 80031c6:	9b02      	ldr	r3, [sp, #8]
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	b01c      	add	sp, #112	; 0x70
 80031cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031d0:	b003      	add	sp, #12
 80031d2:	4770      	bx	lr
 80031d4:	20000034 	.word	0x20000034
 80031d8:	ffff0208 	.word	0xffff0208

080031dc <__ssputs_r>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	688e      	ldr	r6, [r1, #8]
 80031e2:	4682      	mov	sl, r0
 80031e4:	429e      	cmp	r6, r3
 80031e6:	460c      	mov	r4, r1
 80031e8:	4690      	mov	r8, r2
 80031ea:	461f      	mov	r7, r3
 80031ec:	d838      	bhi.n	8003260 <__ssputs_r+0x84>
 80031ee:	898a      	ldrh	r2, [r1, #12]
 80031f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031f4:	d032      	beq.n	800325c <__ssputs_r+0x80>
 80031f6:	6825      	ldr	r5, [r4, #0]
 80031f8:	6909      	ldr	r1, [r1, #16]
 80031fa:	3301      	adds	r3, #1
 80031fc:	eba5 0901 	sub.w	r9, r5, r1
 8003200:	6965      	ldr	r5, [r4, #20]
 8003202:	444b      	add	r3, r9
 8003204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800320c:	106d      	asrs	r5, r5, #1
 800320e:	429d      	cmp	r5, r3
 8003210:	bf38      	it	cc
 8003212:	461d      	movcc	r5, r3
 8003214:	0553      	lsls	r3, r2, #21
 8003216:	d531      	bpl.n	800327c <__ssputs_r+0xa0>
 8003218:	4629      	mov	r1, r5
 800321a:	f000 fb53 	bl	80038c4 <_malloc_r>
 800321e:	4606      	mov	r6, r0
 8003220:	b950      	cbnz	r0, 8003238 <__ssputs_r+0x5c>
 8003222:	230c      	movs	r3, #12
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f8ca 3000 	str.w	r3, [sl]
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003238:	464a      	mov	r2, r9
 800323a:	6921      	ldr	r1, [r4, #16]
 800323c:	f000 face 	bl	80037dc <memcpy>
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324a:	81a3      	strh	r3, [r4, #12]
 800324c:	6126      	str	r6, [r4, #16]
 800324e:	444e      	add	r6, r9
 8003250:	6026      	str	r6, [r4, #0]
 8003252:	463e      	mov	r6, r7
 8003254:	6165      	str	r5, [r4, #20]
 8003256:	eba5 0509 	sub.w	r5, r5, r9
 800325a:	60a5      	str	r5, [r4, #8]
 800325c:	42be      	cmp	r6, r7
 800325e:	d900      	bls.n	8003262 <__ssputs_r+0x86>
 8003260:	463e      	mov	r6, r7
 8003262:	4632      	mov	r2, r6
 8003264:	4641      	mov	r1, r8
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	f000 fac6 	bl	80037f8 <memmove>
 800326c:	68a3      	ldr	r3, [r4, #8]
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	1b9b      	subs	r3, r3, r6
 8003272:	4432      	add	r2, r6
 8003274:	2000      	movs	r0, #0
 8003276:	60a3      	str	r3, [r4, #8]
 8003278:	6022      	str	r2, [r4, #0]
 800327a:	e7db      	b.n	8003234 <__ssputs_r+0x58>
 800327c:	462a      	mov	r2, r5
 800327e:	f000 fb7b 	bl	8003978 <_realloc_r>
 8003282:	4606      	mov	r6, r0
 8003284:	2800      	cmp	r0, #0
 8003286:	d1e1      	bne.n	800324c <__ssputs_r+0x70>
 8003288:	4650      	mov	r0, sl
 800328a:	6921      	ldr	r1, [r4, #16]
 800328c:	f000 face 	bl	800382c <_free_r>
 8003290:	e7c7      	b.n	8003222 <__ssputs_r+0x46>
	...

08003294 <_svfiprintf_r>:
 8003294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003298:	4698      	mov	r8, r3
 800329a:	898b      	ldrh	r3, [r1, #12]
 800329c:	4607      	mov	r7, r0
 800329e:	061b      	lsls	r3, r3, #24
 80032a0:	460d      	mov	r5, r1
 80032a2:	4614      	mov	r4, r2
 80032a4:	b09d      	sub	sp, #116	; 0x74
 80032a6:	d50e      	bpl.n	80032c6 <_svfiprintf_r+0x32>
 80032a8:	690b      	ldr	r3, [r1, #16]
 80032aa:	b963      	cbnz	r3, 80032c6 <_svfiprintf_r+0x32>
 80032ac:	2140      	movs	r1, #64	; 0x40
 80032ae:	f000 fb09 	bl	80038c4 <_malloc_r>
 80032b2:	6028      	str	r0, [r5, #0]
 80032b4:	6128      	str	r0, [r5, #16]
 80032b6:	b920      	cbnz	r0, 80032c2 <_svfiprintf_r+0x2e>
 80032b8:	230c      	movs	r3, #12
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	e0d1      	b.n	8003466 <_svfiprintf_r+0x1d2>
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	616b      	str	r3, [r5, #20]
 80032c6:	2300      	movs	r3, #0
 80032c8:	9309      	str	r3, [sp, #36]	; 0x24
 80032ca:	2320      	movs	r3, #32
 80032cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032d0:	2330      	movs	r3, #48	; 0x30
 80032d2:	f04f 0901 	mov.w	r9, #1
 80032d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80032da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003480 <_svfiprintf_r+0x1ec>
 80032de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032e2:	4623      	mov	r3, r4
 80032e4:	469a      	mov	sl, r3
 80032e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ea:	b10a      	cbz	r2, 80032f0 <_svfiprintf_r+0x5c>
 80032ec:	2a25      	cmp	r2, #37	; 0x25
 80032ee:	d1f9      	bne.n	80032e4 <_svfiprintf_r+0x50>
 80032f0:	ebba 0b04 	subs.w	fp, sl, r4
 80032f4:	d00b      	beq.n	800330e <_svfiprintf_r+0x7a>
 80032f6:	465b      	mov	r3, fp
 80032f8:	4622      	mov	r2, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	4638      	mov	r0, r7
 80032fe:	f7ff ff6d 	bl	80031dc <__ssputs_r>
 8003302:	3001      	adds	r0, #1
 8003304:	f000 80aa 	beq.w	800345c <_svfiprintf_r+0x1c8>
 8003308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800330a:	445a      	add	r2, fp
 800330c:	9209      	str	r2, [sp, #36]	; 0x24
 800330e:	f89a 3000 	ldrb.w	r3, [sl]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a2 	beq.w	800345c <_svfiprintf_r+0x1c8>
 8003318:	2300      	movs	r3, #0
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003322:	f10a 0a01 	add.w	sl, sl, #1
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	9307      	str	r3, [sp, #28]
 800332a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800332e:	931a      	str	r3, [sp, #104]	; 0x68
 8003330:	4654      	mov	r4, sl
 8003332:	2205      	movs	r2, #5
 8003334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003338:	4851      	ldr	r0, [pc, #324]	; (8003480 <_svfiprintf_r+0x1ec>)
 800333a:	f000 fa41 	bl	80037c0 <memchr>
 800333e:	9a04      	ldr	r2, [sp, #16]
 8003340:	b9d8      	cbnz	r0, 800337a <_svfiprintf_r+0xe6>
 8003342:	06d0      	lsls	r0, r2, #27
 8003344:	bf44      	itt	mi
 8003346:	2320      	movmi	r3, #32
 8003348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800334c:	0711      	lsls	r1, r2, #28
 800334e:	bf44      	itt	mi
 8003350:	232b      	movmi	r3, #43	; 0x2b
 8003352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003356:	f89a 3000 	ldrb.w	r3, [sl]
 800335a:	2b2a      	cmp	r3, #42	; 0x2a
 800335c:	d015      	beq.n	800338a <_svfiprintf_r+0xf6>
 800335e:	4654      	mov	r4, sl
 8003360:	2000      	movs	r0, #0
 8003362:	f04f 0c0a 	mov.w	ip, #10
 8003366:	9a07      	ldr	r2, [sp, #28]
 8003368:	4621      	mov	r1, r4
 800336a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800336e:	3b30      	subs	r3, #48	; 0x30
 8003370:	2b09      	cmp	r3, #9
 8003372:	d94e      	bls.n	8003412 <_svfiprintf_r+0x17e>
 8003374:	b1b0      	cbz	r0, 80033a4 <_svfiprintf_r+0x110>
 8003376:	9207      	str	r2, [sp, #28]
 8003378:	e014      	b.n	80033a4 <_svfiprintf_r+0x110>
 800337a:	eba0 0308 	sub.w	r3, r0, r8
 800337e:	fa09 f303 	lsl.w	r3, r9, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	46a2      	mov	sl, r4
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	e7d2      	b.n	8003330 <_svfiprintf_r+0x9c>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	1d19      	adds	r1, r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	9103      	str	r1, [sp, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	bfbb      	ittet	lt
 8003396:	425b      	neglt	r3, r3
 8003398:	f042 0202 	orrlt.w	r2, r2, #2
 800339c:	9307      	strge	r3, [sp, #28]
 800339e:	9307      	strlt	r3, [sp, #28]
 80033a0:	bfb8      	it	lt
 80033a2:	9204      	strlt	r2, [sp, #16]
 80033a4:	7823      	ldrb	r3, [r4, #0]
 80033a6:	2b2e      	cmp	r3, #46	; 0x2e
 80033a8:	d10c      	bne.n	80033c4 <_svfiprintf_r+0x130>
 80033aa:	7863      	ldrb	r3, [r4, #1]
 80033ac:	2b2a      	cmp	r3, #42	; 0x2a
 80033ae:	d135      	bne.n	800341c <_svfiprintf_r+0x188>
 80033b0:	9b03      	ldr	r3, [sp, #12]
 80033b2:	3402      	adds	r4, #2
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	9203      	str	r2, [sp, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bfb8      	it	lt
 80033be:	f04f 33ff 	movlt.w	r3, #4294967295
 80033c2:	9305      	str	r3, [sp, #20]
 80033c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003490 <_svfiprintf_r+0x1fc>
 80033c8:	2203      	movs	r2, #3
 80033ca:	4650      	mov	r0, sl
 80033cc:	7821      	ldrb	r1, [r4, #0]
 80033ce:	f000 f9f7 	bl	80037c0 <memchr>
 80033d2:	b140      	cbz	r0, 80033e6 <_svfiprintf_r+0x152>
 80033d4:	2340      	movs	r3, #64	; 0x40
 80033d6:	eba0 000a 	sub.w	r0, r0, sl
 80033da:	fa03 f000 	lsl.w	r0, r3, r0
 80033de:	9b04      	ldr	r3, [sp, #16]
 80033e0:	3401      	adds	r4, #1
 80033e2:	4303      	orrs	r3, r0
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ea:	2206      	movs	r2, #6
 80033ec:	4825      	ldr	r0, [pc, #148]	; (8003484 <_svfiprintf_r+0x1f0>)
 80033ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033f2:	f000 f9e5 	bl	80037c0 <memchr>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d038      	beq.n	800346c <_svfiprintf_r+0x1d8>
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <_svfiprintf_r+0x1f4>)
 80033fc:	bb1b      	cbnz	r3, 8003446 <_svfiprintf_r+0x1b2>
 80033fe:	9b03      	ldr	r3, [sp, #12]
 8003400:	3307      	adds	r3, #7
 8003402:	f023 0307 	bic.w	r3, r3, #7
 8003406:	3308      	adds	r3, #8
 8003408:	9303      	str	r3, [sp, #12]
 800340a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800340c:	4433      	add	r3, r6
 800340e:	9309      	str	r3, [sp, #36]	; 0x24
 8003410:	e767      	b.n	80032e2 <_svfiprintf_r+0x4e>
 8003412:	460c      	mov	r4, r1
 8003414:	2001      	movs	r0, #1
 8003416:	fb0c 3202 	mla	r2, ip, r2, r3
 800341a:	e7a5      	b.n	8003368 <_svfiprintf_r+0xd4>
 800341c:	2300      	movs	r3, #0
 800341e:	f04f 0c0a 	mov.w	ip, #10
 8003422:	4619      	mov	r1, r3
 8003424:	3401      	adds	r4, #1
 8003426:	9305      	str	r3, [sp, #20]
 8003428:	4620      	mov	r0, r4
 800342a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800342e:	3a30      	subs	r2, #48	; 0x30
 8003430:	2a09      	cmp	r2, #9
 8003432:	d903      	bls.n	800343c <_svfiprintf_r+0x1a8>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0c5      	beq.n	80033c4 <_svfiprintf_r+0x130>
 8003438:	9105      	str	r1, [sp, #20]
 800343a:	e7c3      	b.n	80033c4 <_svfiprintf_r+0x130>
 800343c:	4604      	mov	r4, r0
 800343e:	2301      	movs	r3, #1
 8003440:	fb0c 2101 	mla	r1, ip, r1, r2
 8003444:	e7f0      	b.n	8003428 <_svfiprintf_r+0x194>
 8003446:	ab03      	add	r3, sp, #12
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	462a      	mov	r2, r5
 800344c:	4638      	mov	r0, r7
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <_svfiprintf_r+0x1f8>)
 8003450:	a904      	add	r1, sp, #16
 8003452:	f3af 8000 	nop.w
 8003456:	1c42      	adds	r2, r0, #1
 8003458:	4606      	mov	r6, r0
 800345a:	d1d6      	bne.n	800340a <_svfiprintf_r+0x176>
 800345c:	89ab      	ldrh	r3, [r5, #12]
 800345e:	065b      	lsls	r3, r3, #25
 8003460:	f53f af2c 	bmi.w	80032bc <_svfiprintf_r+0x28>
 8003464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003466:	b01d      	add	sp, #116	; 0x74
 8003468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346c:	ab03      	add	r3, sp, #12
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	462a      	mov	r2, r5
 8003472:	4638      	mov	r0, r7
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <_svfiprintf_r+0x1f8>)
 8003476:	a904      	add	r1, sp, #16
 8003478:	f000 f87c 	bl	8003574 <_printf_i>
 800347c:	e7eb      	b.n	8003456 <_svfiprintf_r+0x1c2>
 800347e:	bf00      	nop
 8003480:	08003a6a 	.word	0x08003a6a
 8003484:	08003a74 	.word	0x08003a74
 8003488:	00000000 	.word	0x00000000
 800348c:	080031dd 	.word	0x080031dd
 8003490:	08003a70 	.word	0x08003a70

08003494 <_printf_common>:
 8003494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	4616      	mov	r6, r2
 800349a:	4699      	mov	r9, r3
 800349c:	688a      	ldr	r2, [r1, #8]
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	4607      	mov	r7, r0
 80034a2:	4293      	cmp	r3, r2
 80034a4:	bfb8      	it	lt
 80034a6:	4613      	movlt	r3, r2
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034ae:	460c      	mov	r4, r1
 80034b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034b4:	b10a      	cbz	r2, 80034ba <_printf_common+0x26>
 80034b6:	3301      	adds	r3, #1
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	0699      	lsls	r1, r3, #26
 80034be:	bf42      	ittt	mi
 80034c0:	6833      	ldrmi	r3, [r6, #0]
 80034c2:	3302      	addmi	r3, #2
 80034c4:	6033      	strmi	r3, [r6, #0]
 80034c6:	6825      	ldr	r5, [r4, #0]
 80034c8:	f015 0506 	ands.w	r5, r5, #6
 80034cc:	d106      	bne.n	80034dc <_printf_common+0x48>
 80034ce:	f104 0a19 	add.w	sl, r4, #25
 80034d2:	68e3      	ldr	r3, [r4, #12]
 80034d4:	6832      	ldr	r2, [r6, #0]
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	42ab      	cmp	r3, r5
 80034da:	dc28      	bgt.n	800352e <_printf_common+0x9a>
 80034dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034e0:	1e13      	subs	r3, r2, #0
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	bf18      	it	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	0692      	lsls	r2, r2, #26
 80034ea:	d42d      	bmi.n	8003548 <_printf_common+0xb4>
 80034ec:	4649      	mov	r1, r9
 80034ee:	4638      	mov	r0, r7
 80034f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034f4:	47c0      	blx	r8
 80034f6:	3001      	adds	r0, #1
 80034f8:	d020      	beq.n	800353c <_printf_common+0xa8>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	68e5      	ldr	r5, [r4, #12]
 80034fe:	f003 0306 	and.w	r3, r3, #6
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf18      	it	ne
 8003506:	2500      	movne	r5, #0
 8003508:	6832      	ldr	r2, [r6, #0]
 800350a:	f04f 0600 	mov.w	r6, #0
 800350e:	68a3      	ldr	r3, [r4, #8]
 8003510:	bf08      	it	eq
 8003512:	1aad      	subeq	r5, r5, r2
 8003514:	6922      	ldr	r2, [r4, #16]
 8003516:	bf08      	it	eq
 8003518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800351c:	4293      	cmp	r3, r2
 800351e:	bfc4      	itt	gt
 8003520:	1a9b      	subgt	r3, r3, r2
 8003522:	18ed      	addgt	r5, r5, r3
 8003524:	341a      	adds	r4, #26
 8003526:	42b5      	cmp	r5, r6
 8003528:	d11a      	bne.n	8003560 <_printf_common+0xcc>
 800352a:	2000      	movs	r0, #0
 800352c:	e008      	b.n	8003540 <_printf_common+0xac>
 800352e:	2301      	movs	r3, #1
 8003530:	4652      	mov	r2, sl
 8003532:	4649      	mov	r1, r9
 8003534:	4638      	mov	r0, r7
 8003536:	47c0      	blx	r8
 8003538:	3001      	adds	r0, #1
 800353a:	d103      	bne.n	8003544 <_printf_common+0xb0>
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003544:	3501      	adds	r5, #1
 8003546:	e7c4      	b.n	80034d2 <_printf_common+0x3e>
 8003548:	2030      	movs	r0, #48	; 0x30
 800354a:	18e1      	adds	r1, r4, r3
 800354c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003556:	4422      	add	r2, r4
 8003558:	3302      	adds	r3, #2
 800355a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800355e:	e7c5      	b.n	80034ec <_printf_common+0x58>
 8003560:	2301      	movs	r3, #1
 8003562:	4622      	mov	r2, r4
 8003564:	4649      	mov	r1, r9
 8003566:	4638      	mov	r0, r7
 8003568:	47c0      	blx	r8
 800356a:	3001      	adds	r0, #1
 800356c:	d0e6      	beq.n	800353c <_printf_common+0xa8>
 800356e:	3601      	adds	r6, #1
 8003570:	e7d9      	b.n	8003526 <_printf_common+0x92>
	...

08003574 <_printf_i>:
 8003574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003578:	460c      	mov	r4, r1
 800357a:	7e27      	ldrb	r7, [r4, #24]
 800357c:	4691      	mov	r9, r2
 800357e:	2f78      	cmp	r7, #120	; 0x78
 8003580:	4680      	mov	r8, r0
 8003582:	469a      	mov	sl, r3
 8003584:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358a:	d807      	bhi.n	800359c <_printf_i+0x28>
 800358c:	2f62      	cmp	r7, #98	; 0x62
 800358e:	d80a      	bhi.n	80035a6 <_printf_i+0x32>
 8003590:	2f00      	cmp	r7, #0
 8003592:	f000 80d9 	beq.w	8003748 <_printf_i+0x1d4>
 8003596:	2f58      	cmp	r7, #88	; 0x58
 8003598:	f000 80a4 	beq.w	80036e4 <_printf_i+0x170>
 800359c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035a4:	e03a      	b.n	800361c <_printf_i+0xa8>
 80035a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035aa:	2b15      	cmp	r3, #21
 80035ac:	d8f6      	bhi.n	800359c <_printf_i+0x28>
 80035ae:	a001      	add	r0, pc, #4	; (adr r0, 80035b4 <_printf_i+0x40>)
 80035b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035b4:	0800360d 	.word	0x0800360d
 80035b8:	08003621 	.word	0x08003621
 80035bc:	0800359d 	.word	0x0800359d
 80035c0:	0800359d 	.word	0x0800359d
 80035c4:	0800359d 	.word	0x0800359d
 80035c8:	0800359d 	.word	0x0800359d
 80035cc:	08003621 	.word	0x08003621
 80035d0:	0800359d 	.word	0x0800359d
 80035d4:	0800359d 	.word	0x0800359d
 80035d8:	0800359d 	.word	0x0800359d
 80035dc:	0800359d 	.word	0x0800359d
 80035e0:	0800372f 	.word	0x0800372f
 80035e4:	08003651 	.word	0x08003651
 80035e8:	08003711 	.word	0x08003711
 80035ec:	0800359d 	.word	0x0800359d
 80035f0:	0800359d 	.word	0x0800359d
 80035f4:	08003751 	.word	0x08003751
 80035f8:	0800359d 	.word	0x0800359d
 80035fc:	08003651 	.word	0x08003651
 8003600:	0800359d 	.word	0x0800359d
 8003604:	0800359d 	.word	0x0800359d
 8003608:	08003719 	.word	0x08003719
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003612:	1d1a      	adds	r2, r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	600a      	str	r2, [r1, #0]
 8003618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800361c:	2301      	movs	r3, #1
 800361e:	e0a4      	b.n	800376a <_printf_i+0x1f6>
 8003620:	6825      	ldr	r5, [r4, #0]
 8003622:	6808      	ldr	r0, [r1, #0]
 8003624:	062e      	lsls	r6, r5, #24
 8003626:	f100 0304 	add.w	r3, r0, #4
 800362a:	d50a      	bpl.n	8003642 <_printf_i+0xce>
 800362c:	6805      	ldr	r5, [r0, #0]
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	2d00      	cmp	r5, #0
 8003632:	da03      	bge.n	800363c <_printf_i+0xc8>
 8003634:	232d      	movs	r3, #45	; 0x2d
 8003636:	426d      	negs	r5, r5
 8003638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800363c:	230a      	movs	r3, #10
 800363e:	485e      	ldr	r0, [pc, #376]	; (80037b8 <_printf_i+0x244>)
 8003640:	e019      	b.n	8003676 <_printf_i+0x102>
 8003642:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003646:	6805      	ldr	r5, [r0, #0]
 8003648:	600b      	str	r3, [r1, #0]
 800364a:	bf18      	it	ne
 800364c:	b22d      	sxthne	r5, r5
 800364e:	e7ef      	b.n	8003630 <_printf_i+0xbc>
 8003650:	680b      	ldr	r3, [r1, #0]
 8003652:	6825      	ldr	r5, [r4, #0]
 8003654:	1d18      	adds	r0, r3, #4
 8003656:	6008      	str	r0, [r1, #0]
 8003658:	0628      	lsls	r0, r5, #24
 800365a:	d501      	bpl.n	8003660 <_printf_i+0xec>
 800365c:	681d      	ldr	r5, [r3, #0]
 800365e:	e002      	b.n	8003666 <_printf_i+0xf2>
 8003660:	0669      	lsls	r1, r5, #25
 8003662:	d5fb      	bpl.n	800365c <_printf_i+0xe8>
 8003664:	881d      	ldrh	r5, [r3, #0]
 8003666:	2f6f      	cmp	r7, #111	; 0x6f
 8003668:	bf0c      	ite	eq
 800366a:	2308      	moveq	r3, #8
 800366c:	230a      	movne	r3, #10
 800366e:	4852      	ldr	r0, [pc, #328]	; (80037b8 <_printf_i+0x244>)
 8003670:	2100      	movs	r1, #0
 8003672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003676:	6866      	ldr	r6, [r4, #4]
 8003678:	2e00      	cmp	r6, #0
 800367a:	bfa8      	it	ge
 800367c:	6821      	ldrge	r1, [r4, #0]
 800367e:	60a6      	str	r6, [r4, #8]
 8003680:	bfa4      	itt	ge
 8003682:	f021 0104 	bicge.w	r1, r1, #4
 8003686:	6021      	strge	r1, [r4, #0]
 8003688:	b90d      	cbnz	r5, 800368e <_printf_i+0x11a>
 800368a:	2e00      	cmp	r6, #0
 800368c:	d04d      	beq.n	800372a <_printf_i+0x1b6>
 800368e:	4616      	mov	r6, r2
 8003690:	fbb5 f1f3 	udiv	r1, r5, r3
 8003694:	fb03 5711 	mls	r7, r3, r1, r5
 8003698:	5dc7      	ldrb	r7, [r0, r7]
 800369a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800369e:	462f      	mov	r7, r5
 80036a0:	42bb      	cmp	r3, r7
 80036a2:	460d      	mov	r5, r1
 80036a4:	d9f4      	bls.n	8003690 <_printf_i+0x11c>
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d10b      	bne.n	80036c2 <_printf_i+0x14e>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	07df      	lsls	r7, r3, #31
 80036ae:	d508      	bpl.n	80036c2 <_printf_i+0x14e>
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	6861      	ldr	r1, [r4, #4]
 80036b4:	4299      	cmp	r1, r3
 80036b6:	bfde      	ittt	le
 80036b8:	2330      	movle	r3, #48	; 0x30
 80036ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036c2:	1b92      	subs	r2, r2, r6
 80036c4:	6122      	str	r2, [r4, #16]
 80036c6:	464b      	mov	r3, r9
 80036c8:	4621      	mov	r1, r4
 80036ca:	4640      	mov	r0, r8
 80036cc:	f8cd a000 	str.w	sl, [sp]
 80036d0:	aa03      	add	r2, sp, #12
 80036d2:	f7ff fedf 	bl	8003494 <_printf_common>
 80036d6:	3001      	adds	r0, #1
 80036d8:	d14c      	bne.n	8003774 <_printf_i+0x200>
 80036da:	f04f 30ff 	mov.w	r0, #4294967295
 80036de:	b004      	add	sp, #16
 80036e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e4:	4834      	ldr	r0, [pc, #208]	; (80037b8 <_printf_i+0x244>)
 80036e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ea:	680e      	ldr	r6, [r1, #0]
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80036f2:	061f      	lsls	r7, r3, #24
 80036f4:	600e      	str	r6, [r1, #0]
 80036f6:	d514      	bpl.n	8003722 <_printf_i+0x1ae>
 80036f8:	07d9      	lsls	r1, r3, #31
 80036fa:	bf44      	itt	mi
 80036fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003700:	6023      	strmi	r3, [r4, #0]
 8003702:	b91d      	cbnz	r5, 800370c <_printf_i+0x198>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	f023 0320 	bic.w	r3, r3, #32
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	2310      	movs	r3, #16
 800370e:	e7af      	b.n	8003670 <_printf_i+0xfc>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	f043 0320 	orr.w	r3, r3, #32
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	2378      	movs	r3, #120	; 0x78
 800371a:	4828      	ldr	r0, [pc, #160]	; (80037bc <_printf_i+0x248>)
 800371c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003720:	e7e3      	b.n	80036ea <_printf_i+0x176>
 8003722:	065e      	lsls	r6, r3, #25
 8003724:	bf48      	it	mi
 8003726:	b2ad      	uxthmi	r5, r5
 8003728:	e7e6      	b.n	80036f8 <_printf_i+0x184>
 800372a:	4616      	mov	r6, r2
 800372c:	e7bb      	b.n	80036a6 <_printf_i+0x132>
 800372e:	680b      	ldr	r3, [r1, #0]
 8003730:	6826      	ldr	r6, [r4, #0]
 8003732:	1d1d      	adds	r5, r3, #4
 8003734:	6960      	ldr	r0, [r4, #20]
 8003736:	600d      	str	r5, [r1, #0]
 8003738:	0635      	lsls	r5, r6, #24
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	d501      	bpl.n	8003742 <_printf_i+0x1ce>
 800373e:	6018      	str	r0, [r3, #0]
 8003740:	e002      	b.n	8003748 <_printf_i+0x1d4>
 8003742:	0671      	lsls	r1, r6, #25
 8003744:	d5fb      	bpl.n	800373e <_printf_i+0x1ca>
 8003746:	8018      	strh	r0, [r3, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	4616      	mov	r6, r2
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	e7ba      	b.n	80036c6 <_printf_i+0x152>
 8003750:	680b      	ldr	r3, [r1, #0]
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	600a      	str	r2, [r1, #0]
 8003756:	681e      	ldr	r6, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4630      	mov	r0, r6
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	f000 f82f 	bl	80037c0 <memchr>
 8003762:	b108      	cbz	r0, 8003768 <_printf_i+0x1f4>
 8003764:	1b80      	subs	r0, r0, r6
 8003766:	6060      	str	r0, [r4, #4]
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	2300      	movs	r3, #0
 800376e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003772:	e7a8      	b.n	80036c6 <_printf_i+0x152>
 8003774:	4632      	mov	r2, r6
 8003776:	4649      	mov	r1, r9
 8003778:	4640      	mov	r0, r8
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	47d0      	blx	sl
 800377e:	3001      	adds	r0, #1
 8003780:	d0ab      	beq.n	80036da <_printf_i+0x166>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	079b      	lsls	r3, r3, #30
 8003786:	d413      	bmi.n	80037b0 <_printf_i+0x23c>
 8003788:	68e0      	ldr	r0, [r4, #12]
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	4298      	cmp	r0, r3
 800378e:	bfb8      	it	lt
 8003790:	4618      	movlt	r0, r3
 8003792:	e7a4      	b.n	80036de <_printf_i+0x16a>
 8003794:	2301      	movs	r3, #1
 8003796:	4632      	mov	r2, r6
 8003798:	4649      	mov	r1, r9
 800379a:	4640      	mov	r0, r8
 800379c:	47d0      	blx	sl
 800379e:	3001      	adds	r0, #1
 80037a0:	d09b      	beq.n	80036da <_printf_i+0x166>
 80037a2:	3501      	adds	r5, #1
 80037a4:	68e3      	ldr	r3, [r4, #12]
 80037a6:	9903      	ldr	r1, [sp, #12]
 80037a8:	1a5b      	subs	r3, r3, r1
 80037aa:	42ab      	cmp	r3, r5
 80037ac:	dcf2      	bgt.n	8003794 <_printf_i+0x220>
 80037ae:	e7eb      	b.n	8003788 <_printf_i+0x214>
 80037b0:	2500      	movs	r5, #0
 80037b2:	f104 0619 	add.w	r6, r4, #25
 80037b6:	e7f5      	b.n	80037a4 <_printf_i+0x230>
 80037b8:	08003a7b 	.word	0x08003a7b
 80037bc:	08003a8c 	.word	0x08003a8c

080037c0 <memchr>:
 80037c0:	4603      	mov	r3, r0
 80037c2:	b510      	push	{r4, lr}
 80037c4:	b2c9      	uxtb	r1, r1
 80037c6:	4402      	add	r2, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	d101      	bne.n	80037d2 <memchr+0x12>
 80037ce:	2000      	movs	r0, #0
 80037d0:	e003      	b.n	80037da <memchr+0x1a>
 80037d2:	7804      	ldrb	r4, [r0, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	428c      	cmp	r4, r1
 80037d8:	d1f6      	bne.n	80037c8 <memchr+0x8>
 80037da:	bd10      	pop	{r4, pc}

080037dc <memcpy>:
 80037dc:	440a      	add	r2, r1
 80037de:	4291      	cmp	r1, r2
 80037e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e4:	d100      	bne.n	80037e8 <memcpy+0xc>
 80037e6:	4770      	bx	lr
 80037e8:	b510      	push	{r4, lr}
 80037ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ee:	4291      	cmp	r1, r2
 80037f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f4:	d1f9      	bne.n	80037ea <memcpy+0xe>
 80037f6:	bd10      	pop	{r4, pc}

080037f8 <memmove>:
 80037f8:	4288      	cmp	r0, r1
 80037fa:	b510      	push	{r4, lr}
 80037fc:	eb01 0402 	add.w	r4, r1, r2
 8003800:	d902      	bls.n	8003808 <memmove+0x10>
 8003802:	4284      	cmp	r4, r0
 8003804:	4623      	mov	r3, r4
 8003806:	d807      	bhi.n	8003818 <memmove+0x20>
 8003808:	1e43      	subs	r3, r0, #1
 800380a:	42a1      	cmp	r1, r4
 800380c:	d008      	beq.n	8003820 <memmove+0x28>
 800380e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003816:	e7f8      	b.n	800380a <memmove+0x12>
 8003818:	4601      	mov	r1, r0
 800381a:	4402      	add	r2, r0
 800381c:	428a      	cmp	r2, r1
 800381e:	d100      	bne.n	8003822 <memmove+0x2a>
 8003820:	bd10      	pop	{r4, pc}
 8003822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800382a:	e7f7      	b.n	800381c <memmove+0x24>

0800382c <_free_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4605      	mov	r5, r0
 8003830:	2900      	cmp	r1, #0
 8003832:	d043      	beq.n	80038bc <_free_r+0x90>
 8003834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003838:	1f0c      	subs	r4, r1, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	bfb8      	it	lt
 800383e:	18e4      	addlt	r4, r4, r3
 8003840:	f000 f8d0 	bl	80039e4 <__malloc_lock>
 8003844:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <_free_r+0x94>)
 8003846:	6813      	ldr	r3, [r2, #0]
 8003848:	4610      	mov	r0, r2
 800384a:	b933      	cbnz	r3, 800385a <_free_r+0x2e>
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	6014      	str	r4, [r2, #0]
 8003850:	4628      	mov	r0, r5
 8003852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003856:	f000 b8cb 	b.w	80039f0 <__malloc_unlock>
 800385a:	42a3      	cmp	r3, r4
 800385c:	d90a      	bls.n	8003874 <_free_r+0x48>
 800385e:	6821      	ldr	r1, [r4, #0]
 8003860:	1862      	adds	r2, r4, r1
 8003862:	4293      	cmp	r3, r2
 8003864:	bf01      	itttt	eq
 8003866:	681a      	ldreq	r2, [r3, #0]
 8003868:	685b      	ldreq	r3, [r3, #4]
 800386a:	1852      	addeq	r2, r2, r1
 800386c:	6022      	streq	r2, [r4, #0]
 800386e:	6063      	str	r3, [r4, #4]
 8003870:	6004      	str	r4, [r0, #0]
 8003872:	e7ed      	b.n	8003850 <_free_r+0x24>
 8003874:	461a      	mov	r2, r3
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	b10b      	cbz	r3, 800387e <_free_r+0x52>
 800387a:	42a3      	cmp	r3, r4
 800387c:	d9fa      	bls.n	8003874 <_free_r+0x48>
 800387e:	6811      	ldr	r1, [r2, #0]
 8003880:	1850      	adds	r0, r2, r1
 8003882:	42a0      	cmp	r0, r4
 8003884:	d10b      	bne.n	800389e <_free_r+0x72>
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	4401      	add	r1, r0
 800388a:	1850      	adds	r0, r2, r1
 800388c:	4283      	cmp	r3, r0
 800388e:	6011      	str	r1, [r2, #0]
 8003890:	d1de      	bne.n	8003850 <_free_r+0x24>
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4401      	add	r1, r0
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	6053      	str	r3, [r2, #4]
 800389c:	e7d8      	b.n	8003850 <_free_r+0x24>
 800389e:	d902      	bls.n	80038a6 <_free_r+0x7a>
 80038a0:	230c      	movs	r3, #12
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	e7d4      	b.n	8003850 <_free_r+0x24>
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	1821      	adds	r1, r4, r0
 80038aa:	428b      	cmp	r3, r1
 80038ac:	bf01      	itttt	eq
 80038ae:	6819      	ldreq	r1, [r3, #0]
 80038b0:	685b      	ldreq	r3, [r3, #4]
 80038b2:	1809      	addeq	r1, r1, r0
 80038b4:	6021      	streq	r1, [r4, #0]
 80038b6:	6063      	str	r3, [r4, #4]
 80038b8:	6054      	str	r4, [r2, #4]
 80038ba:	e7c9      	b.n	8003850 <_free_r+0x24>
 80038bc:	bd38      	pop	{r3, r4, r5, pc}
 80038be:	bf00      	nop
 80038c0:	200000d8 	.word	0x200000d8

080038c4 <_malloc_r>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	1ccd      	adds	r5, r1, #3
 80038c8:	f025 0503 	bic.w	r5, r5, #3
 80038cc:	3508      	adds	r5, #8
 80038ce:	2d0c      	cmp	r5, #12
 80038d0:	bf38      	it	cc
 80038d2:	250c      	movcc	r5, #12
 80038d4:	2d00      	cmp	r5, #0
 80038d6:	4606      	mov	r6, r0
 80038d8:	db01      	blt.n	80038de <_malloc_r+0x1a>
 80038da:	42a9      	cmp	r1, r5
 80038dc:	d903      	bls.n	80038e6 <_malloc_r+0x22>
 80038de:	230c      	movs	r3, #12
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	2000      	movs	r0, #0
 80038e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e6:	f000 f87d 	bl	80039e4 <__malloc_lock>
 80038ea:	4921      	ldr	r1, [pc, #132]	; (8003970 <_malloc_r+0xac>)
 80038ec:	680a      	ldr	r2, [r1, #0]
 80038ee:	4614      	mov	r4, r2
 80038f0:	b99c      	cbnz	r4, 800391a <_malloc_r+0x56>
 80038f2:	4f20      	ldr	r7, [pc, #128]	; (8003974 <_malloc_r+0xb0>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b923      	cbnz	r3, 8003902 <_malloc_r+0x3e>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4630      	mov	r0, r6
 80038fc:	f000 f862 	bl	80039c4 <_sbrk_r>
 8003900:	6038      	str	r0, [r7, #0]
 8003902:	4629      	mov	r1, r5
 8003904:	4630      	mov	r0, r6
 8003906:	f000 f85d 	bl	80039c4 <_sbrk_r>
 800390a:	1c43      	adds	r3, r0, #1
 800390c:	d123      	bne.n	8003956 <_malloc_r+0x92>
 800390e:	230c      	movs	r3, #12
 8003910:	4630      	mov	r0, r6
 8003912:	6033      	str	r3, [r6, #0]
 8003914:	f000 f86c 	bl	80039f0 <__malloc_unlock>
 8003918:	e7e3      	b.n	80038e2 <_malloc_r+0x1e>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	1b5b      	subs	r3, r3, r5
 800391e:	d417      	bmi.n	8003950 <_malloc_r+0x8c>
 8003920:	2b0b      	cmp	r3, #11
 8003922:	d903      	bls.n	800392c <_malloc_r+0x68>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	441c      	add	r4, r3
 8003928:	6025      	str	r5, [r4, #0]
 800392a:	e004      	b.n	8003936 <_malloc_r+0x72>
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	42a2      	cmp	r2, r4
 8003930:	bf0c      	ite	eq
 8003932:	600b      	streq	r3, [r1, #0]
 8003934:	6053      	strne	r3, [r2, #4]
 8003936:	4630      	mov	r0, r6
 8003938:	f000 f85a 	bl	80039f0 <__malloc_unlock>
 800393c:	f104 000b 	add.w	r0, r4, #11
 8003940:	1d23      	adds	r3, r4, #4
 8003942:	f020 0007 	bic.w	r0, r0, #7
 8003946:	1ac2      	subs	r2, r0, r3
 8003948:	d0cc      	beq.n	80038e4 <_malloc_r+0x20>
 800394a:	1a1b      	subs	r3, r3, r0
 800394c:	50a3      	str	r3, [r4, r2]
 800394e:	e7c9      	b.n	80038e4 <_malloc_r+0x20>
 8003950:	4622      	mov	r2, r4
 8003952:	6864      	ldr	r4, [r4, #4]
 8003954:	e7cc      	b.n	80038f0 <_malloc_r+0x2c>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d0e3      	beq.n	8003928 <_malloc_r+0x64>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f82e 	bl	80039c4 <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d1dd      	bne.n	8003928 <_malloc_r+0x64>
 800396c:	e7cf      	b.n	800390e <_malloc_r+0x4a>
 800396e:	bf00      	nop
 8003970:	200000d8 	.word	0x200000d8
 8003974:	200000dc 	.word	0x200000dc

08003978 <_realloc_r>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	4607      	mov	r7, r0
 800397c:	4614      	mov	r4, r2
 800397e:	460e      	mov	r6, r1
 8003980:	b921      	cbnz	r1, 800398c <_realloc_r+0x14>
 8003982:	4611      	mov	r1, r2
 8003984:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003988:	f7ff bf9c 	b.w	80038c4 <_malloc_r>
 800398c:	b922      	cbnz	r2, 8003998 <_realloc_r+0x20>
 800398e:	f7ff ff4d 	bl	800382c <_free_r>
 8003992:	4625      	mov	r5, r4
 8003994:	4628      	mov	r0, r5
 8003996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003998:	f000 f830 	bl	80039fc <_malloc_usable_size_r>
 800399c:	42a0      	cmp	r0, r4
 800399e:	d20f      	bcs.n	80039c0 <_realloc_r+0x48>
 80039a0:	4621      	mov	r1, r4
 80039a2:	4638      	mov	r0, r7
 80039a4:	f7ff ff8e 	bl	80038c4 <_malloc_r>
 80039a8:	4605      	mov	r5, r0
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d0f2      	beq.n	8003994 <_realloc_r+0x1c>
 80039ae:	4631      	mov	r1, r6
 80039b0:	4622      	mov	r2, r4
 80039b2:	f7ff ff13 	bl	80037dc <memcpy>
 80039b6:	4631      	mov	r1, r6
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff ff37 	bl	800382c <_free_r>
 80039be:	e7e9      	b.n	8003994 <_realloc_r+0x1c>
 80039c0:	4635      	mov	r5, r6
 80039c2:	e7e7      	b.n	8003994 <_realloc_r+0x1c>

080039c4 <_sbrk_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	2300      	movs	r3, #0
 80039c8:	4d05      	ldr	r5, [pc, #20]	; (80039e0 <_sbrk_r+0x1c>)
 80039ca:	4604      	mov	r4, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	602b      	str	r3, [r5, #0]
 80039d0:	f7fd fa06 	bl	8000de0 <_sbrk>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_sbrk_r+0x1a>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	b103      	cbz	r3, 80039de <_sbrk_r+0x1a>
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	2000020c 	.word	0x2000020c

080039e4 <__malloc_lock>:
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <__malloc_lock+0x8>)
 80039e6:	f000 b811 	b.w	8003a0c <__retarget_lock_acquire_recursive>
 80039ea:	bf00      	nop
 80039ec:	20000214 	.word	0x20000214

080039f0 <__malloc_unlock>:
 80039f0:	4801      	ldr	r0, [pc, #4]	; (80039f8 <__malloc_unlock+0x8>)
 80039f2:	f000 b80c 	b.w	8003a0e <__retarget_lock_release_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000214 	.word	0x20000214

080039fc <_malloc_usable_size_r>:
 80039fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a00:	1f18      	subs	r0, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfbc      	itt	lt
 8003a06:	580b      	ldrlt	r3, [r1, r0]
 8003a08:	18c0      	addlt	r0, r0, r3
 8003a0a:	4770      	bx	lr

08003a0c <__retarget_lock_acquire_recursive>:
 8003a0c:	4770      	bx	lr

08003a0e <__retarget_lock_release_recursive>:
 8003a0e:	4770      	bx	lr

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
