
super_traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080050e0  080050e0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e0  080050e0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080050e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200000b0  08005198  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005198  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185e6  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d54  00000000  00000000  000386bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0003b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  0003c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c4  00000000  00000000  0003cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e6c  00000000  00000000  0005668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2aa  00000000  00000000  000694f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f47a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003990  00000000  00000000  000f47f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005024 	.word	0x08005024

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08005024 	.word	0x08005024

0800014c <ButtonInitializer>:

GPIO_TypeDef *BUTTON_PORT [4] = {BUTTON_1_GPIO_Port, BUTTON_2_GPIO_Port, BUTTON_3_GPIO_Port, WALKER_BUTTON_GPIO_Port};
uint16_t BUTTON_PIN [4] = {BUTTON_1_Pin, BUTTON_2_Pin, BUTTON_3_Pin, WALKER_BUTTON_Pin};
//

void ButtonInitializer(int i){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(i==0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	f040 808c 	bne.w	8000274 <ButtonInitializer+0x128>
		button[i].gpio= BUTTON_PORT[i];
 800015c:	4a8f      	ldr	r2, [pc, #572]	; (800039c <ButtonInitializer+0x250>)
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000164:	488e      	ldr	r0, [pc, #568]	; (80003a0 <ButtonInitializer+0x254>)
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	4613      	mov	r3, r2
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	4413      	add	r3, r2
 800016e:	00db      	lsls	r3, r3, #3
 8000170:	4403      	add	r3, r0
 8000172:	3320      	adds	r3, #32
 8000174:	6019      	str	r1, [r3, #0]
		button[i].is_long_pressed=0;
 8000176:	498a      	ldr	r1, [pc, #552]	; (80003a0 <ButtonInitializer+0x254>)
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	4613      	mov	r3, r2
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	4413      	add	r3, r2
 8000180:	00db      	lsls	r3, r3, #3
 8000182:	440b      	add	r3, r1
 8000184:	3318      	adds	r3, #24
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
		button[i].is_pressed=0;
 800018a:	4985      	ldr	r1, [pc, #532]	; (80003a0 <ButtonInitializer+0x254>)
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	440b      	add	r3, r1
 8000198:	3314      	adds	r3, #20
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
 800019e:	4a81      	ldr	r2, [pc, #516]	; (80003a4 <ButtonInitializer+0x258>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80001a6:	497e      	ldr	r1, [pc, #504]	; (80003a0 <ButtonInitializer+0x254>)
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4613      	mov	r3, r2
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	4413      	add	r3, r2
 80001b0:	00db      	lsls	r3, r3, #3
 80001b2:	440b      	add	r3, r1
 80001b4:	3324      	adds	r3, #36	; 0x24
 80001b6:	4602      	mov	r2, r0
 80001b8:	801a      	strh	r2, [r3, #0]
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = button[i].reg[4] = NORMAL_STATE;
 80001ba:	4979      	ldr	r1, [pc, #484]	; (80003a0 <ButtonInitializer+0x254>)
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4613      	mov	r3, r2
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	4413      	add	r3, r2
 80001c4:	00db      	lsls	r3, r3, #3
 80001c6:	440b      	add	r3, r1
 80001c8:	3310      	adds	r3, #16
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	4974      	ldr	r1, [pc, #464]	; (80003a0 <ButtonInitializer+0x254>)
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	4613      	mov	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	4413      	add	r3, r2
 80001d8:	00db      	lsls	r3, r3, #3
 80001da:	440b      	add	r3, r1
 80001dc:	3310      	adds	r3, #16
 80001de:	6819      	ldr	r1, [r3, #0]
 80001e0:	486f      	ldr	r0, [pc, #444]	; (80003a0 <ButtonInitializer+0x254>)
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	4613      	mov	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4413      	add	r3, r2
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	4403      	add	r3, r0
 80001ee:	330c      	adds	r3, #12
 80001f0:	6019      	str	r1, [r3, #0]
 80001f2:	496b      	ldr	r1, [pc, #428]	; (80003a0 <ButtonInitializer+0x254>)
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	4613      	mov	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	4413      	add	r3, r2
 80001fc:	00db      	lsls	r3, r3, #3
 80001fe:	440b      	add	r3, r1
 8000200:	330c      	adds	r3, #12
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	4866      	ldr	r0, [pc, #408]	; (80003a0 <ButtonInitializer+0x254>)
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	4613      	mov	r3, r2
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4413      	add	r3, r2
 800020e:	00db      	lsls	r3, r3, #3
 8000210:	4403      	add	r3, r0
 8000212:	3308      	adds	r3, #8
 8000214:	6019      	str	r1, [r3, #0]
 8000216:	4962      	ldr	r1, [pc, #392]	; (80003a0 <ButtonInitializer+0x254>)
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	4613      	mov	r3, r2
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	4413      	add	r3, r2
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	440b      	add	r3, r1
 8000224:	3308      	adds	r3, #8
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	485d      	ldr	r0, [pc, #372]	; (80003a0 <ButtonInitializer+0x254>)
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	4613      	mov	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4413      	add	r3, r2
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	4403      	add	r3, r0
 8000236:	3304      	adds	r3, #4
 8000238:	6019      	str	r1, [r3, #0]
 800023a:	4959      	ldr	r1, [pc, #356]	; (80003a0 <ButtonInitializer+0x254>)
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4613      	mov	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	4413      	add	r3, r2
 8000244:	00db      	lsls	r3, r3, #3
 8000246:	440b      	add	r3, r1
 8000248:	3304      	adds	r3, #4
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	4854      	ldr	r0, [pc, #336]	; (80003a0 <ButtonInitializer+0x254>)
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	00db      	lsls	r3, r3, #3
 8000258:	4403      	add	r3, r0
 800025a:	6019      	str	r1, [r3, #0]
		button[i].timer= 500;
 800025c:	4950      	ldr	r1, [pc, #320]	; (80003a0 <ButtonInitializer+0x254>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	440b      	add	r3, r1
 800026a:	331c      	adds	r3, #28
 800026c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000270:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = button[i].reg[4] = NORMAL_STATE;
		button[i].timer= 500;
		ButtonInitializer(i-1);
	}
}
 8000272:	e08f      	b.n	8000394 <ButtonInitializer+0x248>
		button[i].gpio= BUTTON_PORT[i];
 8000274:	4a49      	ldr	r2, [pc, #292]	; (800039c <ButtonInitializer+0x250>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800027c:	4848      	ldr	r0, [pc, #288]	; (80003a0 <ButtonInitializer+0x254>)
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	4403      	add	r3, r0
 800028a:	3320      	adds	r3, #32
 800028c:	6019      	str	r1, [r3, #0]
		button[i].is_long_pressed=0;
 800028e:	4944      	ldr	r1, [pc, #272]	; (80003a0 <ButtonInitializer+0x254>)
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4613      	mov	r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	4413      	add	r3, r2
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	440b      	add	r3, r1
 800029c:	3318      	adds	r3, #24
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
		button[i].is_pressed=0;
 80002a2:	493f      	ldr	r1, [pc, #252]	; (80003a0 <ButtonInitializer+0x254>)
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4613      	mov	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4413      	add	r3, r2
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	440b      	add	r3, r1
 80002b0:	3314      	adds	r3, #20
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
		button[i].pin= BUTTON_PIN[i];
 80002b6:	4a3b      	ldr	r2, [pc, #236]	; (80003a4 <ButtonInitializer+0x258>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80002be:	4938      	ldr	r1, [pc, #224]	; (80003a0 <ButtonInitializer+0x254>)
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	440b      	add	r3, r1
 80002cc:	3324      	adds	r3, #36	; 0x24
 80002ce:	4602      	mov	r2, r0
 80002d0:	801a      	strh	r2, [r3, #0]
		button[i].reg[0]= button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = button[i].reg[4] = NORMAL_STATE;
 80002d2:	4933      	ldr	r1, [pc, #204]	; (80003a0 <ButtonInitializer+0x254>)
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	4613      	mov	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	440b      	add	r3, r1
 80002e0:	3310      	adds	r3, #16
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	492e      	ldr	r1, [pc, #184]	; (80003a0 <ButtonInitializer+0x254>)
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4613      	mov	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	440b      	add	r3, r1
 80002f4:	3310      	adds	r3, #16
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	4829      	ldr	r0, [pc, #164]	; (80003a0 <ButtonInitializer+0x254>)
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4613      	mov	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	4403      	add	r3, r0
 8000306:	330c      	adds	r3, #12
 8000308:	6019      	str	r1, [r3, #0]
 800030a:	4925      	ldr	r1, [pc, #148]	; (80003a0 <ButtonInitializer+0x254>)
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	4613      	mov	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	4413      	add	r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	440b      	add	r3, r1
 8000318:	330c      	adds	r3, #12
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	4820      	ldr	r0, [pc, #128]	; (80003a0 <ButtonInitializer+0x254>)
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	4403      	add	r3, r0
 800032a:	3308      	adds	r3, #8
 800032c:	6019      	str	r1, [r3, #0]
 800032e:	491c      	ldr	r1, [pc, #112]	; (80003a0 <ButtonInitializer+0x254>)
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4613      	mov	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	4413      	add	r3, r2
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	440b      	add	r3, r1
 800033c:	3308      	adds	r3, #8
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	4817      	ldr	r0, [pc, #92]	; (80003a0 <ButtonInitializer+0x254>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4403      	add	r3, r0
 800034e:	3304      	adds	r3, #4
 8000350:	6019      	str	r1, [r3, #0]
 8000352:	4913      	ldr	r1, [pc, #76]	; (80003a0 <ButtonInitializer+0x254>)
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	4413      	add	r3, r2
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	440b      	add	r3, r1
 8000360:	3304      	adds	r3, #4
 8000362:	6819      	ldr	r1, [r3, #0]
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <ButtonInitializer+0x254>)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4403      	add	r3, r0
 8000372:	6019      	str	r1, [r3, #0]
		button[i].timer= 500;
 8000374:	490a      	ldr	r1, [pc, #40]	; (80003a0 <ButtonInitializer+0x254>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	4613      	mov	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	440b      	add	r3, r1
 8000382:	331c      	adds	r3, #28
 8000384:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000388:	601a      	str	r2, [r3, #0]
		ButtonInitializer(i-1);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3b01      	subs	r3, #1
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff fedc 	bl	800014c <ButtonInitializer>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000150 	.word	0x20000150
 80003a4:	20000010 	.word	0x20000010

080003a8 <buttonInnit>:

void buttonInnit(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	ButtonInitializer(NUMBER_OF_BUTTON -1);
 80003ac:	2003      	movs	r0, #3
 80003ae:	f7ff fecd 	bl	800014c <ButtonInitializer>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <isButtonPressed>:

int isButtonPressed(int index){
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	return button[index].is_pressed;
 80003c0:	4906      	ldr	r1, [pc, #24]	; (80003dc <isButtonPressed+0x24>)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	4613      	mov	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	4413      	add	r3, r2
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	440b      	add	r3, r1
 80003ce:	3314      	adds	r3, #20
 80003d0:	681b      	ldr	r3, [r3, #0]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000150 	.word	0x20000150

080003e0 <isButtonLongPressed>:
int isButtonLongPressed(int index){
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	return button[index].is_long_pressed;
 80003e8:	4906      	ldr	r1, [pc, #24]	; (8000404 <isButtonLongPressed+0x24>)
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	4613      	mov	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	440b      	add	r3, r1
 80003f6:	3318      	adds	r3, #24
 80003f8:	681b      	ldr	r3, [r3, #0]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	20000150 	.word	0x20000150

08000408 <getInput>:




void getInput(int i){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	if (i == 0) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	f040 812a 	bne.w	800066c <getInput+0x264>
		button[i].reg[0] = button[i].reg[1];
 8000418:	4991      	ldr	r1, [pc, #580]	; (8000660 <getInput+0x258>)
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4613      	mov	r3, r2
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	4413      	add	r3, r2
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	440b      	add	r3, r1
 8000426:	3304      	adds	r3, #4
 8000428:	6819      	ldr	r1, [r3, #0]
 800042a:	488d      	ldr	r0, [pc, #564]	; (8000660 <getInput+0x258>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	4403      	add	r3, r0
 8000438:	6019      	str	r1, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 800043a:	4989      	ldr	r1, [pc, #548]	; (8000660 <getInput+0x258>)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	440b      	add	r3, r1
 8000448:	3308      	adds	r3, #8
 800044a:	6819      	ldr	r1, [r3, #0]
 800044c:	4884      	ldr	r0, [pc, #528]	; (8000660 <getInput+0x258>)
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	4403      	add	r3, r0
 800045a:	3304      	adds	r3, #4
 800045c:	6019      	str	r1, [r3, #0]
		button[i].reg[2] = button[i].reg[3];
 800045e:	4980      	ldr	r1, [pc, #512]	; (8000660 <getInput+0x258>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4613      	mov	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4413      	add	r3, r2
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	440b      	add	r3, r1
 800046c:	330c      	adds	r3, #12
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	487b      	ldr	r0, [pc, #492]	; (8000660 <getInput+0x258>)
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	4403      	add	r3, r0
 800047e:	3308      	adds	r3, #8
 8000480:	6019      	str	r1, [r3, #0]
		button[i].reg[3] = button[i].reg[4];
 8000482:	4977      	ldr	r1, [pc, #476]	; (8000660 <getInput+0x258>)
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	440b      	add	r3, r1
 8000490:	3310      	adds	r3, #16
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4872      	ldr	r0, [pc, #456]	; (8000660 <getInput+0x258>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	4613      	mov	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	4403      	add	r3, r0
 80004a2:	330c      	adds	r3, #12
 80004a4:	6019      	str	r1, [r3, #0]
		button[i].reg[4] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 80004a6:	4a6f      	ldr	r2, [pc, #444]	; (8000664 <getInput+0x25c>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ae:	496e      	ldr	r1, [pc, #440]	; (8000668 <getInput+0x260>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f001 ff67 	bl	800238c <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	4618      	mov	r0, r3
 80004c2:	4967      	ldr	r1, [pc, #412]	; (8000660 <getInput+0x258>)
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4613      	mov	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	440b      	add	r3, r1
 80004d0:	3310      	adds	r3, #16
 80004d2:	6018      	str	r0, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 80004d4:	4962      	ldr	r1, [pc, #392]	; (8000660 <getInput+0x258>)
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	440b      	add	r3, r1
 80004e2:	6819      	ldr	r1, [r3, #0]
 80004e4:	485e      	ldr	r0, [pc, #376]	; (8000660 <getInput+0x258>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	4403      	add	r3, r0
 80004f2:	3304      	adds	r3, #4
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4299      	cmp	r1, r3
 80004f8:	f040 8086 	bne.w	8000608 <getInput+0x200>
				&& button[i].reg[1] == button[i].reg[2]
 80004fc:	4958      	ldr	r1, [pc, #352]	; (8000660 <getInput+0x258>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	440b      	add	r3, r1
 800050a:	3304      	adds	r3, #4
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	4854      	ldr	r0, [pc, #336]	; (8000660 <getInput+0x258>)
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4613      	mov	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4403      	add	r3, r0
 800051c:	3308      	adds	r3, #8
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4299      	cmp	r1, r3
 8000522:	d171      	bne.n	8000608 <getInput+0x200>
				&& button[i].reg[2] == button[i].reg[3]
 8000524:	494e      	ldr	r1, [pc, #312]	; (8000660 <getInput+0x258>)
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	4613      	mov	r3, r2
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	00db      	lsls	r3, r3, #3
 8000530:	440b      	add	r3, r1
 8000532:	3308      	adds	r3, #8
 8000534:	6819      	ldr	r1, [r3, #0]
 8000536:	484a      	ldr	r0, [pc, #296]	; (8000660 <getInput+0x258>)
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	4403      	add	r3, r0
 8000544:	330c      	adds	r3, #12
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4299      	cmp	r1, r3
 800054a:	d15d      	bne.n	8000608 <getInput+0x200>
				&& button[i].reg[3] == button[i].reg[4]) {
 800054c:	4944      	ldr	r1, [pc, #272]	; (8000660 <getInput+0x258>)
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	440b      	add	r3, r1
 800055a:	330c      	adds	r3, #12
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	4840      	ldr	r0, [pc, #256]	; (8000660 <getInput+0x258>)
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	4403      	add	r3, r0
 800056c:	3310      	adds	r3, #16
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4299      	cmp	r1, r3
 8000572:	d149      	bne.n	8000608 <getInput+0x200>
			if (button[i].reg[4] == PRESSED_STATE) {
 8000574:	493a      	ldr	r1, [pc, #232]	; (8000660 <getInput+0x258>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4613      	mov	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	440b      	add	r3, r1
 8000582:	3310      	adds	r3, #16
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d13e      	bne.n	8000608 <getInput+0x200>
				if (button[i].timer > 0) {
 800058a:	4935      	ldr	r1, [pc, #212]	; (8000660 <getInput+0x258>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4613      	mov	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	331c      	adds	r3, #28
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	dd13      	ble.n	80005c8 <getInput+0x1c0>
					button[i].timer--;
 80005a0:	492f      	ldr	r1, [pc, #188]	; (8000660 <getInput+0x258>)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4613      	mov	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	440b      	add	r3, r1
 80005ae:	331c      	adds	r3, #28
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1e59      	subs	r1, r3, #1
 80005b4:	482a      	ldr	r0, [pc, #168]	; (8000660 <getInput+0x258>)
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4613      	mov	r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4413      	add	r3, r2
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4403      	add	r3, r0
 80005c2:	331c      	adds	r3, #28
 80005c4:	6019      	str	r1, [r3, #0]
 80005c6:	e009      	b.n	80005dc <getInput+0x1d4>

				}
				else {
					button[i].is_long_pressed = 1;
 80005c8:	4925      	ldr	r1, [pc, #148]	; (8000660 <getInput+0x258>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	440b      	add	r3, r1
 80005d6:	3318      	adds	r3, #24
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
				}
				if (button[i].timer <= 490) {
 80005dc:	4920      	ldr	r1, [pc, #128]	; (8000660 <getInput+0x258>)
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	440b      	add	r3, r1
 80005ea:	331c      	adds	r3, #28
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80005f2:	dc09      	bgt.n	8000608 <getInput+0x200>
					button[i].is_pressed = 1;
 80005f4:	491a      	ldr	r1, [pc, #104]	; (8000660 <getInput+0x258>)
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4613      	mov	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	440b      	add	r3, r1
 8000602:	3314      	adds	r3, #20
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
				}
			}

		}
		if (button[i].reg[4] != PRESSED_STATE){
 8000608:	4915      	ldr	r1, [pc, #84]	; (8000660 <getInput+0x258>)
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	440b      	add	r3, r1
 8000616:	3310      	adds	r3, #16
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 8140 	beq.w	80008a0 <getInput+0x498>
		                button[i].is_pressed = 0;
 8000620:	490f      	ldr	r1, [pc, #60]	; (8000660 <getInput+0x258>)
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4613      	mov	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	440b      	add	r3, r1
 800062e:	3314      	adds	r3, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
						button[i].is_long_pressed = 0;
 8000634:	490a      	ldr	r1, [pc, #40]	; (8000660 <getInput+0x258>)
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	440b      	add	r3, r1
 8000642:	3318      	adds	r3, #24
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
					    button[i].timer = 500;
 8000648:	4905      	ldr	r1, [pc, #20]	; (8000660 <getInput+0x258>)
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	440b      	add	r3, r1
 8000656:	331c      	adds	r3, #28
 8000658:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065c:	601a      	str	r2, [r3, #0]
						button[i].is_long_pressed = 0;
					    button[i].timer = 500;
		            }
		getInput(i-1);
	}
}
 800065e:	e11f      	b.n	80008a0 <getInput+0x498>
 8000660:	20000150 	.word	0x20000150
 8000664:	20000000 	.word	0x20000000
 8000668:	20000010 	.word	0x20000010
		button[i].reg[0] = button[i].reg[1];
 800066c:	498e      	ldr	r1, [pc, #568]	; (80008a8 <getInput+0x4a0>)
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	440b      	add	r3, r1
 800067a:	3304      	adds	r3, #4
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <getInput+0x4a0>)
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4403      	add	r3, r0
 800068c:	6019      	str	r1, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 800068e:	4986      	ldr	r1, [pc, #536]	; (80008a8 <getInput+0x4a0>)
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	440b      	add	r3, r1
 800069c:	3308      	adds	r3, #8
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	4881      	ldr	r0, [pc, #516]	; (80008a8 <getInput+0x4a0>)
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4403      	add	r3, r0
 80006ae:	3304      	adds	r3, #4
 80006b0:	6019      	str	r1, [r3, #0]
		button[i].reg[2] = button[i].reg[3];
 80006b2:	497d      	ldr	r1, [pc, #500]	; (80008a8 <getInput+0x4a0>)
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	330c      	adds	r3, #12
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	4878      	ldr	r0, [pc, #480]	; (80008a8 <getInput+0x4a0>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	4403      	add	r3, r0
 80006d2:	3308      	adds	r3, #8
 80006d4:	6019      	str	r1, [r3, #0]
		button[i].reg[3] = button[i].reg[4];
 80006d6:	4974      	ldr	r1, [pc, #464]	; (80008a8 <getInput+0x4a0>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3310      	adds	r3, #16
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	486f      	ldr	r0, [pc, #444]	; (80008a8 <getInput+0x4a0>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4403      	add	r3, r0
 80006f6:	330c      	adds	r3, #12
 80006f8:	6019      	str	r1, [r3, #0]
		button[i].reg[4] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 80006fa:	4a6c      	ldr	r2, [pc, #432]	; (80008ac <getInput+0x4a4>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000702:	496b      	ldr	r1, [pc, #428]	; (80008b0 <getInput+0x4a8>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800070a:	4619      	mov	r1, r3
 800070c:	4610      	mov	r0, r2
 800070e:	f001 fe3d 	bl	800238c <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	4964      	ldr	r1, [pc, #400]	; (80008a8 <getInput+0x4a0>)
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	440b      	add	r3, r1
 8000724:	3310      	adds	r3, #16
 8000726:	6018      	str	r0, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000728:	495f      	ldr	r1, [pc, #380]	; (80008a8 <getInput+0x4a0>)
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	440b      	add	r3, r1
 8000736:	6819      	ldr	r1, [r3, #0]
 8000738:	485b      	ldr	r0, [pc, #364]	; (80008a8 <getInput+0x4a0>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4403      	add	r3, r0
 8000746:	3304      	adds	r3, #4
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4299      	cmp	r1, r3
 800074c:	d179      	bne.n	8000842 <getInput+0x43a>
				&& button[i].reg[1] == button[i].reg[2]
 800074e:	4956      	ldr	r1, [pc, #344]	; (80008a8 <getInput+0x4a0>)
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	3304      	adds	r3, #4
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	4851      	ldr	r0, [pc, #324]	; (80008a8 <getInput+0x4a0>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	4403      	add	r3, r0
 800076e:	3308      	adds	r3, #8
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4299      	cmp	r1, r3
 8000774:	d165      	bne.n	8000842 <getInput+0x43a>
				&& button[i].reg[2] == button[i].reg[3]
 8000776:	494c      	ldr	r1, [pc, #304]	; (80008a8 <getInput+0x4a0>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	440b      	add	r3, r1
 8000784:	3308      	adds	r3, #8
 8000786:	6819      	ldr	r1, [r3, #0]
 8000788:	4847      	ldr	r0, [pc, #284]	; (80008a8 <getInput+0x4a0>)
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4403      	add	r3, r0
 8000796:	330c      	adds	r3, #12
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4299      	cmp	r1, r3
 800079c:	d151      	bne.n	8000842 <getInput+0x43a>
				&& button[i].reg[3] == button[i].reg[4]) {
 800079e:	4942      	ldr	r1, [pc, #264]	; (80008a8 <getInput+0x4a0>)
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	440b      	add	r3, r1
 80007ac:	330c      	adds	r3, #12
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	483d      	ldr	r0, [pc, #244]	; (80008a8 <getInput+0x4a0>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4403      	add	r3, r0
 80007be:	3310      	adds	r3, #16
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d13d      	bne.n	8000842 <getInput+0x43a>
			if (button[i].reg[4] == PRESSED_STATE) {
 80007c6:	4938      	ldr	r1, [pc, #224]	; (80008a8 <getInput+0x4a0>)
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	440b      	add	r3, r1
 80007d4:	3310      	adds	r3, #16
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d132      	bne.n	8000842 <getInput+0x43a>
				button[i].is_pressed = 1;
 80007dc:	4932      	ldr	r1, [pc, #200]	; (80008a8 <getInput+0x4a0>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3314      	adds	r3, #20
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
				if (button[i].timer > 0) {
 80007f0:	492d      	ldr	r1, [pc, #180]	; (80008a8 <getInput+0x4a0>)
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	331c      	adds	r3, #28
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd13      	ble.n	800082e <getInput+0x426>
					button[i].timer--;
 8000806:	4928      	ldr	r1, [pc, #160]	; (80008a8 <getInput+0x4a0>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	331c      	adds	r3, #28
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1e59      	subs	r1, r3, #1
 800081a:	4823      	ldr	r0, [pc, #140]	; (80008a8 <getInput+0x4a0>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	4403      	add	r3, r0
 8000828:	331c      	adds	r3, #28
 800082a:	6019      	str	r1, [r3, #0]
 800082c:	e009      	b.n	8000842 <getInput+0x43a>
					button[i].is_long_pressed = 1;
 800082e:	491e      	ldr	r1, [pc, #120]	; (80008a8 <getInput+0x4a0>)
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3318      	adds	r3, #24
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
		if (button[i].reg[4] != PRESSED_STATE){
 8000842:	4919      	ldr	r1, [pc, #100]	; (80008a8 <getInput+0x4a0>)
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3310      	adds	r3, #16
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d01e      	beq.n	8000896 <getInput+0x48e>
		                button[i].is_pressed = 0;
 8000858:	4913      	ldr	r1, [pc, #76]	; (80008a8 <getInput+0x4a0>)
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4613      	mov	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	440b      	add	r3, r1
 8000866:	3314      	adds	r3, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
						button[i].is_long_pressed = 0;
 800086c:	490e      	ldr	r1, [pc, #56]	; (80008a8 <getInput+0x4a0>)
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	440b      	add	r3, r1
 800087a:	3318      	adds	r3, #24
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
					    button[i].timer = 500;
 8000880:	4909      	ldr	r1, [pc, #36]	; (80008a8 <getInput+0x4a0>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	331c      	adds	r3, #28
 8000890:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000894:	601a      	str	r2, [r3, #0]
		getInput(i-1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3b01      	subs	r3, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fdb4 	bl	8000408 <getInput>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000150 	.word	0x20000150
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000010 	.word	0x20000010

080008b4 <getKeyInput>:
void getKeyInput(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	getInput(NUMBER_OF_BUTTON-1);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f7ff fda5 	bl	8000408 <getInput>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <fsm_automatic_run>:
 *      Author: MY PC
 */

#include "fsm_auto.h"

void fsm_automatic_run(int lane){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

	Display(timer[0].count / 100, timer[1].count / 100);
 80008cc:	4b90      	ldr	r3, [pc, #576]	; (8000b10 <fsm_automatic_run+0x24c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a90      	ldr	r2, [pc, #576]	; (8000b14 <fsm_automatic_run+0x250>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	4618      	mov	r0, r3
 80008da:	4b8d      	ldr	r3, [pc, #564]	; (8000b10 <fsm_automatic_run+0x24c>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4a8d      	ldr	r2, [pc, #564]	; (8000b14 <fsm_automatic_run+0x250>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	095b      	lsrs	r3, r3, #5
 80008e6:	4619      	mov	r1, r3
 80008e8:	f001 f906 	bl	8001af8 <Display>
	if (PEDESTRIAN_MODE && LED_STATE[0] == RED_STATE) {
 80008ec:	4b8a      	ldr	r3, [pc, #552]	; (8000b18 <fsm_automatic_run+0x254>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d04a      	beq.n	800098a <fsm_automatic_run+0xc6>
 80008f4:	4b89      	ldr	r3, [pc, #548]	; (8000b1c <fsm_automatic_run+0x258>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d146      	bne.n	800098a <fsm_automatic_run+0xc6>
		int freq = ((RED_DURATION * 100 - timer[0].count) / RED_DURATION)*21 ;
 80008fc:	4b88      	ldr	r3, [pc, #544]	; (8000b20 <fsm_automatic_run+0x25c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2264      	movs	r2, #100	; 0x64
 8000902:	fb02 f303 	mul.w	r3, r2, r3
 8000906:	461a      	mov	r2, r3
 8000908:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <fsm_automatic_run+0x24c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	4a84      	ldr	r2, [pc, #528]	; (8000b20 <fsm_automatic_run+0x25c>)
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	fbb3 f2f2 	udiv	r2, r3, r2
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00da      	lsls	r2, r3, #3
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	60fb      	str	r3, [r7, #12]
            if(timer[0].count >= (RED_DURATION * 60) && timer[0].count <= (RED_DURATION * 80)) buzzer(0);
 8000922:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <fsm_automatic_run+0x24c>)
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	4b7e      	ldr	r3, [pc, #504]	; (8000b20 <fsm_automatic_run+0x25c>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4613      	mov	r3, r2
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4299      	cmp	r1, r3
 8000934:	d30d      	bcc.n	8000952 <fsm_automatic_run+0x8e>
 8000936:	4b76      	ldr	r3, [pc, #472]	; (8000b10 <fsm_automatic_run+0x24c>)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	4b79      	ldr	r3, [pc, #484]	; (8000b20 <fsm_automatic_run+0x25c>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	4299      	cmp	r1, r3
 8000948:	d803      	bhi.n	8000952 <fsm_automatic_run+0x8e>
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fdb0 	bl	80014b0 <buzzer>
 8000950:	e01b      	b.n	800098a <fsm_automatic_run+0xc6>
            else if(timer[0].count >= (RED_DURATION * 20) && timer[0].count <= (RED_DURATION * 40)) buzzer(0);
 8000952:	4b6f      	ldr	r3, [pc, #444]	; (8000b10 <fsm_automatic_run+0x24c>)
 8000954:	6819      	ldr	r1, [r3, #0]
 8000956:	4b72      	ldr	r3, [pc, #456]	; (8000b20 <fsm_automatic_run+0x25c>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4299      	cmp	r1, r3
 8000964:	d30d      	bcc.n	8000982 <fsm_automatic_run+0xbe>
 8000966:	4b6a      	ldr	r3, [pc, #424]	; (8000b10 <fsm_automatic_run+0x24c>)
 8000968:	6819      	ldr	r1, [r3, #0]
 800096a:	4b6d      	ldr	r3, [pc, #436]	; (8000b20 <fsm_automatic_run+0x25c>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4299      	cmp	r1, r3
 8000978:	d803      	bhi.n	8000982 <fsm_automatic_run+0xbe>
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fd98 	bl	80014b0 <buzzer>
 8000980:	e003      	b.n	800098a <fsm_automatic_run+0xc6>
            else buzzer(freq);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd93 	bl	80014b0 <buzzer>

	}


	if(LED_STATE[0] != RED_STATE){
 800098a:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <fsm_automatic_run+0x258>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d002      	beq.n	8000998 <fsm_automatic_run+0xd4>
		buzzer(0);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fd8c 	bl	80014b0 <buzzer>
	}
	switch(LED_STATE[lane]){
 8000998:	4a60      	ldr	r2, [pc, #384]	; (8000b1c <fsm_automatic_run+0x258>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	f200 80a6 	bhi.w	8000af4 <fsm_automatic_run+0x230>
 80009a8:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <fsm_automatic_run+0xec>)
 80009aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ae:	bf00      	nop
 80009b0:	080009c1 	.word	0x080009c1
 80009b4:	08000a1d 	.word	0x08000a1d
 80009b8:	08000a65 	.word	0x08000a65
 80009bc:	08000aad 	.word	0x08000aad
		case INIT_STATE:
			setTrafficLightDefault(lane);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 ff99 	bl	80018f8 <setTrafficLightDefault>
			if (lane == 0){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d117      	bne.n	80009fc <fsm_automatic_run+0x138>
				LED_STATE[lane] = RED_STATE;
 80009cc:	4a53      	ldr	r2, [pc, #332]	; (8000b1c <fsm_automatic_run+0x258>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2102      	movs	r1, #2
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4b51      	ldr	r3, [pc, #324]	; (8000b20 <fsm_automatic_run+0x25c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2164      	movs	r1, #100	; 0x64
 80009de:	fb01 f303 	mul.w	r3, r1, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	4610      	mov	r0, r2
 80009e6:	f000 ff0d 	bl	8001804 <setTimer>
				if(PEDESTRIAN_MODE){
 80009ea:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <fsm_automatic_run+0x254>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8082 	beq.w	8000af8 <fsm_automatic_run+0x234>
					setGreen(2);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 ffcd 	bl	8001994 <setGreen>
			}
			else{
				LED_STATE[lane] = GREEN_STATE;
				setTimer(lane, GREEN_DURATION*100);
			}
			break;
 80009fa:	e07d      	b.n	8000af8 <fsm_automatic_run+0x234>
				LED_STATE[lane] = GREEN_STATE;
 80009fc:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <fsm_automatic_run+0x258>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2103      	movs	r1, #3
 8000a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <fsm_automatic_run+0x260>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2164      	movs	r1, #100	; 0x64
 8000a0e:	fb01 f303 	mul.w	r3, r1, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	4610      	mov	r0, r2
 8000a16:	f000 fef5 	bl	8001804 <setTimer>
			break;
 8000a1a:	e06d      	b.n	8000af8 <fsm_automatic_run+0x234>
		case RED_STATE:
			setRed(lane);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 fffb 	bl	8001a18 <setRed>
			if(isTimerOn(lane) == 1){
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 ff51 	bl	80018cc <isTimerOn>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10e      	bne.n	8000a4e <fsm_automatic_run+0x18a>
				LED_STATE[lane] = GREEN_STATE;
 8000a30:	4a3a      	ldr	r2, [pc, #232]	; (8000b1c <fsm_automatic_run+0x258>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2103      	movs	r1, #3
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <fsm_automatic_run+0x260>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	fb01 f303 	mul.w	r3, r1, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	4610      	mov	r0, r2
 8000a4a:	f000 fedb 	bl	8001804 <setTimer>
			}

			if(lane ==0 && PEDESTRIAN_MODE){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d153      	bne.n	8000afc <fsm_automatic_run+0x238>
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <fsm_automatic_run+0x254>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d04f      	beq.n	8000afc <fsm_automatic_run+0x238>
				setGreen(2);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f000 ff99 	bl	8001994 <setGreen>
			}
			break;
 8000a62:	e04b      	b.n	8000afc <fsm_automatic_run+0x238>
		case GREEN_STATE:
			setGreen(lane);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 ff95 	bl	8001994 <setGreen>
			if(isTimerOn(lane) == 1){
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 ff2d 	bl	80018cc <isTimerOn>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10e      	bne.n	8000a96 <fsm_automatic_run+0x1d2>
				LED_STATE[lane] = YELLOW_STATE;
 8000a78:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <fsm_automatic_run+0x258>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <fsm_automatic_run+0x264>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2164      	movs	r1, #100	; 0x64
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4610      	mov	r0, r2
 8000a92:	f000 feb7 	bl	8001804 <setTimer>
			}

			if(lane == 0 && PEDESTRIAN_MODE){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d131      	bne.n	8000b00 <fsm_automatic_run+0x23c>
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <fsm_automatic_run+0x254>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02d      	beq.n	8000b00 <fsm_automatic_run+0x23c>
				setRed(2);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f000 ffb7 	bl	8001a18 <setRed>
			}
			break;
 8000aaa:	e029      	b.n	8000b00 <fsm_automatic_run+0x23c>
		case YELLOW_STATE:
			setAmber(lane);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 fff5 	bl	8001a9c <setAmber>
			if(isTimerOn(lane) == 1){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 ff09 	bl	80018cc <isTimerOn>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d10e      	bne.n	8000ade <fsm_automatic_run+0x21a>
				LED_STATE[lane] = RED_STATE;
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <fsm_automatic_run+0x258>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <fsm_automatic_run+0x25c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2164      	movs	r1, #100	; 0x64
 8000ad2:	fb01 f303 	mul.w	r3, r1, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4610      	mov	r0, r2
 8000ada:	f000 fe93 	bl	8001804 <setTimer>
			}

			if(lane ==0 && PEDESTRIAN_MODE){
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d10f      	bne.n	8000b04 <fsm_automatic_run+0x240>
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <fsm_automatic_run+0x254>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00b      	beq.n	8000b04 <fsm_automatic_run+0x240>
				setRed(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f000 ff93 	bl	8001a18 <setRed>
			}
			break;
 8000af2:	e007      	b.n	8000b04 <fsm_automatic_run+0x240>
		default:
			break;
 8000af4:	bf00      	nop
 8000af6:	e006      	b.n	8000b06 <fsm_automatic_run+0x242>
			break;
 8000af8:	bf00      	nop
 8000afa:	e004      	b.n	8000b06 <fsm_automatic_run+0x242>
			break;
 8000afc:	bf00      	nop
 8000afe:	e002      	b.n	8000b06 <fsm_automatic_run+0x242>
			break;
 8000b00:	bf00      	nop
 8000b02:	e000      	b.n	8000b06 <fsm_automatic_run+0x242>
			break;
 8000b04:	bf00      	nop
	}


}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000e0 	.word	0x200000e0
 8000b14:	51eb851f 	.word	0x51eb851f
 8000b18:	200000d0 	.word	0x200000d0
 8000b1c:	20000018 	.word	0x20000018
 8000b20:	20000024 	.word	0x20000024
 8000b24:	2000002c 	.word	0x2000002c
 8000b28:	20000028 	.word	0x20000028

08000b2c <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	setTrafficLightDefault(0);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 fedf 	bl	80018f8 <setTrafficLightDefault>
	setTrafficLightDefault(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 fedc 	bl	80018f8 <setTrafficLightDefault>
	MODE = mode;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <changeMode+0x2c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
	setTimer(2, 25);
 8000b46:	2119      	movs	r1, #25
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f000 fe5b 	bl	8001804 <setTimer>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000020 	.word	0x20000020

08000b5c <fsm_manual_run>:



void fsm_manual_run(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

	switch(MODE){
 8000b60:	4b92      	ldr	r3, [pc, #584]	; (8000dac <fsm_manual_run+0x250>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3b0b      	subs	r3, #11
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	f200 8276 	bhi.w	8001058 <fsm_manual_run+0x4fc>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <fsm_manual_run+0x18>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000ca5 	.word	0x08000ca5
 8000b7c:	08000ddd 	.word	0x08000ddd
 8000b80:	08000edf 	.word	0x08000edf
		case MODE_1:
			fsm_automatic_run(0);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff fe9d 	bl	80008c4 <fsm_automatic_run>
			fsm_automatic_run(1);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fe9a 	bl	80008c4 <fsm_automatic_run>

			if (isButtonPressed(0) == 1){
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff fc11 	bl	80003b8 <isButtonPressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d110      	bne.n	8000bbe <fsm_manual_run+0x62>
				tempDuration = RED_DURATION;
 8000b9c:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <fsm_manual_run+0x254>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a84      	ldr	r2, [pc, #528]	; (8000db4 <fsm_manual_run+0x258>)
 8000ba2:	6013      	str	r3, [r2, #0]
				changeMode(MODE_2);
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f7ff ffc1 	bl	8000b2c <changeMode>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000baa:	2120      	movs	r1, #32
 8000bac:	4882      	ldr	r0, [pc, #520]	; (8000db8 <fsm_manual_run+0x25c>)
 8000bae:	f001 fc1c 	bl	80023ea <HAL_GPIO_TogglePin>
//				Turn off pedestrian mode
				PEDESTRIAN_MODE = 0;
 8000bb2:	4b82      	ldr	r3, [pc, #520]	; (8000dbc <fsm_manual_run+0x260>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
				ButtonInitializer(0);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fac7 	bl	800014c <ButtonInitializer>
			}
//			Change light on
			if(isButtonPressed(1) == 1){
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fbfa 	bl	80003b8 <isButtonPressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d14c      	bne.n	8000c64 <fsm_manual_run+0x108>
				if(LED_STATE[0] == GREEN_STATE || LED_STATE[0] == YELLOW_STATE){
 8000bca:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <fsm_manual_run+0x264>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d003      	beq.n	8000bda <fsm_manual_run+0x7e>
 8000bd2:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <fsm_manual_run+0x264>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d11e      	bne.n	8000c18 <fsm_manual_run+0xbc>
					LED_STATE[0]= RED_STATE;
 8000bda:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <fsm_manual_run+0x264>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	601a      	str	r2, [r3, #0]
					setTimer(0, RED_DURATION*100);
 8000be0:	4b73      	ldr	r3, [pc, #460]	; (8000db0 <fsm_manual_run+0x254>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2264      	movs	r2, #100	; 0x64
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	4619      	mov	r1, r3
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fe09 	bl	8001804 <setTimer>
					LED_STATE[1]= GREEN_STATE;
 8000bf2:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <fsm_manual_run+0x264>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	605a      	str	r2, [r3, #4]
					setTimer(1, GREEN_DURATION*100);
 8000bf8:	4b72      	ldr	r3, [pc, #456]	; (8000dc4 <fsm_manual_run+0x268>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2264      	movs	r2, #100	; 0x64
 8000bfe:	fb02 f303 	mul.w	r3, r2, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fdfd 	bl	8001804 <setTimer>
					if(PEDESTRIAN_MODE){
 8000c0a:	4b6c      	ldr	r3, [pc, #432]	; (8000dbc <fsm_manual_run+0x260>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <fsm_manual_run+0xbc>
						setGreen(2);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f000 febe 	bl	8001994 <setGreen>
					}

				}

				if (LED_STATE[0] == RED_STATE){
 8000c18:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <fsm_manual_run+0x264>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d11e      	bne.n	8000c5e <fsm_manual_run+0x102>
					LED_STATE[0]= GREEN_STATE;
 8000c20:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <fsm_manual_run+0x264>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	601a      	str	r2, [r3, #0]
					setTimer(0, GREEN_DURATION*100);
 8000c26:	4b67      	ldr	r3, [pc, #412]	; (8000dc4 <fsm_manual_run+0x268>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2264      	movs	r2, #100	; 0x64
 8000c2c:	fb02 f303 	mul.w	r3, r2, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 fde6 	bl	8001804 <setTimer>
					LED_STATE[1]= RED_STATE;
 8000c38:	4b61      	ldr	r3, [pc, #388]	; (8000dc0 <fsm_manual_run+0x264>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]
					setTimer(1, RED_DURATION*100);
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <fsm_manual_run+0x254>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2264      	movs	r2, #100	; 0x64
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 fdda 	bl	8001804 <setTimer>
					if(PEDESTRIAN_MODE){
 8000c50:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <fsm_manual_run+0x260>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <fsm_manual_run+0x102>
						setRed(2);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f000 fedd 	bl	8001a18 <setRed>
					}
				}
				ButtonInitializer(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fa74 	bl	800014c <ButtonInitializer>
			}

			if(isButtonPressed(3) == 1){
 8000c64:	2003      	movs	r0, #3
 8000c66:	f7ff fba7 	bl	80003b8 <isButtonPressed>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d10b      	bne.n	8000c88 <fsm_manual_run+0x12c>
				PEDESTRIAN_MODE = 1;
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <fsm_manual_run+0x260>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
				setTimer(3, PEDESTRIAN_DURATION*100);
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <fsm_manual_run+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2264      	movs	r2, #100	; 0x64
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	4619      	mov	r1, r3
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 fdbe 	bl	8001804 <setTimer>

			}
			if(isTimerOn(3)){
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fe1f 	bl	80018cc <isTimerOn>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 81e5 	beq.w	8001060 <fsm_manual_run+0x504>
				PEDESTRIAN_MODE=0;
 8000c96:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <fsm_manual_run+0x260>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
				setTrafficLightDefault(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fe2b 	bl	80018f8 <setTrafficLightDefault>

			}
			break;
 8000ca2:	e1dd      	b.n	8001060 <fsm_manual_run+0x504>
		case MODE_2:
			Display(2, tempDuration);
 8000ca4:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <fsm_manual_run+0x258>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 ff24 	bl	8001af8 <Display>
			if (isButtonPressed(0) == 1){
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fb81 	bl	80003b8 <isButtonPressed>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d109      	bne.n	8000cd0 <fsm_manual_run+0x174>
				tempDuration = YELLOW_DURATION;
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <fsm_manual_run+0x270>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a3c      	ldr	r2, [pc, #240]	; (8000db4 <fsm_manual_run+0x258>)
 8000cc2:	6013      	str	r3, [r2, #0]
				changeMode(MODE_3);
 8000cc4:	200d      	movs	r0, #13
 8000cc6:	f7ff ff31 	bl	8000b2c <changeMode>
				ButtonInitializer(0);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fa3e 	bl	800014c <ButtonInitializer>
			}
			if (isButtonPressed(1) == 1){
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fb71 	bl	80003b8 <isButtonPressed>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d115      	bne.n	8000d08 <fsm_manual_run+0x1ac>
				tempDuration++;
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <fsm_manual_run+0x258>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a34      	ldr	r2, [pc, #208]	; (8000db4 <fsm_manual_run+0x258>)
 8000ce4:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <fsm_manual_run+0x258>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <fsm_manual_run+0x274>)
 8000cec:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf0:	1159      	asrs	r1, r3, #5
 8000cf2:	17d3      	asrs	r3, r2, #31
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	2164      	movs	r1, #100	; 0x64
 8000cf8:	fb01 f303 	mul.w	r3, r1, r3
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <fsm_manual_run+0x258>)
 8000d00:	6013      	str	r3, [r2, #0]
				ButtonInitializer(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fa22 	bl	800014c <ButtonInitializer>
			}
			if(isButtonLongPressed(1)==1){
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff fb69 	bl	80003e0 <isButtonLongPressed>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d11c      	bne.n	8000d4e <fsm_manual_run+0x1f2>
				if(isTimerOn(3) ==1){
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 fdd9 	bl	80018cc <isTimerOn>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d116      	bne.n	8000d4e <fsm_manual_run+0x1f2>
					tempDuration++;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <fsm_manual_run+0x258>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <fsm_manual_run+0x258>)
 8000d28:	6013      	str	r3, [r2, #0]
					tempDuration %= 100;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <fsm_manual_run+0x258>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <fsm_manual_run+0x274>)
 8000d30:	fb83 1302 	smull	r1, r3, r3, r2
 8000d34:	1159      	asrs	r1, r3, #5
 8000d36:	17d3      	asrs	r3, r2, #31
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	fb01 f303 	mul.w	r3, r1, r3
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <fsm_manual_run+0x258>)
 8000d44:	6013      	str	r3, [r2, #0]
					setTimer(4,50);
 8000d46:	2132      	movs	r1, #50	; 0x32
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f000 fd5b 	bl	8001804 <setTimer>
				}
			}
			if (isButtonPressed(2) == 1){
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff fb32 	bl	80003b8 <isButtonPressed>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d107      	bne.n	8000d6a <fsm_manual_run+0x20e>
				RED_DURATION = tempDuration;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <fsm_manual_run+0x258>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <fsm_manual_run+0x254>)
 8000d60:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d62:	2120      	movs	r1, #32
 8000d64:	4814      	ldr	r0, [pc, #80]	; (8000db8 <fsm_manual_run+0x25c>)
 8000d66:	f001 fb40 	bl	80023ea <HAL_GPIO_TogglePin>
			}

			if (isTimerOn(2) == 1){
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f000 fdae 	bl	80018cc <isTimerOn>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	f040 8176 	bne.w	8001064 <fsm_manual_run+0x508>

				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <fsm_manual_run+0x278>)
 8000d7e:	f001 fb34 	bl	80023ea <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <fsm_manual_run+0x278>)
 8000d8a:	f001 fb16 	bl	80023ba <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <fsm_manual_run+0x27c>)
 8000d92:	f001 fb2a 	bl	80023ea <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <fsm_manual_run+0x25c>)
 8000d9c:	f001 fb0d 	bl	80023ba <HAL_GPIO_WritePin>
				setTimer(2, 10);
 8000da0:	210a      	movs	r1, #10
 8000da2:	2002      	movs	r0, #2
 8000da4:	f000 fd2e 	bl	8001804 <setTimer>
			}
			break;
 8000da8:	e15c      	b.n	8001064 <fsm_manual_run+0x508>
 8000daa:	bf00      	nop
 8000dac:	20000020 	.word	0x20000020
 8000db0:	20000024 	.word	0x20000024
 8000db4:	200000cc 	.word	0x200000cc
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	200000d0 	.word	0x200000d0
 8000dc0:	20000018 	.word	0x20000018
 8000dc4:	2000002c 	.word	0x2000002c
 8000dc8:	2000003c 	.word	0x2000003c
 8000dcc:	20000028 	.word	0x20000028
 8000dd0:	51eb851f 	.word	0x51eb851f
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40010c00 	.word	0x40010c00
		case MODE_3:
			Display(3, tempDuration);
 8000ddc:	4ba5      	ldr	r3, [pc, #660]	; (8001074 <fsm_manual_run+0x518>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 fe88 	bl	8001af8 <Display>
			if (isButtonPressed(0) == 1){
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fae5 	bl	80003b8 <isButtonPressed>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d109      	bne.n	8000e08 <fsm_manual_run+0x2ac>
				tempDuration = GREEN_DURATION;
 8000df4:	4ba0      	ldr	r3, [pc, #640]	; (8001078 <fsm_manual_run+0x51c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a9e      	ldr	r2, [pc, #632]	; (8001074 <fsm_manual_run+0x518>)
 8000dfa:	6013      	str	r3, [r2, #0]
				changeMode(MODE_4);
 8000dfc:	200e      	movs	r0, #14
 8000dfe:	f7ff fe95 	bl	8000b2c <changeMode>
				ButtonInitializer(0);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff f9a2 	bl	800014c <ButtonInitializer>
			}
			if (isButtonPressed(1) == 1){
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fad5 	bl	80003b8 <isButtonPressed>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d115      	bne.n	8000e40 <fsm_manual_run+0x2e4>
				tempDuration++;
 8000e14:	4b97      	ldr	r3, [pc, #604]	; (8001074 <fsm_manual_run+0x518>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a96      	ldr	r2, [pc, #600]	; (8001074 <fsm_manual_run+0x518>)
 8000e1c:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000e1e:	4b95      	ldr	r3, [pc, #596]	; (8001074 <fsm_manual_run+0x518>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b96      	ldr	r3, [pc, #600]	; (800107c <fsm_manual_run+0x520>)
 8000e24:	fb83 1302 	smull	r1, r3, r3, r2
 8000e28:	1159      	asrs	r1, r3, #5
 8000e2a:	17d3      	asrs	r3, r2, #31
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	2164      	movs	r1, #100	; 0x64
 8000e30:	fb01 f303 	mul.w	r3, r1, r3
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	4a8f      	ldr	r2, [pc, #572]	; (8001074 <fsm_manual_run+0x518>)
 8000e38:	6013      	str	r3, [r2, #0]
				ButtonInitializer(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff f986 	bl	800014c <ButtonInitializer>
			}
			if(isButtonLongPressed(1)==1){
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff facd 	bl	80003e0 <isButtonLongPressed>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d11c      	bne.n	8000e86 <fsm_manual_run+0x32a>
				if(isTimerOn(3) ==1){
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fd3d 	bl	80018cc <isTimerOn>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d116      	bne.n	8000e86 <fsm_manual_run+0x32a>
					tempDuration++;
 8000e58:	4b86      	ldr	r3, [pc, #536]	; (8001074 <fsm_manual_run+0x518>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a85      	ldr	r2, [pc, #532]	; (8001074 <fsm_manual_run+0x518>)
 8000e60:	6013      	str	r3, [r2, #0]
					tempDuration %= 100;
 8000e62:	4b84      	ldr	r3, [pc, #528]	; (8001074 <fsm_manual_run+0x518>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <fsm_manual_run+0x520>)
 8000e68:	fb83 1302 	smull	r1, r3, r3, r2
 8000e6c:	1159      	asrs	r1, r3, #5
 8000e6e:	17d3      	asrs	r3, r2, #31
 8000e70:	1acb      	subs	r3, r1, r3
 8000e72:	2164      	movs	r1, #100	; 0x64
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	4a7e      	ldr	r2, [pc, #504]	; (8001074 <fsm_manual_run+0x518>)
 8000e7c:	6013      	str	r3, [r2, #0]
					setTimer(4,50);
 8000e7e:	2132      	movs	r1, #50	; 0x32
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fcbf 	bl	8001804 <setTimer>
				}
			}
			if (isButtonPressed(2) == 1){
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff fa96 	bl	80003b8 <isButtonPressed>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d107      	bne.n	8000ea2 <fsm_manual_run+0x346>
				YELLOW_DURATION = tempDuration;
 8000e92:	4b78      	ldr	r3, [pc, #480]	; (8001074 <fsm_manual_run+0x518>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a7a      	ldr	r2, [pc, #488]	; (8001080 <fsm_manual_run+0x524>)
 8000e98:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	4879      	ldr	r0, [pc, #484]	; (8001084 <fsm_manual_run+0x528>)
 8000e9e:	f001 faa4 	bl	80023ea <HAL_GPIO_TogglePin>
			}
			if (isTimerOn(2) == 1){
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f000 fd12 	bl	80018cc <isTimerOn>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	f040 80dc 	bne.w	8001068 <fsm_manual_run+0x50c>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin);
 8000eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb4:	4874      	ldr	r0, [pc, #464]	; (8001088 <fsm_manual_run+0x52c>)
 8000eb6:	f001 fa98 	bl	80023ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 8000eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebe:	4872      	ldr	r0, [pc, #456]	; (8001088 <fsm_manual_run+0x52c>)
 8000ec0:	f001 fa93 	bl	80023ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4871      	ldr	r0, [pc, #452]	; (800108c <fsm_manual_run+0x530>)
 8000ec8:	f001 fa8f 	bl	80023ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 8000ecc:	2110      	movs	r1, #16
 8000ece:	486d      	ldr	r0, [pc, #436]	; (8001084 <fsm_manual_run+0x528>)
 8000ed0:	f001 fa8b 	bl	80023ea <HAL_GPIO_TogglePin>
				setTimer(2, 10);
 8000ed4:	210a      	movs	r1, #10
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 fc94 	bl	8001804 <setTimer>
			}
			break;
 8000edc:	e0c4      	b.n	8001068 <fsm_manual_run+0x50c>
		case MODE_4:
			Display(4, tempDuration);
 8000ede:	4b65      	ldr	r3, [pc, #404]	; (8001074 <fsm_manual_run+0x518>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	f000 fe07 	bl	8001af8 <Display>
			if (isButtonPressed(0) == 1){
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fa64 	bl	80003b8 <isButtonPressed>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d144      	bne.n	8000f80 <fsm_manual_run+0x424>
				LED_STATE [0] = INIT_STATE;
 8000ef6:	4b66      	ldr	r3, [pc, #408]	; (8001090 <fsm_manual_run+0x534>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
				LED_STATE [1] = INIT_STATE;
 8000efc:	4b64      	ldr	r3, [pc, #400]	; (8001090 <fsm_manual_run+0x534>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
				if(RED_DURATION != YELLOW_DURATION + GREEN_DURATION || !RED_DURATION || !YELLOW_DURATION || !GREEN_DURATION){
 8000f02:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <fsm_manual_run+0x524>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <fsm_manual_run+0x51c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	4b61      	ldr	r3, [pc, #388]	; (8001094 <fsm_manual_run+0x538>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d10b      	bne.n	8000f2c <fsm_manual_run+0x3d0>
 8000f14:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <fsm_manual_run+0x538>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d007      	beq.n	8000f2c <fsm_manual_run+0x3d0>
 8000f1c:	4b58      	ldr	r3, [pc, #352]	; (8001080 <fsm_manual_run+0x524>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <fsm_manual_run+0x3d0>
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <fsm_manual_run+0x51c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10c      	bne.n	8000f46 <fsm_manual_run+0x3ea>
					RED_DURATION =RED_INNIT;
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <fsm_manual_run+0x53c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a58      	ldr	r2, [pc, #352]	; (8001094 <fsm_manual_run+0x538>)
 8000f32:	6013      	str	r3, [r2, #0]
					YELLOW_DURATION= YELLOW_INNIT;
 8000f34:	4b59      	ldr	r3, [pc, #356]	; (800109c <fsm_manual_run+0x540>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a51      	ldr	r2, [pc, #324]	; (8001080 <fsm_manual_run+0x524>)
 8000f3a:	6013      	str	r3, [r2, #0]
					GREEN_DURATION = GREEN_INNIT;
 8000f3c:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <fsm_manual_run+0x544>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <fsm_manual_run+0x51c>)
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e00b      	b.n	8000f5e <fsm_manual_run+0x402>
				}
				else{
					RED_INNIT = RED_DURATION;
 8000f46:	4b53      	ldr	r3, [pc, #332]	; (8001094 <fsm_manual_run+0x538>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a53      	ldr	r2, [pc, #332]	; (8001098 <fsm_manual_run+0x53c>)
 8000f4c:	6013      	str	r3, [r2, #0]
					YELLOW_INNIT = YELLOW_DURATION;
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <fsm_manual_run+0x524>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a52      	ldr	r2, [pc, #328]	; (800109c <fsm_manual_run+0x540>)
 8000f54:	6013      	str	r3, [r2, #0]
					GREEN_INNIT = GREEN_DURATION;
 8000f56:	4b48      	ldr	r3, [pc, #288]	; (8001078 <fsm_manual_run+0x51c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <fsm_manual_run+0x544>)
 8000f5c:	6013      	str	r3, [r2, #0]
				}
				PEDESTRIAN_DURATION = 2 * (RED_DURATION + YELLOW_DURATION + GREEN_DURATION);
 8000f5e:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <fsm_manual_run+0x538>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <fsm_manual_run+0x524>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	441a      	add	r2, r3
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <fsm_manual_run+0x51c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <fsm_manual_run+0x548>)
 8000f72:	6013      	str	r3, [r2, #0]
				changeMode(MODE_1);
 8000f74:	200b      	movs	r0, #11
 8000f76:	f7ff fdd9 	bl	8000b2c <changeMode>
				ButtonInitializer(0);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff f8e6 	bl	800014c <ButtonInitializer>
			}
			if (isButtonPressed(1) == 1){
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff fa19 	bl	80003b8 <isButtonPressed>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d115      	bne.n	8000fb8 <fsm_manual_run+0x45c>
				tempDuration++;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <fsm_manual_run+0x518>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a38      	ldr	r2, [pc, #224]	; (8001074 <fsm_manual_run+0x518>)
 8000f94:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <fsm_manual_run+0x518>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <fsm_manual_run+0x520>)
 8000f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa0:	1159      	asrs	r1, r3, #5
 8000fa2:	17d3      	asrs	r3, r2, #31
 8000fa4:	1acb      	subs	r3, r1, r3
 8000fa6:	2164      	movs	r1, #100	; 0x64
 8000fa8:	fb01 f303 	mul.w	r3, r1, r3
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <fsm_manual_run+0x518>)
 8000fb0:	6013      	str	r3, [r2, #0]
				ButtonInitializer(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff f8ca 	bl	800014c <ButtonInitializer>
			}
			if(isButtonLongPressed(1)==1){
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fa11 	bl	80003e0 <isButtonLongPressed>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d11c      	bne.n	8000ffe <fsm_manual_run+0x4a2>
				if(isTimerOn(3) ==1){
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fc81 	bl	80018cc <isTimerOn>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d116      	bne.n	8000ffe <fsm_manual_run+0x4a2>
					tempDuration++;
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <fsm_manual_run+0x518>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <fsm_manual_run+0x518>)
 8000fd8:	6013      	str	r3, [r2, #0]
					tempDuration %= 100;
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <fsm_manual_run+0x518>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <fsm_manual_run+0x520>)
 8000fe0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fe4:	1159      	asrs	r1, r3, #5
 8000fe6:	17d3      	asrs	r3, r2, #31
 8000fe8:	1acb      	subs	r3, r1, r3
 8000fea:	2164      	movs	r1, #100	; 0x64
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4a20      	ldr	r2, [pc, #128]	; (8001074 <fsm_manual_run+0x518>)
 8000ff4:	6013      	str	r3, [r2, #0]
					setTimer(4,50);
 8000ff6:	2132      	movs	r1, #50	; 0x32
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f000 fc03 	bl	8001804 <setTimer>
				}
			}
			if (isButtonPressed(2) == 1){
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff f9da 	bl	80003b8 <isButtonPressed>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d107      	bne.n	800101a <fsm_manual_run+0x4be>
				GREEN_DURATION = tempDuration;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <fsm_manual_run+0x518>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <fsm_manual_run+0x51c>)
 8001010:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001012:	2120      	movs	r1, #32
 8001014:	481b      	ldr	r0, [pc, #108]	; (8001084 <fsm_manual_run+0x528>)
 8001016:	f001 f9e8 	bl	80023ea <HAL_GPIO_TogglePin>
			}
			if (isTimerOn(2) == 1){
 800101a:	2002      	movs	r0, #2
 800101c:	f000 fc56 	bl	80018cc <isTimerOn>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d122      	bne.n	800106c <fsm_manual_run+0x510>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102c:	4816      	ldr	r0, [pc, #88]	; (8001088 <fsm_manual_run+0x52c>)
 800102e:	f001 f9c4 	bl	80023ba <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin);
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <fsm_manual_run+0x52c>)
 8001038:	f001 f9d7 	bl	80023ea <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2101      	movs	r1, #1
 8001040:	4812      	ldr	r0, [pc, #72]	; (800108c <fsm_manual_run+0x530>)
 8001042:	f001 f9ba 	bl	80023ba <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin);
 8001046:	2110      	movs	r1, #16
 8001048:	480e      	ldr	r0, [pc, #56]	; (8001084 <fsm_manual_run+0x528>)
 800104a:	f001 f9ce 	bl	80023ea <HAL_GPIO_TogglePin>
				setTimer(2, 10);
 800104e:	210a      	movs	r1, #10
 8001050:	2002      	movs	r0, #2
 8001052:	f000 fbd7 	bl	8001804 <setTimer>
			}
			break;
 8001056:	e009      	b.n	800106c <fsm_manual_run+0x510>
		default:
			MODE=MODE_1;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <fsm_manual_run+0x54c>)
 800105a:	220b      	movs	r2, #11
 800105c:	601a      	str	r2, [r3, #0]
			break;
 800105e:	e006      	b.n	800106e <fsm_manual_run+0x512>
			break;
 8001060:	bf00      	nop
 8001062:	e004      	b.n	800106e <fsm_manual_run+0x512>
			break;
 8001064:	bf00      	nop
 8001066:	e002      	b.n	800106e <fsm_manual_run+0x512>
			break;
 8001068:	bf00      	nop
 800106a:	e000      	b.n	800106e <fsm_manual_run+0x512>
			break;
 800106c:	bf00      	nop
	}

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000cc 	.word	0x200000cc
 8001078:	2000002c 	.word	0x2000002c
 800107c:	51eb851f 	.word	0x51eb851f
 8001080:	20000028 	.word	0x20000028
 8001084:	40010800 	.word	0x40010800
 8001088:	40011000 	.word	0x40011000
 800108c:	40010c00 	.word	0x40010c00
 8001090:	20000018 	.word	0x20000018
 8001094:	20000024 	.word	0x20000024
 8001098:	20000030 	.word	0x20000030
 800109c:	20000034 	.word	0x20000034
 80010a0:	20000038 	.word	0x20000038
 80010a4:	2000003c 	.word	0x2000003c
 80010a8:	20000020 	.word	0x20000020

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f000 fdc6 	bl	8001c40 <HAL_Init>

  /* USER CODE BEGIN Init */
timerInnit();
 80010b4:	f000 fb9e 	bl	80017f4 <timerInnit>
buttonInnit();
 80010b8:	f7ff f976 	bl	80003a8 <buttonInnit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f816 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 f946 	bl	8001350 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010c4:	f000 f854 	bl	8001170 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c8:	f000 f8a0 	bl	800120c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80010cc:	f000 f916 	bl	80012fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <main+0x38>)
 80010d2:	f001 fe01 	bl	8002cd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <main+0x3c>)
 80010da:	f001 fea7 	bl	8002e2c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  fsm_manual_run();
 80010de:	f7ff fd3d 	bl	8000b5c <fsm_manual_run>
 80010e2:	e7fc      	b.n	80010de <main+0x32>
 80010e4:	20000238 	.word	0x20000238
 80010e8:	200001f0 	.word	0x200001f0

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	; 0x40
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fb50 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001122:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4618      	mov	r0, r3
 800112e:	f001 f975 	bl	800241c <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001138:	f000 f9b4 	bl	80014a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fbe0 	bl	800291c <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001162:	f000 f99f 	bl	80014a4 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3740      	adds	r7, #64	; 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0x98>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0x98>)
 8001196:	f240 227f 	movw	r2, #639	; 0x27f
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0x98>)
 80011a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_TIM2_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b8:	f001 fd3e 	bl	8002c38 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011c2:	f000 f96f 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0x98>)
 80011d4:	f002 f896 	bl	8003304 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011de:	f000 f961 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0x98>)
 80011f0:	f002 fc18 	bl	8003a24 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011fa:	f000 f953 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000238 	.word	0x20000238

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_TIM3_Init+0xe8>)
 800123e:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <MX_TIM3_Init+0xec>)
 8001240:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001244:	f240 227f 	movw	r2, #639	; 0x27f
 8001248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_TIM3_Init+0xe8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001252:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_TIM3_Init+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001264:	4823      	ldr	r0, [pc, #140]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001266:	f001 fce7 	bl	8002c38 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001270:	f000 f918 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	4619      	mov	r1, r3
 8001280:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001282:	f002 f83f 	bl	8003304 <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800128c:	f000 f90a 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001292:	f001 fd73 	bl	8002d7c <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800129c:	f000 f902 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_TIM3_Init+0xe8>)
 80012b0:	f002 fbb8 	bl	8003a24 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012ba:	f000 f8f3 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM3_Init+0xe8>)
 80012d6:	f001 ff53 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012e0:	f000 f8e0 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM3_Init+0xe8>)
 80012e6:	f000 f95d 	bl	80015a4 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3738      	adds	r7, #56	; 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	40000400 	.word	0x40000400

080012fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART3_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART3_UART_Init+0x4c>)
 8001334:	f002 fbe6 	bl	8003b04 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f8b1 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000108 	.word	0x20000108
 800134c:	40004800 	.word	0x40004800

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <MX_GPIO_Init+0x12c>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a44      	ldr	r2, [pc, #272]	; (800147c <MX_GPIO_Init+0x12c>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b42      	ldr	r3, [pc, #264]	; (800147c <MX_GPIO_Init+0x12c>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <MX_GPIO_Init+0x12c>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a3e      	ldr	r2, [pc, #248]	; (800147c <MX_GPIO_Init+0x12c>)
 8001382:	f043 0320 	orr.w	r3, r3, #32
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <MX_GPIO_Init+0x12c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <MX_GPIO_Init+0x12c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a38      	ldr	r2, [pc, #224]	; (800147c <MX_GPIO_Init+0x12c>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <MX_GPIO_Init+0x12c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <MX_GPIO_Init+0x12c>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a32      	ldr	r2, [pc, #200]	; (800147c <MX_GPIO_Init+0x12c>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <MX_GPIO_Init+0x12c>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRAFFIC_LIGHT_2_1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2130      	movs	r1, #48	; 0x30
 80013c8:	482d      	ldr	r0, [pc, #180]	; (8001480 <MX_GPIO_Init+0x130>)
 80013ca:	f000 fff6 	bl	80023ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRAFFIC_LIGHT_2_0_Pin|WALKER_LIGHT_1_Pin|WALKER_LIGHT_0_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f240 3101 	movw	r1, #769	; 0x301
 80013d4:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_GPIO_Init+0x134>)
 80013d6:	f000 fff0 	bl	80023ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRAFFIC_LIGHT_1_0_Pin|TRAFFIC_LIGHT_1_1_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80013e0:	4829      	ldr	r0, [pc, #164]	; (8001488 <MX_GPIO_Init+0x138>)
 80013e2:	f000 ffea 	bl	80023ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WALKER_BUTTON_Pin */
  GPIO_InitStruct.Pin = WALKER_BUTTON_Pin;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WALKER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	4823      	ldr	r0, [pc, #140]	; (8001488 <MX_GPIO_Init+0x138>)
 80013fc:	f000 fe42 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_1_Pin;
 8001400:	f240 2306 	movw	r3, #518	; 0x206
 8001404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	481a      	ldr	r0, [pc, #104]	; (8001480 <MX_GPIO_Init+0x130>)
 8001416:	f000 fe35 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_2_1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_2_1_Pin|LED2_Pin;
 800141a:	2330      	movs	r3, #48	; 0x30
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2302      	movs	r3, #2
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_GPIO_Init+0x130>)
 8001432:	f000 fe27 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_2_0_Pin WALKER_LIGHT_1_Pin WALKER_LIGHT_0_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_2_0_Pin|WALKER_LIGHT_1_Pin|WALKER_LIGHT_0_Pin;
 8001436:	f240 3301 	movw	r3, #769	; 0x301
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_GPIO_Init+0x134>)
 8001450:	f000 fe18 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC_LIGHT_1_0_Pin TRAFFIC_LIGHT_1_1_Pin */
  GPIO_InitStruct.Pin = TRAFFIC_LIGHT_1_0_Pin|TRAFFIC_LIGHT_1_1_Pin;
 8001454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_GPIO_Init+0x138>)
 800146e:	f000 fe09 	bl	8002084 <HAL_GPIO_Init>

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800
 8001484:	40010c00 	.word	0x40010c00
 8001488:	40011000 	.word	0x40011000

0800148c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	  timerRun();
 8001494:	f000 fa12 	bl	80018bc <timerRun>
	  getKeyInput();
 8001498:	f7ff fa0c 	bl	80008b4 <getKeyInput>

}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <buzzer>:
 */
#include "pedestrian.h"



void buzzer(unsigned int freq){
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, freq);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <buzzer+0x1c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200001f0 	.word	0x200001f0

080014d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_MspInit+0x5c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_MspInit+0x5c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_MspInit+0x60>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_MspInit+0x60>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d114      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_TIM_Base_MspInit+0x68>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	201c      	movs	r0, #28
 8001564:	f000 fca5 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001568:	201c      	movs	r0, #28
 800156a:	f000 fcbe 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800156e:	e010      	b.n	8001592 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10b      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_TIM_Base_MspInit+0x68>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	40000400 	.word	0x40000400

080015a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_TIM_MspPostInit+0x58>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d117      	bne.n	80015f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_TIM_MspPostInit+0x5c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_TIM_MspPostInit+0x5c>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_TIM_MspPostInit+0x5c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_TIM_MspPostInit+0x60>)
 80015f0:	f000 fd48 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000400 	.word	0x40000400
 8001600:	40021000 	.word	0x40021000
 8001604:	40010800 	.word	0x40010800

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_UART_MspInit+0x9c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d139      	bne.n	800169c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 800162e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001632:	61d3      	str	r3, [r2, #28]
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <HAL_UART_MspInit+0xa4>)
 800166e:	f000 fd09 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_UART_MspInit+0xa4>)
 8001688:	f000 fcfc 	bl	8002084 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2027      	movs	r0, #39	; 0x27
 8001692:	f000 fc0e 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001696:	2027      	movs	r0, #39	; 0x27
 8001698:	f000 fc27 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40004800 	.word	0x40004800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010c00 	.word	0x40010c00

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 fae9 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM2_IRQHandler+0x10>)
 8001706:	f001 fc33 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000238 	.word	0x20000238

08001714 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <USART3_IRQHandler+0x10>)
 800171a:	f002 fac7 	bl	8003cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000108 	.word	0x20000108

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f002 fff8 	bl	800474c <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20005000 	.word	0x20005000
 8001788:	00000400 	.word	0x00000400
 800178c:	200000d4 	.word	0x200000d4
 8001790:	200002f0 	.word	0x200002f0

08001794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <Innitial_Timer>:

//Timer 0: lane 1
//Timer 2: lane 2
//Timer 3: mode changing

void Innitial_Timer(int i){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	if(i == 0){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10b      	bne.n	80017c6 <Innitial_Timer+0x26>
		timer[i].count =0;
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <Innitial_Timer+0x50>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2100      	movs	r1, #0
 80017b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[i].flag =1;
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <Innitial_Timer+0x50>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	2201      	movs	r2, #1
 80017c2:	605a      	str	r2, [r3, #4]
	else{
		timer[i].count =0;
		timer[i].flag =1;
		Innitial_Timer(i-1);
	}
}
 80017c4:	e00f      	b.n	80017e6 <Innitial_Timer+0x46>
		timer[i].count =0;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <Innitial_Timer+0x50>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2100      	movs	r1, #0
 80017cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[i].flag =1;
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <Innitial_Timer+0x50>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	2201      	movs	r2, #1
 80017da:	605a      	str	r2, [r3, #4]
		Innitial_Timer(i-1);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffdd 	bl	80017a0 <Innitial_Timer>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000e0 	.word	0x200000e0

080017f4 <timerInnit>:

void timerInnit(void){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	Innitial_Timer(NUMBER_OF_TIMER-1);
 80017f8:	2004      	movs	r0, #4
 80017fa:	f7ff ffd1 	bl	80017a0 <Innitial_Timer>
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <setTimer>:

void setTimer( unsigned int index, unsigned int count){
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	if(index >= NUMBER_OF_TIMER){
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d80b      	bhi.n	800182c <setTimer+0x28>
		return;
	}
	timer[index].count=count;
 8001814:	4908      	ldr	r1, [pc, #32]	; (8001838 <setTimer+0x34>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[index].flag=0;
 800181e:	4a06      	ldr	r2, [pc, #24]	; (8001838 <setTimer+0x34>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	e000      	b.n	800182e <setTimer+0x2a>
		return;
 800182c:	bf00      	nop
}
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200000e0 	.word	0x200000e0

0800183c <RunTimer>:
void RunTimer(int index){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if(index ==0){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <RunTimer+0x3c>
		if(timer[index].count ==0){
 800184a:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <RunTimer+0x7c>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <RunTimer+0x28>
			timer[index].flag=1;
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <RunTimer+0x7c>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	2201      	movs	r2, #1
 8001860:	605a      	str	r2, [r3, #4]
		} else {
			timer[index].count--;
		}
		RunTimer(index-1);
	}
}
 8001862:	e024      	b.n	80018ae <RunTimer+0x72>
			timer[index].count--;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <RunTimer+0x7c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	4912      	ldr	r1, [pc, #72]	; (80018b8 <RunTimer+0x7c>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8001876:	e01a      	b.n	80018ae <RunTimer+0x72>
		if (timer[index].count == 0) {
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <RunTimer+0x7c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <RunTimer+0x56>
			timer[index].flag = 1;
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <RunTimer+0x7c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	2201      	movs	r2, #1
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	e008      	b.n	80018a4 <RunTimer+0x68>
			timer[index].count--;
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <RunTimer+0x7c>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <RunTimer+0x7c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		RunTimer(index-1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffc7 	bl	800183c <RunTimer>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000e0 	.word	0x200000e0

080018bc <timerRun>:

void timerRun(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	RunTimer(NUMBER_OF_TIMER-1);
 80018c0:	2004      	movs	r0, #4
 80018c2:	f7ff ffbb 	bl	800183c <RunTimer>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <isTimerOn>:

int isTimerOn(unsigned index){
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	return timer[index].flag == 1;
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <isTimerOn+0x28>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200000e0 	.word	0x200000e0

080018f8 <setTrafficLightDefault>:


// Red mean light 0 off, light 1 off
// Green mean light 0 off, light 1 on
// Amber mean light 0 on, light 1 on
void setTrafficLightDefault(int lane){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	switch(lane){
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d02d      	beq.n	8001962 <setTrafficLightDefault+0x6a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b02      	cmp	r3, #2
 800190a:	dc37      	bgt.n	800197c <setTrafficLightDefault+0x84>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <setTrafficLightDefault+0x22>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d019      	beq.n	800194c <setTrafficLightDefault+0x54>
	case 2:
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		break;
	default:
		break;
 8001918:	e030      	b.n	800197c <setTrafficLightDefault+0x84>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin, RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <setTrafficLightDefault+0x90>)
 8001922:	f000 fd4a 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin, RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192c:	4816      	ldr	r0, [pc, #88]	; (8001988 <setTrafficLightDefault+0x90>)
 800192e:	f000 fd44 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001938:	4814      	ldr	r0, [pc, #80]	; (800198c <setTrafficLightDefault+0x94>)
 800193a:	f000 fd3e 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <setTrafficLightDefault+0x94>)
 8001946:	f000 fd38 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 800194a:	e018      	b.n	800197e <setTrafficLightDefault+0x86>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin, RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	2101      	movs	r1, #1
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <setTrafficLightDefault+0x94>)
 8001952:	f000 fd32 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin, RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2110      	movs	r1, #16
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <setTrafficLightDefault+0x98>)
 800195c:	f000 fd2d 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 8001960:	e00d      	b.n	800197e <setTrafficLightDefault+0x86>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <setTrafficLightDefault+0x94>)
 800196a:	f000 fd26 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <setTrafficLightDefault+0x94>)
 8001976:	f000 fd20 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 800197a:	e000      	b.n	800197e <setTrafficLightDefault+0x86>
		break;
 800197c:	bf00      	nop
	}

}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40011000 	.word	0x40011000
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40010800 	.word	0x40010800

08001994 <setGreen>:

void setGreen(int lane){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	switch (lane) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d021      	beq.n	80019e6 <setGreen+0x52>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	dc2b      	bgt.n	8001a00 <setGreen+0x6c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <setGreen+0x22>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d00d      	beq.n	80019d0 <setGreen+0x3c>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, SET);
		break;
	default:

		break;
 80019b4:	e024      	b.n	8001a00 <setGreen+0x6c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <setGreen+0x78>)
 80019be:	f000 fcfc 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <setGreen+0x78>)
 80019ca:	f000 fcf6 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 80019ce:	e018      	b.n	8001a02 <setGreen+0x6e>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	480e      	ldr	r0, [pc, #56]	; (8001a10 <setGreen+0x7c>)
 80019d6:	f000 fcf0 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 80019da:	2201      	movs	r2, #1
 80019dc:	2110      	movs	r1, #16
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <setGreen+0x80>)
 80019e0:	f000 fceb 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 80019e4:	e00d      	b.n	8001a02 <setGreen+0x6e>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ec:	4808      	ldr	r0, [pc, #32]	; (8001a10 <setGreen+0x7c>)
 80019ee:	f000 fce4 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <setGreen+0x7c>)
 80019fa:	f000 fcde 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 80019fe:	e000      	b.n	8001a02 <setGreen+0x6e>
		break;
 8001a00:	bf00      	nop

	}
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40010c00 	.word	0x40010c00
 8001a14:	40010800 	.word	0x40010800

08001a18 <setRed>:

void setRed(int lane){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d021      	beq.n	8001a6a <setRed+0x52>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	dc2b      	bgt.n	8001a84 <setRed+0x6c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <setRed+0x22>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00d      	beq.n	8001a54 <setRed+0x3c>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, SET);
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
		break;
	default:

		break;
 8001a38:	e024      	b.n	8001a84 <setRed+0x6c>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <setRed+0x78>)
 8001a42:	f000 fcba 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a4c:	4810      	ldr	r0, [pc, #64]	; (8001a90 <setRed+0x78>)
 8001a4e:	f000 fcb4 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 8001a52:	e018      	b.n	8001a86 <setRed+0x6e>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001a54:	2201      	movs	r2, #1
 8001a56:	2101      	movs	r1, #1
 8001a58:	480e      	ldr	r0, [pc, #56]	; (8001a94 <setRed+0x7c>)
 8001a5a:	f000 fcae 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2110      	movs	r1, #16
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <setRed+0x80>)
 8001a64:	f000 fca9 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 8001a68:	e00d      	b.n	8001a86 <setRed+0x6e>
		HAL_GPIO_WritePin(WALKER_LIGHT_0_GPIO_Port, WALKER_LIGHT_0_Pin, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a70:	4808      	ldr	r0, [pc, #32]	; (8001a94 <setRed+0x7c>)
 8001a72:	f000 fca2 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WALKER_LIGHT_1_GPIO_Port, WALKER_LIGHT_1_Pin, RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <setRed+0x7c>)
 8001a7e:	f000 fc9c 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 8001a82:	e000      	b.n	8001a86 <setRed+0x6e>
		break;
 8001a84:	bf00      	nop

	}
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	40010800 	.word	0x40010800

08001a9c <setAmber>:

void setAmber(int lane){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	switch (lane) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <setAmber+0x16>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d00d      	beq.n	8001acc <setAmber+0x30>
				SET);
		break;

	default:

		break;
 8001ab0:	e017      	b.n	8001ae2 <setAmber+0x46>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_0_GPIO_Port, TRAFFIC_LIGHT_1_0_Pin,
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <setAmber+0x50>)
 8001aba:	f000 fc7e 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_1_1_GPIO_Port, TRAFFIC_LIGHT_1_1_Pin,
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <setAmber+0x50>)
 8001ac6:	f000 fc78 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 8001aca:	e00a      	b.n	8001ae2 <setAmber+0x46>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_0_GPIO_Port, TRAFFIC_LIGHT_2_0_Pin,
 8001acc:	2201      	movs	r2, #1
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4807      	ldr	r0, [pc, #28]	; (8001af0 <setAmber+0x54>)
 8001ad2:	f000 fc72 	bl	80023ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_LIGHT_2_1_GPIO_Port, TRAFFIC_LIGHT_2_1_Pin,
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2110      	movs	r1, #16
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <setAmber+0x58>)
 8001adc:	f000 fc6d 	bl	80023ba <HAL_GPIO_WritePin>
		break;
 8001ae0:	bf00      	nop

	}
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40010800 	.word	0x40010800

08001af8 <Display>:
 *  Created on: Dec 8, 2023
 *      Author: MY PC
 */
#include "transfer.h"

void Display(int n1, int n2){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]


	int i=0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
	if( n1 < 10) i+=1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	dc02      	bgt.n	8001b12 <Display+0x1a>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
	if( n2 < 10) i+=2;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	dc02      	bgt.n	8001b1e <Display+0x26>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d847      	bhi.n	8001bb4 <Display+0xbc>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <Display+0x34>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b5b 	.word	0x08001b5b
 8001b34:	08001b79 	.word	0x08001b79
 8001b38:	08001b97 	.word	0x08001b97
	switch(i){
	case 0:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:%d %d# \r", n1, n2), 1000);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4926      	ldr	r1, [pc, #152]	; (8001bdc <Display+0xe4>)
 8001b42:	4827      	ldr	r0, [pc, #156]	; (8001be0 <Display+0xe8>)
 8001b44:	f002 fe34 	bl	80047b0 <siprintf>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b50:	4923      	ldr	r1, [pc, #140]	; (8001be0 <Display+0xe8>)
 8001b52:	4824      	ldr	r0, [pc, #144]	; (8001be4 <Display+0xec>)
 8001b54:	f002 f826 	bl	8003ba4 <HAL_UART_Transmit>
		break;
 8001b58:	e03b      	b.n	8001bd2 <Display+0xda>
	case 1:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:0%d %d# \r", n1, n2), 1000);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4922      	ldr	r1, [pc, #136]	; (8001be8 <Display+0xf0>)
 8001b60:	481f      	ldr	r0, [pc, #124]	; (8001be0 <Display+0xe8>)
 8001b62:	f002 fe25 	bl	80047b0 <siprintf>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	491c      	ldr	r1, [pc, #112]	; (8001be0 <Display+0xe8>)
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <Display+0xec>)
 8001b72:	f002 f817 	bl	8003ba4 <HAL_UART_Transmit>
		break;
 8001b76:	e02c      	b.n	8001bd2 <Display+0xda>
	case 2:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:%d 0%d# \r", n1, n2), 1000);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	491b      	ldr	r1, [pc, #108]	; (8001bec <Display+0xf4>)
 8001b7e:	4818      	ldr	r0, [pc, #96]	; (8001be0 <Display+0xe8>)
 8001b80:	f002 fe16 	bl	80047b0 <siprintf>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	4914      	ldr	r1, [pc, #80]	; (8001be0 <Display+0xe8>)
 8001b8e:	4815      	ldr	r0, [pc, #84]	; (8001be4 <Display+0xec>)
 8001b90:	f002 f808 	bl	8003ba4 <HAL_UART_Transmit>
		break;
 8001b94:	e01d      	b.n	8001bd2 <Display+0xda>
	case 3:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:0%d 0%d# \r", n1, n2), 1000);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4915      	ldr	r1, [pc, #84]	; (8001bf0 <Display+0xf8>)
 8001b9c:	4810      	ldr	r0, [pc, #64]	; (8001be0 <Display+0xe8>)
 8001b9e:	f002 fe07 	bl	80047b0 <siprintf>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <Display+0xe8>)
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <Display+0xec>)
 8001bae:	f001 fff9 	bl	8003ba4 <HAL_UART_Transmit>
		break;
 8001bb2:	e00e      	b.n	8001bd2 <Display+0xda>
	default:
		HAL_UART_Transmit(&huart3, ( void *) info, sprintf(info, "!7SEG:%d %d# \r", n1, n2), 1000);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4908      	ldr	r1, [pc, #32]	; (8001bdc <Display+0xe4>)
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <Display+0xe8>)
 8001bbc:	f002 fdf8 	bl	80047b0 <siprintf>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc8:	4905      	ldr	r1, [pc, #20]	; (8001be0 <Display+0xe8>)
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <Display+0xec>)
 8001bcc:	f001 ffea 	bl	8003ba4 <HAL_UART_Transmit>
		break;
 8001bd0:	bf00      	nop
	}


}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0800503c 	.word	0x0800503c
 8001be0:	200002c8 	.word	0x200002c8
 8001be4:	20000108 	.word	0x20000108
 8001be8:	0800504c 	.word	0x0800504c
 8001bec:	0800505c 	.word	0x0800505c
 8001bf0:	0800506c 	.word	0x0800506c

08001bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff fdce 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bfa:	490c      	ldr	r1, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c10:	4c09      	ldr	r4, [pc, #36]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f002 fd9b 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c22:	f7ff fa43 	bl	80010ac <main>
  bx lr
 8001c26:	4770      	bx	lr
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001c30:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8001c34:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001c38:	200002ec 	.word	0x200002ec

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x28>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f923 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f808 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff fc38 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x54>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x58>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f93b 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d80a      	bhi.n	8001cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 f903 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <HAL_InitTick+0x5c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000040 	.word	0x20000040
 8001cc4:	20000048 	.word	0x20000048
 8001cc8:	20000044 	.word	0x20000044

08001ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_IncTick+0x1c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_IncTick+0x20>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000048 	.word	0x20000048
 8001cec:	200002d8 	.word	0x200002d8

08001cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_GetTick+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	200002d8 	.word	0x200002d8

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4906      	ldr	r1, [pc, #24]	; (8001d9c <__NVIC_EnableIRQ+0x34>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff90 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff2d 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff42 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff35 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d008      	beq.n	8001f48 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e020      	b.n	8001f8a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 020e 	bic.w	r2, r2, #14
 8001f56:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d005      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e051      	b.n	800205c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 020e 	bic.w	r2, r2, #14
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	; (8002068 <HAL_DMA_Abort_IT+0xd4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d029      	beq.n	8002036 <HAL_DMA_Abort_IT+0xa2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a21      	ldr	r2, [pc, #132]	; (800206c <HAL_DMA_Abort_IT+0xd8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <HAL_DMA_Abort_IT+0x9e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_DMA_Abort_IT+0xdc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01a      	beq.n	800202c <HAL_DMA_Abort_IT+0x98>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_DMA_Abort_IT+0xe0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d012      	beq.n	8002026 <HAL_DMA_Abort_IT+0x92>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_DMA_Abort_IT+0xe4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00a      	beq.n	8002020 <HAL_DMA_Abort_IT+0x8c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_DMA_Abort_IT+0xe8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d102      	bne.n	800201a <HAL_DMA_Abort_IT+0x86>
 8002014:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002018:	e00e      	b.n	8002038 <HAL_DMA_Abort_IT+0xa4>
 800201a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201e:	e00b      	b.n	8002038 <HAL_DMA_Abort_IT+0xa4>
 8002020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002024:	e008      	b.n	8002038 <HAL_DMA_Abort_IT+0xa4>
 8002026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202a:	e005      	b.n	8002038 <HAL_DMA_Abort_IT+0xa4>
 800202c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002030:	e002      	b.n	8002038 <HAL_DMA_Abort_IT+0xa4>
 8002032:	2310      	movs	r3, #16
 8002034:	e000      	b.n	8002038 <HAL_DMA_Abort_IT+0xa4>
 8002036:	2301      	movs	r3, #1
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_DMA_Abort_IT+0xec>)
 800203a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
    } 
  }
  return status;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40020008 	.word	0x40020008
 800206c:	4002001c 	.word	0x4002001c
 8002070:	40020030 	.word	0x40020030
 8002074:	40020044 	.word	0x40020044
 8002078:	40020058 	.word	0x40020058
 800207c:	4002006c 	.word	0x4002006c
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002096:	e169      	b.n	800236c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002098:	2201      	movs	r2, #1
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f040 8158 	bne.w	8002366 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a9a      	ldr	r2, [pc, #616]	; (8002324 <HAL_GPIO_Init+0x2a0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d05e      	beq.n	800217e <HAL_GPIO_Init+0xfa>
 80020c0:	4a98      	ldr	r2, [pc, #608]	; (8002324 <HAL_GPIO_Init+0x2a0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d875      	bhi.n	80021b2 <HAL_GPIO_Init+0x12e>
 80020c6:	4a98      	ldr	r2, [pc, #608]	; (8002328 <HAL_GPIO_Init+0x2a4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d058      	beq.n	800217e <HAL_GPIO_Init+0xfa>
 80020cc:	4a96      	ldr	r2, [pc, #600]	; (8002328 <HAL_GPIO_Init+0x2a4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d86f      	bhi.n	80021b2 <HAL_GPIO_Init+0x12e>
 80020d2:	4a96      	ldr	r2, [pc, #600]	; (800232c <HAL_GPIO_Init+0x2a8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d052      	beq.n	800217e <HAL_GPIO_Init+0xfa>
 80020d8:	4a94      	ldr	r2, [pc, #592]	; (800232c <HAL_GPIO_Init+0x2a8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d869      	bhi.n	80021b2 <HAL_GPIO_Init+0x12e>
 80020de:	4a94      	ldr	r2, [pc, #592]	; (8002330 <HAL_GPIO_Init+0x2ac>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d04c      	beq.n	800217e <HAL_GPIO_Init+0xfa>
 80020e4:	4a92      	ldr	r2, [pc, #584]	; (8002330 <HAL_GPIO_Init+0x2ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d863      	bhi.n	80021b2 <HAL_GPIO_Init+0x12e>
 80020ea:	4a92      	ldr	r2, [pc, #584]	; (8002334 <HAL_GPIO_Init+0x2b0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d046      	beq.n	800217e <HAL_GPIO_Init+0xfa>
 80020f0:	4a90      	ldr	r2, [pc, #576]	; (8002334 <HAL_GPIO_Init+0x2b0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d85d      	bhi.n	80021b2 <HAL_GPIO_Init+0x12e>
 80020f6:	2b12      	cmp	r3, #18
 80020f8:	d82a      	bhi.n	8002150 <HAL_GPIO_Init+0xcc>
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d859      	bhi.n	80021b2 <HAL_GPIO_Init+0x12e>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <HAL_GPIO_Init+0x80>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	0800217f 	.word	0x0800217f
 8002108:	08002159 	.word	0x08002159
 800210c:	0800216b 	.word	0x0800216b
 8002110:	080021ad 	.word	0x080021ad
 8002114:	080021b3 	.word	0x080021b3
 8002118:	080021b3 	.word	0x080021b3
 800211c:	080021b3 	.word	0x080021b3
 8002120:	080021b3 	.word	0x080021b3
 8002124:	080021b3 	.word	0x080021b3
 8002128:	080021b3 	.word	0x080021b3
 800212c:	080021b3 	.word	0x080021b3
 8002130:	080021b3 	.word	0x080021b3
 8002134:	080021b3 	.word	0x080021b3
 8002138:	080021b3 	.word	0x080021b3
 800213c:	080021b3 	.word	0x080021b3
 8002140:	080021b3 	.word	0x080021b3
 8002144:	080021b3 	.word	0x080021b3
 8002148:	08002161 	.word	0x08002161
 800214c:	08002175 	.word	0x08002175
 8002150:	4a79      	ldr	r2, [pc, #484]	; (8002338 <HAL_GPIO_Init+0x2b4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002156:	e02c      	b.n	80021b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e029      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	3304      	adds	r3, #4
 8002166:	623b      	str	r3, [r7, #32]
          break;
 8002168:	e024      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	3308      	adds	r3, #8
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e01f      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	330c      	adds	r3, #12
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e01a      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002186:	2304      	movs	r3, #4
 8002188:	623b      	str	r3, [r7, #32]
          break;
 800218a:	e013      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002194:	2308      	movs	r3, #8
 8002196:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	611a      	str	r2, [r3, #16]
          break;
 800219e:	e009      	b.n	80021b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a0:	2308      	movs	r3, #8
 80021a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	615a      	str	r2, [r3, #20]
          break;
 80021aa:	e003      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x130>
          break;
 80021b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2bff      	cmp	r3, #255	; 0xff
 80021b8:	d801      	bhi.n	80021be <HAL_GPIO_Init+0x13a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	e001      	b.n	80021c2 <HAL_GPIO_Init+0x13e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2bff      	cmp	r3, #255	; 0xff
 80021c8:	d802      	bhi.n	80021d0 <HAL_GPIO_Init+0x14c>
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	e002      	b.n	80021d6 <HAL_GPIO_Init+0x152>
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3b08      	subs	r3, #8
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	210f      	movs	r1, #15
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	6a39      	ldr	r1, [r7, #32]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	431a      	orrs	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80b1 	beq.w	8002366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002204:	4b4d      	ldr	r3, [pc, #308]	; (800233c <HAL_GPIO_Init+0x2b8>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_GPIO_Init+0x2b8>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b4a      	ldr	r3, [pc, #296]	; (800233c <HAL_GPIO_Init+0x2b8>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800221c:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_GPIO_Init+0x2bc>)
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a40      	ldr	r2, [pc, #256]	; (8002344 <HAL_GPIO_Init+0x2c0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <HAL_GPIO_Init+0x1ec>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00d      	beq.n	800226c <HAL_GPIO_Init+0x1e8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3e      	ldr	r2, [pc, #248]	; (800234c <HAL_GPIO_Init+0x2c8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_GPIO_Init+0x1e4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3d      	ldr	r2, [pc, #244]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_GPIO_Init+0x1e0>
 8002260:	2303      	movs	r3, #3
 8002262:	e006      	b.n	8002272 <HAL_GPIO_Init+0x1ee>
 8002264:	2304      	movs	r3, #4
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x1ee>
 8002268:	2302      	movs	r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x1ee>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x1ee>
 8002270:	2300      	movs	r3, #0
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002282:	492f      	ldr	r1, [pc, #188]	; (8002340 <HAL_GPIO_Init+0x2bc>)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	492c      	ldr	r1, [pc, #176]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4928      	ldr	r1, [pc, #160]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4922      	ldr	r1, [pc, #136]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	491e      	ldr	r1, [pc, #120]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4918      	ldr	r1, [pc, #96]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	4914      	ldr	r1, [pc, #80]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 8002304:	4013      	ands	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d021      	beq.n	8002358 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	490e      	ldr	r1, [pc, #56]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e021      	b.n	8002366 <HAL_GPIO_Init+0x2e2>
 8002322:	bf00      	nop
 8002324:	10320000 	.word	0x10320000
 8002328:	10310000 	.word	0x10310000
 800232c:	10220000 	.word	0x10220000
 8002330:	10210000 	.word	0x10210000
 8002334:	10120000 	.word	0x10120000
 8002338:	10110000 	.word	0x10110000
 800233c:	40021000 	.word	0x40021000
 8002340:	40010000 	.word	0x40010000
 8002344:	40010800 	.word	0x40010800
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40011000 	.word	0x40011000
 8002350:	40011400 	.word	0x40011400
 8002354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_GPIO_Init+0x304>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	43db      	mvns	r3, r3
 8002360:	4909      	ldr	r1, [pc, #36]	; (8002388 <HAL_GPIO_Init+0x304>)
 8002362:	4013      	ands	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3301      	adds	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	f47f ae8e 	bne.w	8002098 <HAL_GPIO_Init+0x14>
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	372c      	adds	r7, #44	; 0x2c
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40010400 	.word	0x40010400

0800238c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]
 80023c6:	4613      	mov	r3, r2
 80023c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ca:	787b      	ldrb	r3, [r7, #1]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023d8:	887b      	ldrh	r3, [r7, #2]
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	611a      	str	r2, [r3, #16]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023fc:	887a      	ldrh	r2, [r7, #2]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	041a      	lsls	r2, r3, #16
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43d9      	mvns	r1, r3
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	400b      	ands	r3, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e26c      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8087 	beq.w	800254a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b92      	ldr	r3, [pc, #584]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b04      	cmp	r3, #4
 8002446:	d00c      	beq.n	8002462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002448:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d112      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
 8002454:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06c      	beq.n	8002548 <HAL_RCC_OscConfig+0x12c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d168      	bne.n	8002548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e246      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x76>
 8002484:	4b80      	ldr	r3, [pc, #512]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7f      	ldr	r2, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7a      	ldr	r2, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b78      	ldr	r3, [pc, #480]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a77      	ldr	r2, [pc, #476]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0xbc>
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a71      	ldr	r2, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fbfa 	bl	8001cf0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fbf6 	bl	8001cf0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1fa      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xe4>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fbe6 	bl	8001cf0 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fbe2 	bl	8001cf0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1e6      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x10c>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1ba      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4939      	ldr	r1, [pc, #228]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_RCC_OscConfig+0x270>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fb9b 	bl	8001cf0 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fb97 	bl	8001cf0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e19b      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4927      	ldr	r1, [pc, #156]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x270>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fb7a 	bl	8001cf0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7ff fb76 	bl	8001cf0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e17a      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_RCC_OscConfig+0x274>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7ff fb5a 	bl	8001cf0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff fb56 	bl	8001cf0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e15a      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f000 facc 	bl	8002bfc <RCC_Delay>
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_OscConfig+0x274>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7ff fb40 	bl	8001cf0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002672:	e00f      	b.n	8002694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7ff fb3c 	bl	8001cf0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d908      	bls.n	8002694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e140      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	42420000 	.word	0x42420000
 8002690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e9      	bne.n	8002674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a6 	beq.w	80027fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b97      	ldr	r3, [pc, #604]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b94      	ldr	r3, [pc, #592]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a93      	ldr	r2, [pc, #588]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a8a      	ldr	r2, [pc, #552]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7ff fafd 	bl	8001cf0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7ff faf9 	bl	8001cf0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	; 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0fd      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x312>
 8002720:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a7a      	ldr	r2, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e02d      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a72      	ldr	r2, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	e01c      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d10c      	bne.n	8002772 <HAL_RCC_OscConfig+0x356>
 8002758:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e00b      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a63      	ldr	r2, [pc, #396]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d015      	beq.n	80027be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7ff faad 	bl	8001cf0 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff faa9 	bl	8001cf0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0ab      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ee      	beq.n	800279a <HAL_RCC_OscConfig+0x37e>
 80027bc:	e014      	b.n	80027e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff fa97 	bl	8001cf0 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7ff fa93 	bl	8001cf0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e095      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ee      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8081 	beq.w	8002906 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d061      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d146      	bne.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7ff fa67 	bl	8001cf0 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7ff fa63 	bl	8001cf0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e067      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	492d      	ldr	r1, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a19      	ldr	r1, [r3, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	430b      	orrs	r3, r1
 8002872:	4927      	ldr	r1, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff fa37 	bl	8001cf0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff fa33 	bl	8001cf0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e037      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x46a>
 80028a4:	e02f      	b.n	8002906 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_RCC_OscConfig+0x4fc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7ff fa20 	bl	8001cf0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff fa1c 	bl	8001cf0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e020      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x498>
 80028d2:	e018      	b.n	8002906 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e013      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
 8002918:	42420060 	.word	0x42420060

0800291c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0d0      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4965      	ldr	r1, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800299a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d040      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e073      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06b      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4936      	ldr	r1, [pc, #216]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7ff f970 	bl	8001cf0 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7ff f96c 	bl	8001cf0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e053      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1eb      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d210      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f8ce 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08005080 	.word	0x08005080
 8002ae8:	20000040 	.word	0x20000040
 8002aec:	20000044 	.word	0x20000044

08002af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x30>
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x36>
 8002b1e:	e027      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b22:	613b      	str	r3, [r7, #16]
      break;
 8002b24:	e027      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0c9b      	lsrs	r3, r3, #18
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b30:	5cd3      	ldrb	r3, [r2, r3]
 8002b32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0c5b      	lsrs	r3, r3, #17
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0d      	ldr	r2, [pc, #52]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b52:	fb02 f203 	mul.w	r2, r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e004      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b72:	613b      	str	r3, [r7, #16]
      break;
 8002b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b76:	693b      	ldr	r3, [r7, #16]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	007a1200 	.word	0x007a1200
 8002b8c:	08005098 	.word	0x08005098
 8002b90:	080050a8 	.word	0x080050a8
 8002b94:	003d0900 	.word	0x003d0900

08002b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000040 	.word	0x20000040

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb0:	f7ff fff2 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08005090 	.word	0x08005090

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0adb      	lsrs	r3, r3, #11
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08005090 	.word	0x08005090

08002bfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <RCC_Delay+0x34>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <RCC_Delay+0x38>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c18:	bf00      	nop
  }
  while (Delay --);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f9      	bne.n	8002c18 <RCC_Delay+0x1c>
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000040 	.word	0x20000040
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e041      	b.n	8002cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fc68 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f000 fc30 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e03a      	b.n	8002d66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_TIM_Base_Start_IT+0x98>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x58>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d009      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x58>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x58>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d010      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d52:	e007      	b.n	8002d64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800

08002d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e041      	b.n	8002e12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f839 	bl	8002e1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 fb8e 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_PWM_Start+0x24>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e022      	b.n	8002e96 <HAL_TIM_PWM_Start+0x6a>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d109      	bne.n	8002e6a <HAL_TIM_PWM_Start+0x3e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e015      	b.n	8002e96 <HAL_TIM_PWM_Start+0x6a>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d109      	bne.n	8002e84 <HAL_TIM_PWM_Start+0x58>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e008      	b.n	8002e96 <HAL_TIM_PWM_Start+0x6a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e05e      	b.n	8002f5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_PWM_Start+0x82>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	e013      	b.n	8002ed6 <HAL_TIM_PWM_Start+0xaa>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x92>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_PWM_Start+0xaa>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_PWM_Start+0xa2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ecc:	e003      	b.n	8002ed6 <HAL_TIM_PWM_Start+0xaa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fd7c 	bl	80039dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_TIM_PWM_Start+0x138>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d107      	bne.n	8002efe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <HAL_TIM_PWM_Start+0x138>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_TIM_PWM_Start+0xfa>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d009      	beq.n	8002f26 <HAL_TIM_PWM_Start+0xfa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_TIM_PWM_Start+0x13c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIM_PWM_Start+0xfa>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_TIM_PWM_Start+0x140>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d111      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b06      	cmp	r3, #6
 8002f36:	d010      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	e007      	b.n	8002f5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa76 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa69 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fa78 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa4c 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fa3f 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa4e 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0208 	mvn.w	r2, #8
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa22 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa15 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fa24 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9f8 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9eb 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f9fa 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f9cc 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fce9 	bl	8003af2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9be 	bl	80034c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0220 	mvn.w	r2, #32
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fcb4 	bl	8003ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ae      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	f200 809f 	bhi.w	80032ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080032ed 	.word	0x080032ed
 80031bc:	080032ed 	.word	0x080032ed
 80031c0:	080032ed 	.word	0x080032ed
 80031c4:	08003229 	.word	0x08003229
 80031c8:	080032ed 	.word	0x080032ed
 80031cc:	080032ed 	.word	0x080032ed
 80031d0:	080032ed 	.word	0x080032ed
 80031d4:	0800326b 	.word	0x0800326b
 80031d8:	080032ed 	.word	0x080032ed
 80031dc:	080032ed 	.word	0x080032ed
 80031e0:	080032ed 	.word	0x080032ed
 80031e4:	080032ab 	.word	0x080032ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f9d6 	bl	80035a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0208 	orr.w	r2, r2, #8
 8003202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0204 	bic.w	r2, r2, #4
 8003212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	619a      	str	r2, [r3, #24]
      break;
 8003226:	e064      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fa1c 	bl	800366c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
      break;
 8003268:	e043      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fa65 	bl	8003740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0208 	orr.w	r2, r2, #8
 8003284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0204 	bic.w	r2, r2, #4
 8003294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69d9      	ldr	r1, [r3, #28]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	61da      	str	r2, [r3, #28]
      break;
 80032a8:	e023      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 faaf 	bl	8003814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	61da      	str	r2, [r3, #28]
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
      break;
 80032f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0x1c>
 800331c:	2302      	movs	r3, #2
 800331e:	e0b4      	b.n	800348a <HAL_TIM_ConfigClockSource+0x186>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d03e      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xd4>
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	f200 8087 	bhi.w	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	f000 8086 	beq.w	8003476 <HAL_TIM_ConfigClockSource+0x172>
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d87f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d01a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xa6>
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d87b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d050      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x11a>
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d877      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d03c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xfa>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d873      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d058      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x13a>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d86f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d064      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d86b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d060      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d867      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d05a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	e062      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f000 faf0 	bl	800399e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	609a      	str	r2, [r3, #8]
      break;
 80033d6:	e04f      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f000 fad9 	bl	800399e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fa:	609a      	str	r2, [r3, #8]
      break;
 80033fc:	e03c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 fa50 	bl	80038b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2150      	movs	r1, #80	; 0x50
 8003416:	4618      	mov	r0, r3
 8003418:	f000 faa7 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 800341c:	e02c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 fa6e 	bl	800390c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2160      	movs	r1, #96	; 0x60
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fa97 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 800343c:	e01c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fa30 	bl	80038b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa87 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 800345c:	e00c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 fa7e 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 800346e:	e003      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e000      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a29      	ldr	r2, [pc, #164]	; (8003594 <TIM_Base_SetConfig+0xb8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0x30>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0x30>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a26      	ldr	r2, [pc, #152]	; (8003598 <TIM_Base_SetConfig+0xbc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0x30>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a25      	ldr	r2, [pc, #148]	; (800359c <TIM_Base_SetConfig+0xc0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <TIM_Base_SetConfig+0xb8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00b      	beq.n	800353e <TIM_Base_SetConfig+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d007      	beq.n	800353e <TIM_Base_SetConfig+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <TIM_Base_SetConfig+0xbc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d003      	beq.n	800353e <TIM_Base_SetConfig+0x62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a18      	ldr	r2, [pc, #96]	; (800359c <TIM_Base_SetConfig+0xc0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <TIM_Base_SetConfig+0xb8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d103      	bne.n	8003584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	615a      	str	r2, [r3, #20]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800

080035a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f023 0201 	bic.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0302 	bic.w	r3, r3, #2
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <TIM_OC1_SetConfig+0xc8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10c      	bne.n	8003616 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0308 	bic.w	r3, r3, #8
 8003602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a13      	ldr	r2, [pc, #76]	; (8003668 <TIM_OC1_SetConfig+0xc8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d111      	bne.n	8003642 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40012c00 	.word	0x40012c00

0800366c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 0210 	bic.w	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <TIM_OC2_SetConfig+0xd0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10d      	bne.n	80036e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a14      	ldr	r2, [pc, #80]	; (800373c <TIM_OC2_SetConfig+0xd0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d113      	bne.n	8003718 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00

08003740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <TIM_OC3_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10d      	bne.n	80037ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <TIM_OC3_SetConfig+0xd0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00

08003814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <TIM_OC4_SetConfig+0x98>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d109      	bne.n	8003888 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	40012c00 	.word	0x40012c00

080038b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0201 	bic.w	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 030a 	bic.w	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0210 	bic.w	r2, r3, #16
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	031b      	lsls	r3, r3, #12
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003948:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	621a      	str	r2, [r3, #32]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800396a:	b480      	push	{r7}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	f043 0307 	orr.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	021a      	lsls	r2, r3, #8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e046      	b.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d009      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a10      	ldr	r2, [pc, #64]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800

08003ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e042      	b.n	8003b9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fd6c 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fd71 	bl	8004630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d16d      	bne.n	8003ca0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Transmit+0x2c>
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e066      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be2:	f7fe f885 	bl	8001cf0 <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	d108      	bne.n	8003c10 <HAL_UART_Transmit+0x6c>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e003      	b.n	8003c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c18:	e02a      	b.n	8003c70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 faf9 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e036      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e007      	b.n	8003c62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1cf      	bne.n	8003c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2140      	movs	r1, #64	; 0x40
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fac9 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e006      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b0ba      	sub	sp, #232	; 0xe8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fbd1 	bl	80044b2 <UART_Receive_IT>
      return;
 8003d10:	e25b      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80de 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80d1 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
 8003d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 81f2 	beq.w	80041c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fb5c 	bl	80044b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_UART_IRQHandler+0x17a>
 8003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04f      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa66 	bl	80042f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d041      	beq.n	8003ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1d9      	bne.n	8003e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	4a7e      	ldr	r2, [pc, #504]	; (800408c <HAL_UART_IRQHandler+0x3e0>)
 8003e94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe f87a 	bl	8001f94 <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00e      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f99c 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00a      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f998 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f994 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ed2:	e175      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	bf00      	nop
    return;
 8003ed6:	e173      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 814f 	bne.w	8004180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8148 	beq.w	8004180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8141 	beq.w	8004180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80b6 	beq.w	8004090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8145 	beq.w	80041c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f080 813e 	bcs.w	80041c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	f000 8088 	beq.w	800406c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1d9      	bne.n	8003f5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e1      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004008:	66fa      	str	r2, [r7, #108]	; 0x6c
 800400a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800400e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e3      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403c:	f023 0310 	bic.w	r3, r3, #16
 8004040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800404e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004050:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e3      	bne.n	800402a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd ff59 	bl	8001f1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800407a:	b29b      	uxth	r3, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8bf 	bl	8004206 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004088:	e09c      	b.n	80041c4 <HAL_UART_IRQHandler+0x518>
 800408a:	bf00      	nop
 800408c:	080043bd 	.word	0x080043bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 808e 	beq.w	80041c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8089 	beq.w	80041c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040da:	647a      	str	r2, [r7, #68]	; 0x44
 80040dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e3      	bne.n	80040b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	623b      	str	r3, [r7, #32]
   return(result);
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004112:	633a      	str	r2, [r7, #48]	; 0x30
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e3      	bne.n	80040ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	60fb      	str	r3, [r7, #12]
   return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0310 	bic.w	r3, r3, #16
 800414a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004158:	61fa      	str	r2, [r7, #28]
 800415a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e3      	bne.n	8004134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f844 	bl	8004206 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800417e:	e023      	b.n	80041c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <HAL_UART_IRQHandler+0x4f4>
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f923 	bl	80043e4 <UART_Transmit_IT>
    return;
 800419e:	e014      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <HAL_UART_IRQHandler+0x51e>
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f962 	bl	8004482 <UART_EndTransmit_IT>
    return;
 80041be:	e004      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
    return;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
      return;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
      return;
 80041c8:	bf00      	nop
  }
}
 80041ca:	37e8      	adds	r7, #232	; 0xe8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b090      	sub	sp, #64	; 0x40
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e050      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d04c      	beq.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
 800423c:	f7fd fd58 	bl	8001cf0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004248:	429a      	cmp	r2, r3
 800424a:	d241      	bcs.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800426c:	637a      	str	r2, [r7, #52]	; 0x34
 800426e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	63bb      	str	r3, [r7, #56]	; 0x38
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a0:	623a      	str	r2, [r7, #32]
 80042a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69f9      	ldr	r1, [r7, #28]
 80042a6:	6a3a      	ldr	r2, [r7, #32]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e00f      	b.n	80042f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	429a      	cmp	r2, r3
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d09f      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3740      	adds	r7, #64	; 0x40
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b095      	sub	sp, #84	; 0x54
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004320:	643a      	str	r2, [r7, #64]	; 0x40
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	61fb      	str	r3, [r7, #28]
   return(result);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	2b01      	cmp	r3, #1
 800436e:	d119      	bne.n	80043a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f023 0310 	bic.w	r3, r3, #16
 8004386:	647b      	str	r3, [r7, #68]	; 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004390:	61ba      	str	r2, [r7, #24]
 8004392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	613b      	str	r3, [r7, #16]
   return(result);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e5      	bne.n	8004370 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043b2:	bf00      	nop
 80043b4:	3754      	adds	r7, #84	; 0x54
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff0c 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b21      	cmp	r3, #33	; 0x21
 80043f6:	d13e      	bne.n	8004476 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d114      	bne.n	800442c <UART_Transmit_IT+0x48>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d110      	bne.n	800442c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]
 800442a:	e008      	b.n	800443e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	1c59      	adds	r1, r3, #1
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6211      	str	r1, [r2, #32]
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29b      	uxth	r3, r3
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4619      	mov	r1, r3
 800444c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004460:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004470:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fe94 	bl	80041d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b08c      	sub	sp, #48	; 0x30
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b22      	cmp	r3, #34	; 0x22
 80044c4:	f040 80ae 	bne.w	8004624 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d117      	bne.n	8004502 <UART_Receive_IT+0x50>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d113      	bne.n	8004502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004500:	e026      	b.n	8004550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004514:	d007      	beq.n	8004526 <UART_Receive_IT+0x74>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <UART_Receive_IT+0x82>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e008      	b.n	8004546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004540:	b2da      	uxtb	r2, r3
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004560:	2b00      	cmp	r3, #0
 8004562:	d15d      	bne.n	8004620 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0220 	bic.w	r2, r2, #32
 8004572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d135      	bne.n	8004616 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	613b      	str	r3, [r7, #16]
   return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d0:	623a      	str	r2, [r7, #32]
 80045d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	69f9      	ldr	r1, [r7, #28]
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d10a      	bne.n	8004608 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff fdf9 	bl	8004206 <HAL_UARTEx_RxEventCallback>
 8004614:	e002      	b.n	800461c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fde3 	bl	80041e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e002      	b.n	8004626 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3730      	adds	r7, #48	; 0x30
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800466a:	f023 030c 	bic.w	r3, r3, #12
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	430b      	orrs	r3, r1
 8004676:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <UART_SetConfig+0x114>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d103      	bne.n	80046a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fe fa9c 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	e002      	b.n	80046a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046a0:	f7fe fa84 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 80046a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	4a22      	ldr	r2, [pc, #136]	; (8004748 <UART_SetConfig+0x118>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	0119      	lsls	r1, r3, #4
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009a      	lsls	r2, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <UART_SetConfig+0x118>)
 80046de:	fba3 0302 	umull	r0, r3, r3, r2
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	2064      	movs	r0, #100	; 0x64
 80046e6:	fb00 f303 	mul.w	r3, r0, r3
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	3332      	adds	r3, #50	; 0x32
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <UART_SetConfig+0x118>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fc:	4419      	add	r1, r3
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009a      	lsls	r2, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	fbb2 f2f3 	udiv	r2, r2, r3
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <UART_SetConfig+0x118>)
 8004716:	fba3 0302 	umull	r0, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2064      	movs	r0, #100	; 0x64
 800471e:	fb00 f303 	mul.w	r3, r0, r3
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	3332      	adds	r3, #50	; 0x32
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <UART_SetConfig+0x118>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	440a      	add	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40013800 	.word	0x40013800
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <__errno>:
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <__errno+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000004c 	.word	0x2000004c

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2600      	movs	r6, #0
 800475c:	4d0c      	ldr	r5, [pc, #48]	; (8004790 <__libc_init_array+0x38>)
 800475e:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 8004760:	1b64      	subs	r4, r4, r5
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	f000 fc5c 	bl	8005024 <_init>
 800476c:	2600      	movs	r6, #0
 800476e:	4d0a      	ldr	r5, [pc, #40]	; (8004798 <__libc_init_array+0x40>)
 8004770:	4c0a      	ldr	r4, [pc, #40]	; (800479c <__libc_init_array+0x44>)
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080050e0 	.word	0x080050e0
 8004794:	080050e0 	.word	0x080050e0
 8004798:	080050e0 	.word	0x080050e0
 800479c:	080050e4 	.word	0x080050e4

080047a0 <memset>:
 80047a0:	4603      	mov	r3, r0
 80047a2:	4402      	add	r2, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <siprintf>:
 80047b0:	b40e      	push	{r1, r2, r3}
 80047b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047b6:	b500      	push	{lr}
 80047b8:	b09c      	sub	sp, #112	; 0x70
 80047ba:	ab1d      	add	r3, sp, #116	; 0x74
 80047bc:	9002      	str	r0, [sp, #8]
 80047be:	9006      	str	r0, [sp, #24]
 80047c0:	9107      	str	r1, [sp, #28]
 80047c2:	9104      	str	r1, [sp, #16]
 80047c4:	4808      	ldr	r0, [pc, #32]	; (80047e8 <siprintf+0x38>)
 80047c6:	4909      	ldr	r1, [pc, #36]	; (80047ec <siprintf+0x3c>)
 80047c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047cc:	9105      	str	r1, [sp, #20]
 80047ce:	6800      	ldr	r0, [r0, #0]
 80047d0:	a902      	add	r1, sp, #8
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	f000 f868 	bl	80048a8 <_svfiprintf_r>
 80047d8:	2200      	movs	r2, #0
 80047da:	9b02      	ldr	r3, [sp, #8]
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	b01c      	add	sp, #112	; 0x70
 80047e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e4:	b003      	add	sp, #12
 80047e6:	4770      	bx	lr
 80047e8:	2000004c 	.word	0x2000004c
 80047ec:	ffff0208 	.word	0xffff0208

080047f0 <__ssputs_r>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	688e      	ldr	r6, [r1, #8]
 80047f6:	4682      	mov	sl, r0
 80047f8:	429e      	cmp	r6, r3
 80047fa:	460c      	mov	r4, r1
 80047fc:	4690      	mov	r8, r2
 80047fe:	461f      	mov	r7, r3
 8004800:	d838      	bhi.n	8004874 <__ssputs_r+0x84>
 8004802:	898a      	ldrh	r2, [r1, #12]
 8004804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004808:	d032      	beq.n	8004870 <__ssputs_r+0x80>
 800480a:	6825      	ldr	r5, [r4, #0]
 800480c:	6909      	ldr	r1, [r1, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	eba5 0901 	sub.w	r9, r5, r1
 8004814:	6965      	ldr	r5, [r4, #20]
 8004816:	444b      	add	r3, r9
 8004818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800481c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004820:	106d      	asrs	r5, r5, #1
 8004822:	429d      	cmp	r5, r3
 8004824:	bf38      	it	cc
 8004826:	461d      	movcc	r5, r3
 8004828:	0553      	lsls	r3, r2, #21
 800482a:	d531      	bpl.n	8004890 <__ssputs_r+0xa0>
 800482c:	4629      	mov	r1, r5
 800482e:	f000 fb53 	bl	8004ed8 <_malloc_r>
 8004832:	4606      	mov	r6, r0
 8004834:	b950      	cbnz	r0, 800484c <__ssputs_r+0x5c>
 8004836:	230c      	movs	r3, #12
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	f8ca 3000 	str.w	r3, [sl]
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484c:	464a      	mov	r2, r9
 800484e:	6921      	ldr	r1, [r4, #16]
 8004850:	f000 face 	bl	8004df0 <memcpy>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	81a3      	strh	r3, [r4, #12]
 8004860:	6126      	str	r6, [r4, #16]
 8004862:	444e      	add	r6, r9
 8004864:	6026      	str	r6, [r4, #0]
 8004866:	463e      	mov	r6, r7
 8004868:	6165      	str	r5, [r4, #20]
 800486a:	eba5 0509 	sub.w	r5, r5, r9
 800486e:	60a5      	str	r5, [r4, #8]
 8004870:	42be      	cmp	r6, r7
 8004872:	d900      	bls.n	8004876 <__ssputs_r+0x86>
 8004874:	463e      	mov	r6, r7
 8004876:	4632      	mov	r2, r6
 8004878:	4641      	mov	r1, r8
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	f000 fac6 	bl	8004e0c <memmove>
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	1b9b      	subs	r3, r3, r6
 8004886:	4432      	add	r2, r6
 8004888:	2000      	movs	r0, #0
 800488a:	60a3      	str	r3, [r4, #8]
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	e7db      	b.n	8004848 <__ssputs_r+0x58>
 8004890:	462a      	mov	r2, r5
 8004892:	f000 fb7b 	bl	8004f8c <_realloc_r>
 8004896:	4606      	mov	r6, r0
 8004898:	2800      	cmp	r0, #0
 800489a:	d1e1      	bne.n	8004860 <__ssputs_r+0x70>
 800489c:	4650      	mov	r0, sl
 800489e:	6921      	ldr	r1, [r4, #16]
 80048a0:	f000 face 	bl	8004e40 <_free_r>
 80048a4:	e7c7      	b.n	8004836 <__ssputs_r+0x46>
	...

080048a8 <_svfiprintf_r>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	4698      	mov	r8, r3
 80048ae:	898b      	ldrh	r3, [r1, #12]
 80048b0:	4607      	mov	r7, r0
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	460d      	mov	r5, r1
 80048b6:	4614      	mov	r4, r2
 80048b8:	b09d      	sub	sp, #116	; 0x74
 80048ba:	d50e      	bpl.n	80048da <_svfiprintf_r+0x32>
 80048bc:	690b      	ldr	r3, [r1, #16]
 80048be:	b963      	cbnz	r3, 80048da <_svfiprintf_r+0x32>
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	f000 fb09 	bl	8004ed8 <_malloc_r>
 80048c6:	6028      	str	r0, [r5, #0]
 80048c8:	6128      	str	r0, [r5, #16]
 80048ca:	b920      	cbnz	r0, 80048d6 <_svfiprintf_r+0x2e>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e0d1      	b.n	8004a7a <_svfiprintf_r+0x1d2>
 80048d6:	2340      	movs	r3, #64	; 0x40
 80048d8:	616b      	str	r3, [r5, #20]
 80048da:	2300      	movs	r3, #0
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
 80048de:	2320      	movs	r3, #32
 80048e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048e4:	2330      	movs	r3, #48	; 0x30
 80048e6:	f04f 0901 	mov.w	r9, #1
 80048ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a94 <_svfiprintf_r+0x1ec>
 80048f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048f6:	4623      	mov	r3, r4
 80048f8:	469a      	mov	sl, r3
 80048fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fe:	b10a      	cbz	r2, 8004904 <_svfiprintf_r+0x5c>
 8004900:	2a25      	cmp	r2, #37	; 0x25
 8004902:	d1f9      	bne.n	80048f8 <_svfiprintf_r+0x50>
 8004904:	ebba 0b04 	subs.w	fp, sl, r4
 8004908:	d00b      	beq.n	8004922 <_svfiprintf_r+0x7a>
 800490a:	465b      	mov	r3, fp
 800490c:	4622      	mov	r2, r4
 800490e:	4629      	mov	r1, r5
 8004910:	4638      	mov	r0, r7
 8004912:	f7ff ff6d 	bl	80047f0 <__ssputs_r>
 8004916:	3001      	adds	r0, #1
 8004918:	f000 80aa 	beq.w	8004a70 <_svfiprintf_r+0x1c8>
 800491c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800491e:	445a      	add	r2, fp
 8004920:	9209      	str	r2, [sp, #36]	; 0x24
 8004922:	f89a 3000 	ldrb.w	r3, [sl]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a2 	beq.w	8004a70 <_svfiprintf_r+0x1c8>
 800492c:	2300      	movs	r3, #0
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004936:	f10a 0a01 	add.w	sl, sl, #1
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	9307      	str	r3, [sp, #28]
 800493e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004942:	931a      	str	r3, [sp, #104]	; 0x68
 8004944:	4654      	mov	r4, sl
 8004946:	2205      	movs	r2, #5
 8004948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494c:	4851      	ldr	r0, [pc, #324]	; (8004a94 <_svfiprintf_r+0x1ec>)
 800494e:	f000 fa41 	bl	8004dd4 <memchr>
 8004952:	9a04      	ldr	r2, [sp, #16]
 8004954:	b9d8      	cbnz	r0, 800498e <_svfiprintf_r+0xe6>
 8004956:	06d0      	lsls	r0, r2, #27
 8004958:	bf44      	itt	mi
 800495a:	2320      	movmi	r3, #32
 800495c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004960:	0711      	lsls	r1, r2, #28
 8004962:	bf44      	itt	mi
 8004964:	232b      	movmi	r3, #43	; 0x2b
 8004966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496a:	f89a 3000 	ldrb.w	r3, [sl]
 800496e:	2b2a      	cmp	r3, #42	; 0x2a
 8004970:	d015      	beq.n	800499e <_svfiprintf_r+0xf6>
 8004972:	4654      	mov	r4, sl
 8004974:	2000      	movs	r0, #0
 8004976:	f04f 0c0a 	mov.w	ip, #10
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	4621      	mov	r1, r4
 800497e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004982:	3b30      	subs	r3, #48	; 0x30
 8004984:	2b09      	cmp	r3, #9
 8004986:	d94e      	bls.n	8004a26 <_svfiprintf_r+0x17e>
 8004988:	b1b0      	cbz	r0, 80049b8 <_svfiprintf_r+0x110>
 800498a:	9207      	str	r2, [sp, #28]
 800498c:	e014      	b.n	80049b8 <_svfiprintf_r+0x110>
 800498e:	eba0 0308 	sub.w	r3, r0, r8
 8004992:	fa09 f303 	lsl.w	r3, r9, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	46a2      	mov	sl, r4
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	e7d2      	b.n	8004944 <_svfiprintf_r+0x9c>
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	1d19      	adds	r1, r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	9103      	str	r1, [sp, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bfbb      	ittet	lt
 80049aa:	425b      	neglt	r3, r3
 80049ac:	f042 0202 	orrlt.w	r2, r2, #2
 80049b0:	9307      	strge	r3, [sp, #28]
 80049b2:	9307      	strlt	r3, [sp, #28]
 80049b4:	bfb8      	it	lt
 80049b6:	9204      	strlt	r2, [sp, #16]
 80049b8:	7823      	ldrb	r3, [r4, #0]
 80049ba:	2b2e      	cmp	r3, #46	; 0x2e
 80049bc:	d10c      	bne.n	80049d8 <_svfiprintf_r+0x130>
 80049be:	7863      	ldrb	r3, [r4, #1]
 80049c0:	2b2a      	cmp	r3, #42	; 0x2a
 80049c2:	d135      	bne.n	8004a30 <_svfiprintf_r+0x188>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	3402      	adds	r4, #2
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	9203      	str	r2, [sp, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bfb8      	it	lt
 80049d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004aa4 <_svfiprintf_r+0x1fc>
 80049dc:	2203      	movs	r2, #3
 80049de:	4650      	mov	r0, sl
 80049e0:	7821      	ldrb	r1, [r4, #0]
 80049e2:	f000 f9f7 	bl	8004dd4 <memchr>
 80049e6:	b140      	cbz	r0, 80049fa <_svfiprintf_r+0x152>
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	eba0 000a 	sub.w	r0, r0, sl
 80049ee:	fa03 f000 	lsl.w	r0, r3, r0
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	3401      	adds	r4, #1
 80049f6:	4303      	orrs	r3, r0
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049fe:	2206      	movs	r2, #6
 8004a00:	4825      	ldr	r0, [pc, #148]	; (8004a98 <_svfiprintf_r+0x1f0>)
 8004a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a06:	f000 f9e5 	bl	8004dd4 <memchr>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d038      	beq.n	8004a80 <_svfiprintf_r+0x1d8>
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <_svfiprintf_r+0x1f4>)
 8004a10:	bb1b      	cbnz	r3, 8004a5a <_svfiprintf_r+0x1b2>
 8004a12:	9b03      	ldr	r3, [sp, #12]
 8004a14:	3307      	adds	r3, #7
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	9303      	str	r3, [sp, #12]
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	4433      	add	r3, r6
 8004a22:	9309      	str	r3, [sp, #36]	; 0x24
 8004a24:	e767      	b.n	80048f6 <_svfiprintf_r+0x4e>
 8004a26:	460c      	mov	r4, r1
 8004a28:	2001      	movs	r0, #1
 8004a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a2e:	e7a5      	b.n	800497c <_svfiprintf_r+0xd4>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f04f 0c0a 	mov.w	ip, #10
 8004a36:	4619      	mov	r1, r3
 8004a38:	3401      	adds	r4, #1
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a42:	3a30      	subs	r2, #48	; 0x30
 8004a44:	2a09      	cmp	r2, #9
 8004a46:	d903      	bls.n	8004a50 <_svfiprintf_r+0x1a8>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0c5      	beq.n	80049d8 <_svfiprintf_r+0x130>
 8004a4c:	9105      	str	r1, [sp, #20]
 8004a4e:	e7c3      	b.n	80049d8 <_svfiprintf_r+0x130>
 8004a50:	4604      	mov	r4, r0
 8004a52:	2301      	movs	r3, #1
 8004a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a58:	e7f0      	b.n	8004a3c <_svfiprintf_r+0x194>
 8004a5a:	ab03      	add	r3, sp, #12
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	462a      	mov	r2, r5
 8004a60:	4638      	mov	r0, r7
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <_svfiprintf_r+0x1f8>)
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	f3af 8000 	nop.w
 8004a6a:	1c42      	adds	r2, r0, #1
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	d1d6      	bne.n	8004a1e <_svfiprintf_r+0x176>
 8004a70:	89ab      	ldrh	r3, [r5, #12]
 8004a72:	065b      	lsls	r3, r3, #25
 8004a74:	f53f af2c 	bmi.w	80048d0 <_svfiprintf_r+0x28>
 8004a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a7a:	b01d      	add	sp, #116	; 0x74
 8004a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a80:	ab03      	add	r3, sp, #12
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	462a      	mov	r2, r5
 8004a86:	4638      	mov	r0, r7
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <_svfiprintf_r+0x1f8>)
 8004a8a:	a904      	add	r1, sp, #16
 8004a8c:	f000 f87c 	bl	8004b88 <_printf_i>
 8004a90:	e7eb      	b.n	8004a6a <_svfiprintf_r+0x1c2>
 8004a92:	bf00      	nop
 8004a94:	080050aa 	.word	0x080050aa
 8004a98:	080050b4 	.word	0x080050b4
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	080047f1 	.word	0x080047f1
 8004aa4:	080050b0 	.word	0x080050b0

08004aa8 <_printf_common>:
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	4616      	mov	r6, r2
 8004aae:	4699      	mov	r9, r3
 8004ab0:	688a      	ldr	r2, [r1, #8]
 8004ab2:	690b      	ldr	r3, [r1, #16]
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bfb8      	it	lt
 8004aba:	4613      	movlt	r3, r2
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ac8:	b10a      	cbz	r2, 8004ace <_printf_common+0x26>
 8004aca:	3301      	adds	r3, #1
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	0699      	lsls	r1, r3, #26
 8004ad2:	bf42      	ittt	mi
 8004ad4:	6833      	ldrmi	r3, [r6, #0]
 8004ad6:	3302      	addmi	r3, #2
 8004ad8:	6033      	strmi	r3, [r6, #0]
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	f015 0506 	ands.w	r5, r5, #6
 8004ae0:	d106      	bne.n	8004af0 <_printf_common+0x48>
 8004ae2:	f104 0a19 	add.w	sl, r4, #25
 8004ae6:	68e3      	ldr	r3, [r4, #12]
 8004ae8:	6832      	ldr	r2, [r6, #0]
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	42ab      	cmp	r3, r5
 8004aee:	dc28      	bgt.n	8004b42 <_printf_common+0x9a>
 8004af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004af4:	1e13      	subs	r3, r2, #0
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	bf18      	it	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	0692      	lsls	r2, r2, #26
 8004afe:	d42d      	bmi.n	8004b5c <_printf_common+0xb4>
 8004b00:	4649      	mov	r1, r9
 8004b02:	4638      	mov	r0, r7
 8004b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d020      	beq.n	8004b50 <_printf_common+0xa8>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	68e5      	ldr	r5, [r4, #12]
 8004b12:	f003 0306 	and.w	r3, r3, #6
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	bf18      	it	ne
 8004b1a:	2500      	movne	r5, #0
 8004b1c:	6832      	ldr	r2, [r6, #0]
 8004b1e:	f04f 0600 	mov.w	r6, #0
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	bf08      	it	eq
 8004b26:	1aad      	subeq	r5, r5, r2
 8004b28:	6922      	ldr	r2, [r4, #16]
 8004b2a:	bf08      	it	eq
 8004b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bfc4      	itt	gt
 8004b34:	1a9b      	subgt	r3, r3, r2
 8004b36:	18ed      	addgt	r5, r5, r3
 8004b38:	341a      	adds	r4, #26
 8004b3a:	42b5      	cmp	r5, r6
 8004b3c:	d11a      	bne.n	8004b74 <_printf_common+0xcc>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e008      	b.n	8004b54 <_printf_common+0xac>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4652      	mov	r2, sl
 8004b46:	4649      	mov	r1, r9
 8004b48:	4638      	mov	r0, r7
 8004b4a:	47c0      	blx	r8
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d103      	bne.n	8004b58 <_printf_common+0xb0>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b58:	3501      	adds	r5, #1
 8004b5a:	e7c4      	b.n	8004ae6 <_printf_common+0x3e>
 8004b5c:	2030      	movs	r0, #48	; 0x30
 8004b5e:	18e1      	adds	r1, r4, r3
 8004b60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b6a:	4422      	add	r2, r4
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b72:	e7c5      	b.n	8004b00 <_printf_common+0x58>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4622      	mov	r2, r4
 8004b78:	4649      	mov	r1, r9
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	47c0      	blx	r8
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d0e6      	beq.n	8004b50 <_printf_common+0xa8>
 8004b82:	3601      	adds	r6, #1
 8004b84:	e7d9      	b.n	8004b3a <_printf_common+0x92>
	...

08004b88 <_printf_i>:
 8004b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	7e27      	ldrb	r7, [r4, #24]
 8004b90:	4691      	mov	r9, r2
 8004b92:	2f78      	cmp	r7, #120	; 0x78
 8004b94:	4680      	mov	r8, r0
 8004b96:	469a      	mov	sl, r3
 8004b98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9e:	d807      	bhi.n	8004bb0 <_printf_i+0x28>
 8004ba0:	2f62      	cmp	r7, #98	; 0x62
 8004ba2:	d80a      	bhi.n	8004bba <_printf_i+0x32>
 8004ba4:	2f00      	cmp	r7, #0
 8004ba6:	f000 80d9 	beq.w	8004d5c <_printf_i+0x1d4>
 8004baa:	2f58      	cmp	r7, #88	; 0x58
 8004bac:	f000 80a4 	beq.w	8004cf8 <_printf_i+0x170>
 8004bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bb8:	e03a      	b.n	8004c30 <_printf_i+0xa8>
 8004bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bbe:	2b15      	cmp	r3, #21
 8004bc0:	d8f6      	bhi.n	8004bb0 <_printf_i+0x28>
 8004bc2:	a001      	add	r0, pc, #4	; (adr r0, 8004bc8 <_printf_i+0x40>)
 8004bc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bc8:	08004c21 	.word	0x08004c21
 8004bcc:	08004c35 	.word	0x08004c35
 8004bd0:	08004bb1 	.word	0x08004bb1
 8004bd4:	08004bb1 	.word	0x08004bb1
 8004bd8:	08004bb1 	.word	0x08004bb1
 8004bdc:	08004bb1 	.word	0x08004bb1
 8004be0:	08004c35 	.word	0x08004c35
 8004be4:	08004bb1 	.word	0x08004bb1
 8004be8:	08004bb1 	.word	0x08004bb1
 8004bec:	08004bb1 	.word	0x08004bb1
 8004bf0:	08004bb1 	.word	0x08004bb1
 8004bf4:	08004d43 	.word	0x08004d43
 8004bf8:	08004c65 	.word	0x08004c65
 8004bfc:	08004d25 	.word	0x08004d25
 8004c00:	08004bb1 	.word	0x08004bb1
 8004c04:	08004bb1 	.word	0x08004bb1
 8004c08:	08004d65 	.word	0x08004d65
 8004c0c:	08004bb1 	.word	0x08004bb1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004bb1 	.word	0x08004bb1
 8004c18:	08004bb1 	.word	0x08004bb1
 8004c1c:	08004d2d 	.word	0x08004d2d
 8004c20:	680b      	ldr	r3, [r1, #0]
 8004c22:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	600a      	str	r2, [r1, #0]
 8004c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0a4      	b.n	8004d7e <_printf_i+0x1f6>
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	6808      	ldr	r0, [r1, #0]
 8004c38:	062e      	lsls	r6, r5, #24
 8004c3a:	f100 0304 	add.w	r3, r0, #4
 8004c3e:	d50a      	bpl.n	8004c56 <_printf_i+0xce>
 8004c40:	6805      	ldr	r5, [r0, #0]
 8004c42:	600b      	str	r3, [r1, #0]
 8004c44:	2d00      	cmp	r5, #0
 8004c46:	da03      	bge.n	8004c50 <_printf_i+0xc8>
 8004c48:	232d      	movs	r3, #45	; 0x2d
 8004c4a:	426d      	negs	r5, r5
 8004c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c50:	230a      	movs	r3, #10
 8004c52:	485e      	ldr	r0, [pc, #376]	; (8004dcc <_printf_i+0x244>)
 8004c54:	e019      	b.n	8004c8a <_printf_i+0x102>
 8004c56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c5a:	6805      	ldr	r5, [r0, #0]
 8004c5c:	600b      	str	r3, [r1, #0]
 8004c5e:	bf18      	it	ne
 8004c60:	b22d      	sxthne	r5, r5
 8004c62:	e7ef      	b.n	8004c44 <_printf_i+0xbc>
 8004c64:	680b      	ldr	r3, [r1, #0]
 8004c66:	6825      	ldr	r5, [r4, #0]
 8004c68:	1d18      	adds	r0, r3, #4
 8004c6a:	6008      	str	r0, [r1, #0]
 8004c6c:	0628      	lsls	r0, r5, #24
 8004c6e:	d501      	bpl.n	8004c74 <_printf_i+0xec>
 8004c70:	681d      	ldr	r5, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <_printf_i+0xf2>
 8004c74:	0669      	lsls	r1, r5, #25
 8004c76:	d5fb      	bpl.n	8004c70 <_printf_i+0xe8>
 8004c78:	881d      	ldrh	r5, [r3, #0]
 8004c7a:	2f6f      	cmp	r7, #111	; 0x6f
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2308      	moveq	r3, #8
 8004c80:	230a      	movne	r3, #10
 8004c82:	4852      	ldr	r0, [pc, #328]	; (8004dcc <_printf_i+0x244>)
 8004c84:	2100      	movs	r1, #0
 8004c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c8a:	6866      	ldr	r6, [r4, #4]
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	bfa8      	it	ge
 8004c90:	6821      	ldrge	r1, [r4, #0]
 8004c92:	60a6      	str	r6, [r4, #8]
 8004c94:	bfa4      	itt	ge
 8004c96:	f021 0104 	bicge.w	r1, r1, #4
 8004c9a:	6021      	strge	r1, [r4, #0]
 8004c9c:	b90d      	cbnz	r5, 8004ca2 <_printf_i+0x11a>
 8004c9e:	2e00      	cmp	r6, #0
 8004ca0:	d04d      	beq.n	8004d3e <_printf_i+0x1b6>
 8004ca2:	4616      	mov	r6, r2
 8004ca4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ca8:	fb03 5711 	mls	r7, r3, r1, r5
 8004cac:	5dc7      	ldrb	r7, [r0, r7]
 8004cae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cb2:	462f      	mov	r7, r5
 8004cb4:	42bb      	cmp	r3, r7
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	d9f4      	bls.n	8004ca4 <_printf_i+0x11c>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d10b      	bne.n	8004cd6 <_printf_i+0x14e>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	07df      	lsls	r7, r3, #31
 8004cc2:	d508      	bpl.n	8004cd6 <_printf_i+0x14e>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6861      	ldr	r1, [r4, #4]
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	bfde      	ittt	le
 8004ccc:	2330      	movle	r3, #48	; 0x30
 8004cce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cd6:	1b92      	subs	r2, r2, r6
 8004cd8:	6122      	str	r2, [r4, #16]
 8004cda:	464b      	mov	r3, r9
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f8cd a000 	str.w	sl, [sp]
 8004ce4:	aa03      	add	r2, sp, #12
 8004ce6:	f7ff fedf 	bl	8004aa8 <_printf_common>
 8004cea:	3001      	adds	r0, #1
 8004cec:	d14c      	bne.n	8004d88 <_printf_i+0x200>
 8004cee:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf2:	b004      	add	sp, #16
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	4834      	ldr	r0, [pc, #208]	; (8004dcc <_printf_i+0x244>)
 8004cfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cfe:	680e      	ldr	r6, [r1, #0]
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d06:	061f      	lsls	r7, r3, #24
 8004d08:	600e      	str	r6, [r1, #0]
 8004d0a:	d514      	bpl.n	8004d36 <_printf_i+0x1ae>
 8004d0c:	07d9      	lsls	r1, r3, #31
 8004d0e:	bf44      	itt	mi
 8004d10:	f043 0320 	orrmi.w	r3, r3, #32
 8004d14:	6023      	strmi	r3, [r4, #0]
 8004d16:	b91d      	cbnz	r5, 8004d20 <_printf_i+0x198>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f023 0320 	bic.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	2310      	movs	r3, #16
 8004d22:	e7af      	b.n	8004c84 <_printf_i+0xfc>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	f043 0320 	orr.w	r3, r3, #32
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	2378      	movs	r3, #120	; 0x78
 8004d2e:	4828      	ldr	r0, [pc, #160]	; (8004dd0 <_printf_i+0x248>)
 8004d30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d34:	e7e3      	b.n	8004cfe <_printf_i+0x176>
 8004d36:	065e      	lsls	r6, r3, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b2ad      	uxthmi	r5, r5
 8004d3c:	e7e6      	b.n	8004d0c <_printf_i+0x184>
 8004d3e:	4616      	mov	r6, r2
 8004d40:	e7bb      	b.n	8004cba <_printf_i+0x132>
 8004d42:	680b      	ldr	r3, [r1, #0]
 8004d44:	6826      	ldr	r6, [r4, #0]
 8004d46:	1d1d      	adds	r5, r3, #4
 8004d48:	6960      	ldr	r0, [r4, #20]
 8004d4a:	600d      	str	r5, [r1, #0]
 8004d4c:	0635      	lsls	r5, r6, #24
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	d501      	bpl.n	8004d56 <_printf_i+0x1ce>
 8004d52:	6018      	str	r0, [r3, #0]
 8004d54:	e002      	b.n	8004d5c <_printf_i+0x1d4>
 8004d56:	0671      	lsls	r1, r6, #25
 8004d58:	d5fb      	bpl.n	8004d52 <_printf_i+0x1ca>
 8004d5a:	8018      	strh	r0, [r3, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4616      	mov	r6, r2
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	e7ba      	b.n	8004cda <_printf_i+0x152>
 8004d64:	680b      	ldr	r3, [r1, #0]
 8004d66:	1d1a      	adds	r2, r3, #4
 8004d68:	600a      	str	r2, [r1, #0]
 8004d6a:	681e      	ldr	r6, [r3, #0]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4630      	mov	r0, r6
 8004d70:	6862      	ldr	r2, [r4, #4]
 8004d72:	f000 f82f 	bl	8004dd4 <memchr>
 8004d76:	b108      	cbz	r0, 8004d7c <_printf_i+0x1f4>
 8004d78:	1b80      	subs	r0, r0, r6
 8004d7a:	6060      	str	r0, [r4, #4]
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	2300      	movs	r3, #0
 8004d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d86:	e7a8      	b.n	8004cda <_printf_i+0x152>
 8004d88:	4632      	mov	r2, r6
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	47d0      	blx	sl
 8004d92:	3001      	adds	r0, #1
 8004d94:	d0ab      	beq.n	8004cee <_printf_i+0x166>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	079b      	lsls	r3, r3, #30
 8004d9a:	d413      	bmi.n	8004dc4 <_printf_i+0x23c>
 8004d9c:	68e0      	ldr	r0, [r4, #12]
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	4298      	cmp	r0, r3
 8004da2:	bfb8      	it	lt
 8004da4:	4618      	movlt	r0, r3
 8004da6:	e7a4      	b.n	8004cf2 <_printf_i+0x16a>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4632      	mov	r2, r6
 8004dac:	4649      	mov	r1, r9
 8004dae:	4640      	mov	r0, r8
 8004db0:	47d0      	blx	sl
 8004db2:	3001      	adds	r0, #1
 8004db4:	d09b      	beq.n	8004cee <_printf_i+0x166>
 8004db6:	3501      	adds	r5, #1
 8004db8:	68e3      	ldr	r3, [r4, #12]
 8004dba:	9903      	ldr	r1, [sp, #12]
 8004dbc:	1a5b      	subs	r3, r3, r1
 8004dbe:	42ab      	cmp	r3, r5
 8004dc0:	dcf2      	bgt.n	8004da8 <_printf_i+0x220>
 8004dc2:	e7eb      	b.n	8004d9c <_printf_i+0x214>
 8004dc4:	2500      	movs	r5, #0
 8004dc6:	f104 0619 	add.w	r6, r4, #25
 8004dca:	e7f5      	b.n	8004db8 <_printf_i+0x230>
 8004dcc:	080050bb 	.word	0x080050bb
 8004dd0:	080050cc 	.word	0x080050cc

08004dd4 <memchr>:
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	b2c9      	uxtb	r1, r1
 8004dda:	4402      	add	r2, r0
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	d101      	bne.n	8004de6 <memchr+0x12>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e003      	b.n	8004dee <memchr+0x1a>
 8004de6:	7804      	ldrb	r4, [r0, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	428c      	cmp	r4, r1
 8004dec:	d1f6      	bne.n	8004ddc <memchr+0x8>
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <memcpy>:
 8004df0:	440a      	add	r2, r1
 8004df2:	4291      	cmp	r1, r2
 8004df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004df8:	d100      	bne.n	8004dfc <memcpy+0xc>
 8004dfa:	4770      	bx	lr
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e08:	d1f9      	bne.n	8004dfe <memcpy+0xe>
 8004e0a:	bd10      	pop	{r4, pc}

08004e0c <memmove>:
 8004e0c:	4288      	cmp	r0, r1
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	eb01 0402 	add.w	r4, r1, r2
 8004e14:	d902      	bls.n	8004e1c <memmove+0x10>
 8004e16:	4284      	cmp	r4, r0
 8004e18:	4623      	mov	r3, r4
 8004e1a:	d807      	bhi.n	8004e2c <memmove+0x20>
 8004e1c:	1e43      	subs	r3, r0, #1
 8004e1e:	42a1      	cmp	r1, r4
 8004e20:	d008      	beq.n	8004e34 <memmove+0x28>
 8004e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2a:	e7f8      	b.n	8004e1e <memmove+0x12>
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	4402      	add	r2, r0
 8004e30:	428a      	cmp	r2, r1
 8004e32:	d100      	bne.n	8004e36 <memmove+0x2a>
 8004e34:	bd10      	pop	{r4, pc}
 8004e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e3e:	e7f7      	b.n	8004e30 <memmove+0x24>

08004e40 <_free_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4605      	mov	r5, r0
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d043      	beq.n	8004ed0 <_free_r+0x90>
 8004e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4c:	1f0c      	subs	r4, r1, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfb8      	it	lt
 8004e52:	18e4      	addlt	r4, r4, r3
 8004e54:	f000 f8d0 	bl	8004ff8 <__malloc_lock>
 8004e58:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <_free_r+0x94>)
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	b933      	cbnz	r3, 8004e6e <_free_r+0x2e>
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	6014      	str	r4, [r2, #0]
 8004e64:	4628      	mov	r0, r5
 8004e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e6a:	f000 b8cb 	b.w	8005004 <__malloc_unlock>
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	d90a      	bls.n	8004e88 <_free_r+0x48>
 8004e72:	6821      	ldr	r1, [r4, #0]
 8004e74:	1862      	adds	r2, r4, r1
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bf01      	itttt	eq
 8004e7a:	681a      	ldreq	r2, [r3, #0]
 8004e7c:	685b      	ldreq	r3, [r3, #4]
 8004e7e:	1852      	addeq	r2, r2, r1
 8004e80:	6022      	streq	r2, [r4, #0]
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6004      	str	r4, [r0, #0]
 8004e86:	e7ed      	b.n	8004e64 <_free_r+0x24>
 8004e88:	461a      	mov	r2, r3
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	b10b      	cbz	r3, 8004e92 <_free_r+0x52>
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	d9fa      	bls.n	8004e88 <_free_r+0x48>
 8004e92:	6811      	ldr	r1, [r2, #0]
 8004e94:	1850      	adds	r0, r2, r1
 8004e96:	42a0      	cmp	r0, r4
 8004e98:	d10b      	bne.n	8004eb2 <_free_r+0x72>
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	4401      	add	r1, r0
 8004e9e:	1850      	adds	r0, r2, r1
 8004ea0:	4283      	cmp	r3, r0
 8004ea2:	6011      	str	r1, [r2, #0]
 8004ea4:	d1de      	bne.n	8004e64 <_free_r+0x24>
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4401      	add	r1, r0
 8004eac:	6011      	str	r1, [r2, #0]
 8004eae:	6053      	str	r3, [r2, #4]
 8004eb0:	e7d8      	b.n	8004e64 <_free_r+0x24>
 8004eb2:	d902      	bls.n	8004eba <_free_r+0x7a>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	e7d4      	b.n	8004e64 <_free_r+0x24>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	1821      	adds	r1, r4, r0
 8004ebe:	428b      	cmp	r3, r1
 8004ec0:	bf01      	itttt	eq
 8004ec2:	6819      	ldreq	r1, [r3, #0]
 8004ec4:	685b      	ldreq	r3, [r3, #4]
 8004ec6:	1809      	addeq	r1, r1, r0
 8004ec8:	6021      	streq	r1, [r4, #0]
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	6054      	str	r4, [r2, #4]
 8004ece:	e7c9      	b.n	8004e64 <_free_r+0x24>
 8004ed0:	bd38      	pop	{r3, r4, r5, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200000d8 	.word	0x200000d8

08004ed8 <_malloc_r>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	1ccd      	adds	r5, r1, #3
 8004edc:	f025 0503 	bic.w	r5, r5, #3
 8004ee0:	3508      	adds	r5, #8
 8004ee2:	2d0c      	cmp	r5, #12
 8004ee4:	bf38      	it	cc
 8004ee6:	250c      	movcc	r5, #12
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	4606      	mov	r6, r0
 8004eec:	db01      	blt.n	8004ef2 <_malloc_r+0x1a>
 8004eee:	42a9      	cmp	r1, r5
 8004ef0:	d903      	bls.n	8004efa <_malloc_r+0x22>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	6033      	str	r3, [r6, #0]
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efa:	f000 f87d 	bl	8004ff8 <__malloc_lock>
 8004efe:	4921      	ldr	r1, [pc, #132]	; (8004f84 <_malloc_r+0xac>)
 8004f00:	680a      	ldr	r2, [r1, #0]
 8004f02:	4614      	mov	r4, r2
 8004f04:	b99c      	cbnz	r4, 8004f2e <_malloc_r+0x56>
 8004f06:	4f20      	ldr	r7, [pc, #128]	; (8004f88 <_malloc_r+0xb0>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	b923      	cbnz	r3, 8004f16 <_malloc_r+0x3e>
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f000 f862 	bl	8004fd8 <_sbrk_r>
 8004f14:	6038      	str	r0, [r7, #0]
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 f85d 	bl	8004fd8 <_sbrk_r>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	d123      	bne.n	8004f6a <_malloc_r+0x92>
 8004f22:	230c      	movs	r3, #12
 8004f24:	4630      	mov	r0, r6
 8004f26:	6033      	str	r3, [r6, #0]
 8004f28:	f000 f86c 	bl	8005004 <__malloc_unlock>
 8004f2c:	e7e3      	b.n	8004ef6 <_malloc_r+0x1e>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	1b5b      	subs	r3, r3, r5
 8004f32:	d417      	bmi.n	8004f64 <_malloc_r+0x8c>
 8004f34:	2b0b      	cmp	r3, #11
 8004f36:	d903      	bls.n	8004f40 <_malloc_r+0x68>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	441c      	add	r4, r3
 8004f3c:	6025      	str	r5, [r4, #0]
 8004f3e:	e004      	b.n	8004f4a <_malloc_r+0x72>
 8004f40:	6863      	ldr	r3, [r4, #4]
 8004f42:	42a2      	cmp	r2, r4
 8004f44:	bf0c      	ite	eq
 8004f46:	600b      	streq	r3, [r1, #0]
 8004f48:	6053      	strne	r3, [r2, #4]
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f000 f85a 	bl	8005004 <__malloc_unlock>
 8004f50:	f104 000b 	add.w	r0, r4, #11
 8004f54:	1d23      	adds	r3, r4, #4
 8004f56:	f020 0007 	bic.w	r0, r0, #7
 8004f5a:	1ac2      	subs	r2, r0, r3
 8004f5c:	d0cc      	beq.n	8004ef8 <_malloc_r+0x20>
 8004f5e:	1a1b      	subs	r3, r3, r0
 8004f60:	50a3      	str	r3, [r4, r2]
 8004f62:	e7c9      	b.n	8004ef8 <_malloc_r+0x20>
 8004f64:	4622      	mov	r2, r4
 8004f66:	6864      	ldr	r4, [r4, #4]
 8004f68:	e7cc      	b.n	8004f04 <_malloc_r+0x2c>
 8004f6a:	1cc4      	adds	r4, r0, #3
 8004f6c:	f024 0403 	bic.w	r4, r4, #3
 8004f70:	42a0      	cmp	r0, r4
 8004f72:	d0e3      	beq.n	8004f3c <_malloc_r+0x64>
 8004f74:	1a21      	subs	r1, r4, r0
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f82e 	bl	8004fd8 <_sbrk_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d1dd      	bne.n	8004f3c <_malloc_r+0x64>
 8004f80:	e7cf      	b.n	8004f22 <_malloc_r+0x4a>
 8004f82:	bf00      	nop
 8004f84:	200000d8 	.word	0x200000d8
 8004f88:	200000dc 	.word	0x200000dc

08004f8c <_realloc_r>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	4607      	mov	r7, r0
 8004f90:	4614      	mov	r4, r2
 8004f92:	460e      	mov	r6, r1
 8004f94:	b921      	cbnz	r1, 8004fa0 <_realloc_r+0x14>
 8004f96:	4611      	mov	r1, r2
 8004f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f9c:	f7ff bf9c 	b.w	8004ed8 <_malloc_r>
 8004fa0:	b922      	cbnz	r2, 8004fac <_realloc_r+0x20>
 8004fa2:	f7ff ff4d 	bl	8004e40 <_free_r>
 8004fa6:	4625      	mov	r5, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fac:	f000 f830 	bl	8005010 <_malloc_usable_size_r>
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d20f      	bcs.n	8004fd4 <_realloc_r+0x48>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f7ff ff8e 	bl	8004ed8 <_malloc_r>
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0f2      	beq.n	8004fa8 <_realloc_r+0x1c>
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	f7ff ff13 	bl	8004df0 <memcpy>
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f7ff ff37 	bl	8004e40 <_free_r>
 8004fd2:	e7e9      	b.n	8004fa8 <_realloc_r+0x1c>
 8004fd4:	4635      	mov	r5, r6
 8004fd6:	e7e7      	b.n	8004fa8 <_realloc_r+0x1c>

08004fd8 <_sbrk_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	2300      	movs	r3, #0
 8004fdc:	4d05      	ldr	r5, [pc, #20]	; (8004ff4 <_sbrk_r+0x1c>)
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fc fba0 	bl	8001728 <_sbrk>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_sbrk_r+0x1a>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_sbrk_r+0x1a>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	200002dc 	.word	0x200002dc

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f000 b811 	b.w	8005020 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200002e4 	.word	0x200002e4

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f000 b80c 	b.w	8005022 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200002e4 	.word	0x200002e4

08005010 <_malloc_usable_size_r>:
 8005010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005014:	1f18      	subs	r0, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbc      	itt	lt
 800501a:	580b      	ldrlt	r3, [r1, r0]
 800501c:	18c0      	addlt	r0, r0, r3
 800501e:	4770      	bx	lr

08005020 <__retarget_lock_acquire_recursive>:
 8005020:	4770      	bx	lr

08005022 <__retarget_lock_release_recursive>:
 8005022:	4770      	bx	lr

08005024 <_init>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr

08005030 <_fini>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr
